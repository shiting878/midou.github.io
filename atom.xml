<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[小默的博客]]></title>
  <subtitle><![CDATA[用自由自在的态度，过随遇而安的生活。]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-06-13T15:28:14.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[xmuxiaomo]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[博客受访情况]]></title>
    <link href="http://yoursite.com/2015/06/13/%E5%8D%9A%E5%AE%A2%E5%8F%97%E8%AE%BF%E6%83%85%E5%86%B5/"/>
    <id>http://yoursite.com/2015/06/13/博客受访情况/</id>
    <published>2015-06-13T09:17:01.000Z</published>
    <updated>2015-06-13T15:28:14.000Z</updated>
    <content type="html"><![CDATA[<p>下午睡醒，想起好久没看看博客被访问的情况了，于是打开关联到我的博客的<a href="http://tongji.baidu.com/web/welcome/login" target="_blank" rel="external">百度统计</a>，查看的结果如下：</p>
<h3 id="浏览的地域分布">浏览的地域分布</h3><p><img src="http://qiniupicbed.qiniudn.com/upload/d92b2d60d9e48c126d6de7ed2ff7b9ed.png" alt=""></p>
<p>浏览量（PV，即Page View）从高到低的地区依次为：福建、山东、辽宁、台湾和云南。</p>
<a id="more"></a>
<p>这大概和我的主要人际范围有关吧，福建自不必说；山东的好朋友有一些；辽宁是本科四年所待的地方；台湾嘛，台湾和大陆一家亲；云南，就不知还有谁默默关注我了。^_^</p>
<p>福建的浏览量最高：</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/1d59d15086816ac3e832166e47ae1cb8.png" alt=""></p>
<p>福建为何浏览量这么高？！嘿嘿，因为大部分都是我自己经常来看看。自己的博客家园嘛，当然要经常来写写文章，发发照片，回顾回顾，打扫清理一番。自己倍加爱惜，收拾停当，才好迎接时常回家的梦梦，和偶尔造访的远方朋友！</p>
<h3 id="近30天浏览量统计">近30天浏览量统计</h3><p><img src="http://qiniupicbed.qiniudn.com/upload/630ed6b64a8d39540304928364150660.png" alt=""></p>
<p>其中红色的为节假日时间点，不过节不节假日的，对博客访问并没有明显影响。</p>
<h3 id="近30天访客数（UV,即Unique_Visitor，独立访客）统计">近30天访客数（UV,即Unique Visitor，独立访客）统计</h3><p><img src="http://qiniupicbed.qiniudn.com/upload/4cf63b0d78f1368d6edef9f5a82d894f.png" alt=""></p>
<p>可以看出，访问的人是很少的，不过这正像生活中和朋友的关系一样，大多数只是泛泛之交，真正关心和在乎我的挚友，哪怕只有两三，也已足够。</p>
<h3 id="近30天IP数统计">近30天IP数统计</h3><p><img src="http://qiniupicbed.qiniudn.com/upload/d63cccd0820916aea95e4a7188d6cdcc.png" alt=""></p>
<p>每一天的IP数要大于等于访客数，这是好理解的。因为嘛，嘿嘿，因为我在寝室用Mac上去看看，有时用手机上去看看，在实验室用台式机也上去看看，就造成IP数要比访客数稍微多一些了。</p>
<h3 id="近30天平均访问时长">近30天平均访问时长</h3><p><img src="http://qiniupicbed.qiniudn.com/upload/a9439e1f7a70d295156d8899ba09b6d5.png" alt=""></p>
<p>平均访问的时间大都不长，因为多是我发完文章后登上来看看是否发布成功。</p>
<h3 id="总结">总结</h3><p>哈哈，怎么发现和写报告似的，还来个总结！</p>
<p>博客纯属自己的空间，我在自己的世界里，嬉笑玩闹，自娱自乐。</p>
<p>模仿仓央嘉措，以一首小诗结尾，聊表意趣。</p>
<blockquote>
<p>《你到或者不到这——致我的博客》</p>
<p>你到，或者不到这<br>它就在这里<br>不来 不去</p>
<p>你念，或者不念这<br>我就在这里<br>不悲 不喜</p>
<p>你爱，或者不爱它<br>爱就在这里<br>不增 不减</p>
<p>你关注，或者不关注我的博客<br>它就在你的浏览器里，<br>不舍 不弃</p>
<p>来我的博客，或者<br>让它温暖你的内心<br>默然凝神 寂静欢喜</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>下午睡醒，想起好久没看看博客被访问的情况了，于是打开关联到我的博客的<a href="http://tongji.baidu.com/web/welcome/login">百度统计</a>，查看的结果如下：</p>
<h3 id="浏览的地域分布">浏览的地域分布</h3><p><img src="http://qiniupicbed.qiniudn.com/upload/d92b2d60d9e48c126d6de7ed2ff7b9ed.png" alt=""></p>
<p>浏览量（PV，即Page View）从高到低的地区依次为：福建、山东、辽宁、台湾和云南。</p>]]>
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="个人随笔" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[音量键的作用小感悟]]></title>
    <link href="http://yoursite.com/2015/06/12/%E9%9F%B3%E9%87%8F%E9%94%AE%E7%9A%84%E4%BD%9C%E7%94%A8%E5%B0%8F%E6%84%9F%E6%82%9F/"/>
    <id>http://yoursite.com/2015/06/12/音量键的作用小感悟/</id>
    <published>2015-06-12T09:24:46.000Z</published>
    <updated>2015-06-12T10:28:02.000Z</updated>
    <content type="html"><![CDATA[<p>刚才在听音乐看Coursera公开课视频的时候，突然发现了音量键的作用。</p>
<p>人的耳朵在聆听一首音乐曲子的时候，会有美妙的感受。如果现在有两首曲子，都是很好听的，但是把它们一同播放，则听的人会感觉到很杂乱，享受不到这两首曲子单独播放时带来的喜悦和感动。</p>
<p>然而，我发现，有时候边听音乐边看书，效率还是挺高的，而且心情很愉快。这时候，美妙的乐曲就像是背景音乐一样，它并不会影响我正常阅读时注意力的集中。相反，音乐还有可能帮助我记忆一些东西。我一直觉得音乐是神奇的，同一段音乐，我可能听过好几次，可是当再次听到的时候，我往往脑中会立刻浮现前几次听到这段音乐时的场景，包括在什么地方、当时在做什么事情，都一一浮现出来，很清晰。这就是音乐神奇的记忆力量。</p>
<a id="more"></a>
<p>扯远了，回来说音量键的作用。如果是播放器放着轻松的音乐，然后浏览器里在观看学习视频。我们就可以把音乐的音量调小，把视频的音量调大（通常只要调小音乐的音量，视频的音量自然就凸显出来了），这样音乐就成了背景，营造出美妙的气氛，让长时间的学习变得更有趣起来。</p>
<p>以前我只调系统的音量，而没去注意过播放器下面的音量调节按钮。今天才感悟出这个音量键设计的妙用！于是赶紧和大家分享这个感悟（虽然没啥人关注我的博客~），让音乐陪伴在我们的左右。</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/2403d739e60d967962981d8b448a8886.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>刚才在听音乐看Coursera公开课视频的时候，突然发现了音量键的作用。</p>
<p>人的耳朵在聆听一首音乐曲子的时候，会有美妙的感受。如果现在有两首曲子，都是很好听的，但是把它们一同播放，则听的人会感觉到很杂乱，享受不到这两首曲子单独播放时带来的喜悦和感动。</p>
<p>然而，我发现，有时候边听音乐边看书，效率还是挺高的，而且心情很愉快。这时候，美妙的乐曲就像是背景音乐一样，它并不会影响我正常阅读时注意力的集中。相反，音乐还有可能帮助我记忆一些东西。我一直觉得音乐是神奇的，同一段音乐，我可能听过好几次，可是当再次听到的时候，我往往脑中会立刻浮现前几次听到这段音乐时的场景，包括在什么地方、当时在做什么事情，都一一浮现出来，很清晰。这就是音乐神奇的记忆力量。</p>]]>
    
    </summary>
    
      <category term="音乐" scheme="http://yoursite.com/tags/%E9%9F%B3%E4%B9%90/"/>
    
      <category term="个人随笔" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[清晨的世界]]></title>
    <link href="http://yoursite.com/2015/06/11/%E6%B8%85%E6%99%A8%E7%9A%84%E4%B8%96%E7%95%8C/"/>
    <id>http://yoursite.com/2015/06/11/清晨的世界/</id>
    <published>2015-06-11T06:02:02.000Z</published>
    <updated>2015-06-10T23:42:00.000Z</updated>
    <content type="html"><![CDATA[<p>清晨五点半，起床，骑着自行车出发。</p>
<p>今天梦梦要去济南开会，我去本部送送她。</p>
<p>清晨，有好多路走不通。有的路口保安还没起来上班，门是关着的，于是我只好绕路。</p>
<p>清晨，我走了平时不会走的路线，骑车骑上了平时不愿骑的陡坡。新路线有障碍，陡坡花力气，但是一旦越过，发现自己原来是很有力量的。清晨让我觉得充满希望与活力。</p>
<a id="more"></a>
<p>清晨的校园本部十分安静，却又十分热闹。安静是因为几乎看不见有人行走，热闹是因为树上的鸟儿在叽叽喳喳地歌唱。我环顾四周，突然才发现，清晨的世界不是人类的，而是属于大自然和自然界中的万物的。它属于成群欢唱的鸟儿，属于静静林立的建筑，属于枝头飘落的花瓣，属于山，属于水，属于一切自然的流动。</p>
<p>一路上我被许多蜘蛛网绊到，不过我是高兴的，因为这说明清晨的这条路还鲜有人走过，我是引路的人。</p>
<p>金色的阳光下，我的影子在石阶上，拖得很长，树荫下的大地落满了果实和种子。</p>
<p>清晨的世界，万物复苏。</p>
<p>清晨，一切刚刚开始。</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/9acbbf67134dbbdfd9fe9e4f7d73cd93.JPG" alt=""></p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/124ad674ad759305a00d09cda73aca11.JPG" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>清晨五点半，起床，骑着自行车出发。</p>
<p>今天梦梦要去济南开会，我去本部送送她。</p>
<p>清晨，有好多路走不通。有的路口保安还没起来上班，门是关着的，于是我只好绕路。</p>
<p>清晨，我走了平时不会走的路线，骑车骑上了平时不愿骑的陡坡。新路线有障碍，陡坡花力气，但是一旦越过，发现自己原来是很有力量的。清晨让我觉得充满希望与活力。</p>]]>
    
    </summary>
    
      <category term="看见" scheme="http://yoursite.com/tags/%E7%9C%8B%E8%A7%81/"/>
    
      <category term="个人随笔" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[R Programming Assignment 1: Air Pollution]]></title>
    <link href="http://yoursite.com/2015/06/10/R-Programming-Assignment-1/"/>
    <id>http://yoursite.com/2015/06/10/R-Programming-Assignment-1/</id>
    <published>2015-06-10T05:45:46.000Z</published>
    <updated>2015-06-13T06:46:51.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Introduction">Introduction</h2><p>For this first programming assignment you will write three functions that are meant to interact with dataset that accompanies this assignment. The dataset is contained in a zip file <strong>specdata.zip</strong> that you can download from the Coursera web site. </p>
<h2 id="Data">Data</h2><p>The zip file containing the data can be downloaded here:</p>
<ul>
<li><a href="https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2Fspecdata.zip" target="_blank" rel="external">specdata.zip</a> [2.4MB]</li>
</ul>
<p>The zip file contains 332 comma-separated-value (CSV) files containing pollution monitoring data for fine particulate matter (PM) air pollution at 332 locations in the United States. Each file contains data from a single monitor and the ID number for each monitor is contained in the file name. For example, data for monitor 200 is contained in the file “200.csv”. Each file contains three variables:</p>
<ul>
<li><p>Date: the date of the observation in YYYY-MM-DD format (year-month-day)</p>
</li>
<li><p>sulfate: the level of sulfate PM in the air on that date (measured in micrograms per cubic meter)</p>
</li>
<li><p>nitrate: the level of nitrate PM in the air on that date (measured in micrograms per cubic meter)</p>
</li>
</ul>
<p>For this programming assignment you will need to unzip this file and create the directory ‘specdata’. Once you have unzipped the zip file, <strong>do not</strong> make any modifications to the files in the ‘specdata’ directory. In each file you’ll notice that there are many days where either sulfate or nitrate (or both) are missing (coded as NA). This is common with air pollution monitoring data in the United States.</p>
<a id="more"></a>
<h2 id="Part_1">Part 1</h2><p>Write a function named ‘pollutantmean’ that calculates the mean of a pollutant (sulfate or nitrate) across a specified list of monitors. The function ‘pollutantmean’ takes three arguments: ‘directory’, ‘pollutant’, and ‘id’. Given a vector monitor ID numbers, ‘pollutantmean’ reads that monitors’ particulate matter data from the directory specified in the ‘directory’ argument and returns the mean of the pollutant across all of the monitors, ignoring any missing values coded as NA. A prototype of the function is as follows</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">pollutantmean &lt;- <span class="function"><span class="keyword">function</span><span class="params">(directory, pollutant, id = <span class="number">1</span>:<span class="number">332</span>)</span> </span>&#123;</span><br><span class="line">        <span class="comment">## 'directory' is a character vector of length 1 indicating</span></span><br><span class="line">        <span class="comment">## the location of the CSV files</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">## 'pollutant' is a character vector of length 1 indicating</span></span><br><span class="line">        <span class="comment">## the name of the pollutant for which we will calculate the</span></span><br><span class="line">        <span class="comment">## mean; either "sulfate" or "nitrate".</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">## 'id' is an integer vector indicating the monitor ID numbers</span></span><br><span class="line">        <span class="comment">## to be used</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">## Return the mean of the pollutant across all monitors list</span></span><br><span class="line">        <span class="comment">## in the 'id' vector (ignoring NA values)</span></span><br><span class="line">        <span class="comment">## NOTE: Do not round the result!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You can see some <a href="https://d396qusza40orc.cloudfront.net/rprog%2Fdoc%2Fpollutantmean-demo.html" target="_blank" rel="external">example output from this function</a>. The function that you write should be able to match this output. Please save your code to a file named <strong>pollutantmean.R</strong>.</p>
<h2 id="Part_2">Part 2</h2><p>Write a function that reads a directory full of files and reports the number of completely observed cases in each data file. The function should return a data frame where the first column is the name of the file and the second column is the number of complete cases. A prototype of this function follows</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">complete &lt;- <span class="function"><span class="keyword">function</span><span class="params">(directory, id = <span class="number">1</span>:<span class="number">332</span>)</span> </span>&#123;</span><br><span class="line">        <span class="comment">## 'directory' is a character vector of length 1 indicating</span></span><br><span class="line">        <span class="comment">## the location of the CSV files</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">## 'id' is an integer vector indicating the monitor ID numbers</span></span><br><span class="line">        <span class="comment">## to be used</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">## Return a data frame of the form:</span></span><br><span class="line">        <span class="comment">## id nobs</span></span><br><span class="line">        <span class="comment">## 1  117</span></span><br><span class="line">        <span class="comment">## 2  1041</span></span><br><span class="line">        <span class="comment">## ...</span></span><br><span class="line">        <span class="comment">## where 'id' is the monitor ID number and 'nobs' is the</span></span><br><span class="line">        <span class="comment">## number of complete cases</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You can see some <a href="https://d396qusza40orc.cloudfront.net/rprog%2Fdoc%2Fcomplete-demo.html" target="_blank" rel="external">example output from this function</a>. The function that you write should be able to match this output. Please save your code to a file named <strong>complete.R</strong>. To run the submit script for this part, make sure your working directory has the file <strong>complete.R</strong> in it.</p>
<h2 id="Part_3">Part 3</h2><p>Write a function that takes a directory of data files and a threshold for complete cases and calculates the correlation between sulfate and nitrate for monitor locations where the number of completely observed cases (on all variables) is greater than the threshold. The function should return a vector of correlations for the monitors that meet the threshold requirement. If no monitors meet the threshold requirement, then the function should return a numeric vector of length 0. A prototype of this function follows</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">corr &lt;- <span class="function"><span class="keyword">function</span><span class="params">(directory, threshold = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        <span class="comment">## 'directory' is a character vector of length 1 indicating</span></span><br><span class="line">        <span class="comment">## the location of the CSV files</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">## 'threshold' is a numeric vector of length 1 indicating the</span></span><br><span class="line">        <span class="comment">## number of completely observed observations (on all</span></span><br><span class="line">        <span class="comment">## variables) required to compute the correlation between</span></span><br><span class="line">        <span class="comment">## nitrate and sulfate; the default is 0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">## Return a numeric vector of correlations</span></span><br><span class="line">        <span class="comment">## NOTE: Do not round the result!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>For this function you will need to use the ‘cor’ function in R which calculates the correlation between two vectors. Please read the help page for this function via ‘?cor’ and make sure that you know how to use it.<br>You can see some <a href="https://d396qusza40orc.cloudfront.net/rprog%2Fdoc%2Fcorr-demo.html" target="_blank" rel="external">example output from this function</a>. The function that you write should be able to match this output. Please save your code to a file named <strong>corr.R</strong>. To run the submit script for this part, make sure your working directory has the file <strong>corr.R</strong> in it.</p>
<hr>
<h2 id="My_Solution">My Solution</h2><h3 id="Part_1-1">Part 1</h3><p>pollutantmean.R:</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">pollutantmean &lt;- <span class="function"><span class="keyword">function</span>(<span class="title">directory</span>, <span class="title">pollutant</span>, <span class="title">id</span> = <span class="title">1</span>:<span class="title">332</span>) &#123;</span></span><br><span class="line">        files_full &lt;- list.<span class="built_in">files</span>(<span class="built_in">directory</span>, full.names = <span class="constant">TRUE</span>) </span><br><span class="line">        </span><br><span class="line">        dat &lt;- data.frame()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (i <span class="operator">in</span> id) &#123;</span><br><span class="line">                dat &lt;- rbind(dat, <span class="built_in">read</span>.csv(files_full[i]))</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        mean(dat[, pollutant], na.rm = <span class="constant">TRUE</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Part_2-1">Part 2</h3><p>complete.R:</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">complete</span> &lt;- function(directory, id = <span class="number">1</span>:<span class="number">332</span>) &#123;</span><br><span class="line">        files_full &lt;- list.files(directory, full.names = <span class="type">TRUE</span>)</span><br><span class="line">        dat &lt;- <span class="typedef"><span class="keyword">data</span>.frame<span class="container">()</span></span></span><br><span class="line">        </span><br><span class="line">        for (i <span class="keyword">in</span> id) &#123;</span><br><span class="line">                moni_i &lt;- read.csv(files_full[i])</span><br><span class="line">                nobs &lt;- sum(complete.cases(moni_i))</span><br><span class="line">                tmp &lt;- <span class="typedef"><span class="keyword">data</span>.frame<span class="container">(<span class="title">i</span>, <span class="title">nobs</span>)</span></span></span><br><span class="line">                dat &lt;- rbind(dat, tmp)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        colnames(dat) &lt;- c(<span class="string">"id"</span>, <span class="string">"nobs"</span>)</span><br><span class="line">        dat</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Part_3-1">Part 3</h3><p>corr.R:</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">corr</span> &lt;- function(directory, threshold = 0) &#123;</span><br><span class="line">        files_full &lt;- <span class="keyword">list</span>.files(directory, full.names = TRUE)</span><br><span class="line">        dat &lt;- vector(mode = <span class="string">"numeric"</span>, length = 0)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> 1:<span class="literal">length</span>(files_full)) &#123;</span><br><span class="line">                moni_i &lt;- <span class="keyword">read</span>.csv(files_full[i])</span><br><span class="line">                csum &lt;- <span class="literal">sum</span>((!is.na(moni_i<span class="label">$sulfate</span>)) &amp; (!is.na(moni_i<span class="label">$nitrate</span>)))</span><br><span class="line">                <span class="keyword">if</span> (csum &gt; threshold) &#123;</span><br><span class="line">                        tmp &lt;- moni_i[<span class="keyword">which</span>(!is.na(moni_i<span class="label">$sulfate</span>)), ]</span><br><span class="line">                        submoni_i &lt;- tmp[<span class="keyword">which</span>(!is.na(tmp<span class="label">$nitrate</span>)), ]</span><br><span class="line">                        dat &lt;- c(dat, <span class="keyword">cor</span>(submoni_i<span class="label">$sulfate</span>, submoni_i<span class="label">$nitrate</span>))</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        dat</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Results">Results</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/603c262bef54b77750e4f767520fde12.png" alt=""></p>
<h2 id="Screenshots">Screenshots</h2><p>I am learning:</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/4bca737e10a93f3ab1bc142ca8b90141.png" alt=""></p>
<p>Work out the final solution:</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/7b5429aa8dce6a94f26830599e5b193a.png" alt=""></p>
<p>I am really exciting when finishing this programming assignment!</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Introduction">Introduction</h2><p>For this first programming assignment you will write three functions that are meant to interact with dataset that accompanies this assignment. The dataset is contained in a zip file <strong>specdata.zip</strong> that you can download from the Coursera web site. </p>
<h2 id="Data">Data</h2><p>The zip file containing the data can be downloaded here:</p>
<ul>
<li><a href="https://d396qusza40orc.cloudfront.net/rprog%2Fdata%2Fspecdata.zip">specdata.zip</a> [2.4MB]</li>
</ul>
<p>The zip file contains 332 comma-separated-value (CSV) files containing pollution monitoring data for fine particulate matter (PM) air pollution at 332 locations in the United States. Each file contains data from a single monitor and the ID number for each monitor is contained in the file name. For example, data for monitor 200 is contained in the file “200.csv”. Each file contains three variables:</p>
<ul>
<li><p>Date: the date of the observation in YYYY-MM-DD format (year-month-day)</p>
</li>
<li><p>sulfate: the level of sulfate PM in the air on that date (measured in micrograms per cubic meter)</p>
</li>
<li><p>nitrate: the level of nitrate PM in the air on that date (measured in micrograms per cubic meter)</p>
</li>
</ul>
<p>For this programming assignment you will need to unzip this file and create the directory ‘specdata’. Once you have unzipped the zip file, <strong>do not</strong> make any modifications to the files in the ‘specdata’ directory. In each file you’ll notice that there are many days where either sulfate or nitrate (or both) are missing (coded as NA). This is common with air pollution monitoring data in the United States.</p>]]>
    
    </summary>
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[简洁高效的R——内建函数的使用]]></title>
    <link href="http://yoursite.com/2015/06/09/%E7%AE%80%E6%B4%81%E9%AB%98%E6%95%88%E7%9A%84R%E2%80%94%E2%80%94%E5%86%85%E5%BB%BA%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2015/06/09/简洁高效的R——内建函数的使用/</id>
    <published>2015-06-09T09:37:30.000Z</published>
    <updated>2015-06-09T15:11:10.000Z</updated>
    <content type="html"><![CDATA[<p>今天看到一个很好的<a href="https://github.com/rdpeng/practice_assignment/blob/master/practice_assignment.rmd" target="_blank" rel="external">tutorial</a>，学习了之后，精简地写出了以下的两个function。前一个是从基本思想出发来写，后一个是对前一个的优化版本。后者在处理数量很大的CSV文件操作时会显出优势。</p>
<a id="more"></a>
<p>weightmedian.R:</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">weightmedian &lt;- <span class="function"><span class="keyword">function</span>(<span class="title">directory</span>, <span class="title">day</span>) &#123;</span></span><br><span class="line">        files_full &lt;- list.<span class="built_in">files</span>(<span class="built_in">directory</span>, full.names = <span class="constant">TRUE</span>)</span><br><span class="line">        dat &lt;- data.frame()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (i <span class="operator">in</span> <span class="number">1</span>:<span class="number">5</span>) &#123;</span><br><span class="line">                dat &lt;- rbind(dat, <span class="built_in">read</span>.csv(files_full[i]))</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        dat_day &lt;- dat[which(dat[, <span class="string">"Day"</span>] == day), ]</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">median</span>(dat_day$Weight, na.rm = <span class="constant">TRUE</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">optiweightmedian &lt;- <span class="function"><span class="keyword">function</span>(<span class="title">directory</span>, <span class="title">day</span>) &#123;</span></span><br><span class="line">        files_full &lt;- list.<span class="built_in">files</span>(<span class="built_in">directory</span>, full.names = <span class="constant">TRUE</span>)</span><br><span class="line">        <span class="comment">#tmp &lt;- vector(mode = "list", length = length(files_full))</span></span><br><span class="line">        tmp &lt;- lapply(files_full, <span class="built_in">read</span>.csv)</span><br><span class="line">        dat &lt;- <span class="built_in">do</span>.call(rbind, tmp)</span><br><span class="line">        dat_day &lt;- dat[which(dat[, <span class="string">"Day"</span>] == day), ]</span><br><span class="line">        <span class="built_in">median</span>(dat_day$Weight, na.rm = <span class="constant">TRUE</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码虽短，却足以显示出R语言的简洁高效。简单之中，往往蕴藏着大智慧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天看到一个很好的<a href="https://github.com/rdpeng/practice_assignment/blob/master/practice_assignment.rmd">tutorial</a>，学习了之后，精简地写出了以下的两个function。前一个是从基本思想出发来写，后一个是对前一个的优化版本。后者在处理数量很大的CSV文件操作时会显出优势。</p>]]>
    
    </summary>
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[迈克尔·彭博哈佛大学2014毕业典礼演讲]]></title>
    <link href="http://yoursite.com/2015/06/09/%E8%BF%88%E5%85%8B%E5%B0%94%C2%B7%E5%BD%AD%E5%8D%9A%E5%93%88%E4%BD%9B%E5%A4%A7%E5%AD%A62014%E6%AF%95%E4%B8%9A%E5%85%B8%E7%A4%BC%E6%BC%94%E8%AE%B2/"/>
    <id>http://yoursite.com/2015/06/09/迈克尔·彭博哈佛大学2014毕业典礼演讲/</id>
    <published>2015-06-09T06:19:01.000Z</published>
    <updated>2015-06-09T07:56:25.000Z</updated>
    <content type="html"><![CDATA[<p>演讲链接：<a href="http://v.163.com/movie/2014/5/T/Q/M9TCRI0FA_M9TCSMKTQ.html" target="_blank" rel="external">http://v.163.com/movie/2014/5/T/Q/M9TCRI0FA_M9TCSMKTQ.html</a></p>
<p>部分精彩观点截取：</p>
<p>Harvard remains what it was when I first arrived on campus 50 years ago. Its purpose is not only to advance knowledge, but to advance the ideals of our nation. Great universities are places where people of all backgrounds, holding all beliefs, pursuing all questions can come to study and debate their ideas freely and openly. Today, I’d like to talk with you about how important it is for that freedom to exist for everyone, no matter how strongly we may disagree with another’s viewpoint. Tolerance for other people’s ideas and the freedom to express your own are inseparable values at great universities. Joined together, they form a sacred trust that holds the basis of our democratic society.</p>
<a id="more"></a>
<p>哈佛保留了五十年前我刚进校时的优良传统。哈佛的目的不只是增进知识，还包括增进我们关于国家的理想。各种背景、各种信仰、探寻各种问题的人，都能在伟大的大学中自由开放地学习知识并探讨想法。今天我想和大家谈谈这种自由对于每个人而言是多么重要，无论我们多么强烈反对别人的观点。对他人想法的容忍以及表达自身言论的自由是伟大的大学中不可分割的价值，两者结合在一起，构成了维持民主社会根基的神圣信赖。</p>
<hr>
<p>Ideas can be dangerous. They can change society. They can upend traditions. They can start revolutions.</p>
<p>思想确实危险，思想能够改变社会，思想能够颠覆传统，思想能够开启革命。</p>
<hr>
<p>Great universities must not become predictably partisan. And a liberal arts education must not be an education in the art of liberalism. The role of universities is not to promote an ideology. It is to provide scholars and students with a neutral forum for researching and debating issues without tipping the scales in one direction or repressing unpopular views.</p>
<p>伟大的大学不应当戴有党派的有色眼镜，教育不应当成为自由主义的教育。大学的角色不应当是宣扬某一种意识形态，而应当是为学者和学生提供问题研究和辩论的中立论坛，不让天平朝任何一个方向倾斜，不抑制不受欢迎的观点。</p>
<hr>
<p>John Stuart Mill’s <em>On Liberty</em>: “The peculiar evil of silencing the expression of an opinion is that it is robbing the human race, posterity as well as the existing generation, those who dissent from the opinion, still more than those who hold it. If the opinion is right, they are deprived of the opportunity of exchangeing error for truth. If wrong, they lose, what is almost as great a benefit, the clearer perception and livelier impression of truth produced by its collision with error.”</p>
<p>约翰·斯图尔特·密尔的《论自由》中写道：“强迫别人不能发表意见的邪恶，乃是对整个人类的掠夺，对后代和当代人类的掠夺，对不同意于那个意见的人掠夺更多。假如那意见是对的，那么他们是被剥夺了以错误换真理的机会；假如那意见是错的，那么他们是失掉了一个差不多同样大的利益，那就是从真理与错误冲突中产生出来的对于真理的更加清楚的认识和更加生动的印象。”</p>
<hr>
<p>Some students called on the administration to rescind the invitation to Johnston, because they opposed some of his education policies. But to their great credit, President Faust and Dean Ryan stood firm. As Dean Ryan wrote to students, “I have encountered many people of good faith who share my basic goals, but disagree with my views when it comes to the question of how best to improve education. In my view, those differences should be explored, debated, challenged, and questioned. But they should also be respected and indeed, celebrated.” He could not have been more correct and he could not have provided a more valuable final lesson to the class of 2014.</p>
<p>不少学生号召管理层撤回对约翰斯顿的邀请，因为他们反对他的一些教育政策。不过，佛斯特校长和赖安院长都非常坚定，赖安院长写信给这些学生说，“我碰到过很多怀有良好愿望的人，他们都有相同的目标，只是同我在教育如何改善的问题上观点存在分歧。在我看来，这些分歧应当经过探讨和辩论，收到挑战和质疑，同时他们也应受到尊敬和庆贺。”他是完全正确的，他以自身言行为2014届毕业生上了最为宝贵的最后一课。</p>
<hr>
<p>Now I get to the class of 2014. You graduates must help lead the way. On every issue, we must follow the evidence where it leads, and listen to people where they are. If we do that, there is no problem we cannot solve, no gridlock we cannot break, no compromise we cannot broker. The more we embrace a free exchange of ideas and the more we accept that political diversity, the healthier we are and the stronger our society will be.</p>
<p>回到2014届毕业生来，你们必须引领前路。每个问题上，我们都应当遵循证据的指引，倾听人们的意见。只要我们这样做，就没有什么问题解决不了，没有解不开的死结，没有谈不妥的和解。思想交流越自由，政治多样性越强，我们就越健康，社会就会越强大。</p>
<hr>
<p>Graduates, throughout your lives, do not be afraid of saying what you believe is right no matter how unpopular it may be, especially when it comes to defending the rights of others. Stand up for the rights of others, and in some ways it’s even more important than standing up for your own rights. Because when people seek to repress freedom for some and you remain silent, you are complicit in that repression and you may well become its victim. Do not be complicit, and do not follow the crowd. Speak up, and fight back. You will take your lumps, I can assure you of that. You will lose some friends and make some enemies, I can assure you of that too. But the arc of history will be on your side, and your nation will be stronger for it.</p>
<p>毕业生们，在你们一生中，不要害怕说出自己认为正确的东西，无论它有多么不受欢迎，特别是在捍卫他人权利的时候。捍卫他人权利，有时比捍卫自身权利更为重要。因为当人们寻求抑制其他人自由的时候，你可能会保持沉默，这样你将会助长这种抑制，哪天你可能也会成为受害者。不要串通一气，不要人云亦云，大声说出来，有力地回击。我敢肯定，你会受到批评。我敢肯定，你还会失去一些朋友，树立一些敌人。但历史会站在你这一边，我们的国家也会因此更加强盛。</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/fbbbc6b2b31a0a5a51ebb06066ced0aa.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>演讲链接：<a href="http://v.163.com/movie/2014/5/T/Q/M9TCRI0FA_M9TCSMKTQ.html">http://v.163.com/movie/2014/5/T/Q/M9TCRI0FA_M9TCSMKTQ.html</a></p>
<p>部分精彩观点截取：</p>
<p>Harvard remains what it was when I first arrived on campus 50 years ago. Its purpose is not only to advance knowledge, but to advance the ideals of our nation. Great universities are places where people of all backgrounds, holding all beliefs, pursuing all questions can come to study and debate their ideas freely and openly. Today, I’d like to talk with you about how important it is for that freedom to exist for everyone, no matter how strongly we may disagree with another’s viewpoint. Tolerance for other people’s ideas and the freedom to express your own are inseparable values at great universities. Joined together, they form a sacred trust that holds the basis of our democratic society.</p>]]>
    
    </summary>
    
      <category term="精彩演讲" scheme="http://yoursite.com/categories/%E7%B2%BE%E5%BD%A9%E6%BC%94%E8%AE%B2/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[平静的午间时光]]></title>
    <link href="http://yoursite.com/2015/06/08/%E5%B9%B3%E9%9D%99%E7%9A%84%E5%8D%88%E9%97%B4%E6%97%B6%E5%85%89/"/>
    <id>http://yoursite.com/2015/06/08/平静的午间时光/</id>
    <published>2015-06-08T07:48:38.000Z</published>
    <updated>2015-06-08T09:52:14.000Z</updated>
    <content type="html"><![CDATA[<p>今天是罗老师的生日，我和梦梦在食堂打了几个菜，去他家和他一起吃午饭。</p>
<p>罗老师是梦梦的催眠课老师，是个平静、简单的老人。他家里的家具都很陈旧了，木质桌椅间散发着淡淡的岁月流转的味道。</p>
<p>我们吃过午饭，罗老师拿起他身旁的木吉他，边弹边唱起来。他喜欢听邓丽君的歌，好多歌他都熟悉调性并记得歌词。他想到什么歌，就让我用手机搜一下放出来，他跟着弹唱。每一曲结束时，他都想好下一首想唱的歌，我就一首一首地听他唱。</p>
<a id="more"></a>
<p>一曲《美酒加咖啡》唱毕，罗老师说这首歌可以作为音乐治疗的曲子，安慰失恋的人，并将歌词和其中的意思缓缓道来。他唱得很认真，也很陶醉，沉浸在流淌的旋律中。</p>
<p>我看到唱片旁摆着一摞纸，上面是他抄写的《小薇》的歌词，他说这个曲子的旋律真好听。</p>
<p>玖月奇迹的《倾国倾城》、苏芮的《牵手》、邓丽君的《千言万语》、《又见炊烟》、《小城故事》、《四季歌》、《天涯歌女》、《泪的小雨》，一曲又一曲，美丽动听的歌，诉说着一个一个如泣如诉的故事，弥漫在阳光温暖的午后小屋客厅内。</p>
<p>音乐让人陶醉，音乐穿越时空，好听的曲子不会随时间流逝，而会渐渐沉淀下来，历久弥新，陈香四溢，感动一代一代的人。</p>
<p>平静的午间，我听着罗老师一曲又一曲的弹唱，望着窗外摇动的枝叶间透过的道道阳光。</p>
<p>时间安静而缓慢。岁月在歌声中，变得绵长而悠远。</p>
<blockquote>
<p>《美酒加咖啡》</p>
<p>美酒加咖啡<br>我只要喝一杯<br>想起了过去<br>又喝了第二杯<br>明知道爱情像流水<br>管他去爱谁<br>我要美酒加咖啡<br>一杯再一杯</p>
<p>我并没有醉<br>我只是心儿碎<br>开放的花蕊<br>你怎么也流泪<br>如果你也是心儿碎<br>陪你喝一杯<br>我要美酒加咖啡<br>一杯再一杯</p>
<p>我并没有醉<br>我只是心儿碎<br>开放的花蕊<br>你怎么也流泪<br>如果你也是心儿碎<br>陪你喝一杯<br>我要美酒加咖啡<br>一杯再一杯<br>一杯再一杯</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天是罗老师的生日，我和梦梦在食堂打了几个菜，去他家和他一起吃午饭。</p>
<p>罗老师是梦梦的催眠课老师，是个平静、简单的老人。他家里的家具都很陈旧了，木质桌椅间散发着淡淡的岁月流转的味道。</p>
<p>我们吃过午饭，罗老师拿起他身旁的木吉他，边弹边唱起来。他喜欢听邓丽君的歌，好多歌他都熟悉调性并记得歌词。他想到什么歌，就让我用手机搜一下放出来，他跟着弹唱。每一曲结束时，他都想好下一首想唱的歌，我就一首一首地听他唱。</p>]]>
    
    </summary>
    
      <category term="岁月" scheme="http://yoursite.com/tags/%E5%B2%81%E6%9C%88/"/>
    
      <category term="时间" scheme="http://yoursite.com/tags/%E6%97%B6%E9%97%B4/"/>
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="个人随笔" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[伴我同行——哆啦A梦]]></title>
    <link href="http://yoursite.com/2015/06/05/%E4%BC%B4%E6%88%91%E5%90%8C%E8%A1%8C%E2%80%94%E2%80%94%E5%93%86%E5%95%A6A%E6%A2%A6/"/>
    <id>http://yoursite.com/2015/06/05/伴我同行——哆啦A梦/</id>
    <published>2015-06-04T16:17:18.000Z</published>
    <updated>2015-06-04T17:11:57.000Z</updated>
    <content type="html"><![CDATA[<p>今晚和梦梦一起看了《伴我同行》，哆啦A梦真是可爱。</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/9d3f04bda2a231a20e6cd0d392601282.jpg" alt=""></p>
<a id="more"></a>
<p><img src="http://qiniupicbed.qiniudn.com/upload/1ebfc690d90ae20cccd6d19355456699.jpg" alt=""></p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/a00a2dcb31ea0227cb428082ceeac601.jpg" alt=""></p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/d319fcbf9669346cccffc6b7206dadba.jpg" alt=""></p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/d4e701f148f19a9bc5b5d9dba1bcdd57.jpg" alt=""></p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/69bdbe690393827ef871fe0f41c5c56a.jpg" alt=""></p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/d5cbf0ea8a152fe6553ed53077661194.jpg" alt=""></p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/2e2ca3f35257cbc5a30bd5d6a9249959.png" alt=""></p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/c4639760bcd01ce5f05340fc81136cff.jpg" alt=""></p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/bda0fd445290dac30f44cd8f8bcfc875.jpg" alt=""></p>
<p>末了，悄悄补上一张梦梦和哆啦A梦的合影！</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/6db81b96cf67850d891d85e5fce9d3ef.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今晚和梦梦一起看了《伴我同行》，哆啦A梦真是可爱。</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/9d3f04bda2a231a20e6cd0d392601282.jpg" alt=""></p>]]>
    
    </summary>
    
      <category term="电影" scheme="http://yoursite.com/categories/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[吃货组合]]></title>
    <link href="http://yoursite.com/2015/05/29/%E5%90%83%E8%B4%A7%E7%BB%84%E5%90%88/"/>
    <id>http://yoursite.com/2015/05/29/吃货组合/</id>
    <published>2015-05-29T15:49:44.000Z</published>
    <updated>2015-05-29T15:53:12.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://qiniupicbed.qiniudn.com/upload/189e2c25c97a414b30a667895e63ce49.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://qiniupicbed.qiniudn.com/upload/189e2c25c97a414b30a667895e63ce49.jpg" alt=""></p>
]]>
    </summary>
    
      <category term="美图" scheme="http://yoursite.com/categories/%E7%BE%8E%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Forrest Gump]]></title>
    <link href="http://yoursite.com/2015/05/27/Forrest-Gump/"/>
    <id>http://yoursite.com/2015/05/27/Forrest-Gump/</id>
    <published>2015-05-27T14:36:43.000Z</published>
    <updated>2015-05-27T14:52:32.000Z</updated>
    <content type="html"><![CDATA[<p>今晚看了《阿甘正传》，不知道要写什么感想，只是看完发现右眼有些眼泪。</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/bbff587abb60d4ddc6b770f42d116678.jpg" alt=""></p>
<a id="more"></a>
<p><img src="http://qiniupicbed.qiniudn.com/upload/e342585b4a28d02fd9d2e43d7f189e58.jpg" alt=""></p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/50b321bd38f675e89ab77d71b2f6e1f0.jpg" alt=""></p>
<blockquote>
<p>Stupid is as stupid does.</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>今晚看了《阿甘正传》，不知道要写什么感想，只是看完发现右眼有些眼泪。</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/bbff587abb60d4ddc6b770f42d116678.jpg" alt=""></p>]]>
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="电影" scheme="http://yoursite.com/categories/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MBTI职业性格测试结果]]></title>
    <link href="http://yoursite.com/2015/05/26/MBTI%E8%81%8C%E4%B8%9A%E6%80%A7%E6%A0%BC%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C/"/>
    <id>http://yoursite.com/2015/05/26/MBTI职业性格测试结果/</id>
    <published>2015-05-26T09:46:33.000Z</published>
    <updated>2015-05-26T15:54:15.000Z</updated>
    <content type="html"><![CDATA[<h1 id="MBTI简介">MBTI简介</h1><p>闲来无事，做了下MBTI测试——国际最为流行的职业人格评估测试。</p>
<p>20世纪40年代，美国一对母女在荣格的心理学类型理论的基础上提出了一套个性测验模型。伊莎贝尔·迈尔斯（Isabel Myers）和凯瑟琳·布里格斯（Katharine Briggs）把这套理论模型以她们的名字命名，叫作Myers-Briggs类型指标<strong>MBTI（Myers-Briggs Type Indicator）</strong>。</p>
<a id="more"></a>
<p>MBTI职业性格测试作为一种对个性的判断和分析，是一个理论模型，从纷繁复杂的个性特征中，归纳提炼出4个关键要素——<strong>动力、信息收集、决策方式、生活方式</strong>，进行分析判断，从而把不同个性的人区别开来。</p>
<h2 id="MBTI指标">MBTI指标</h2><p>MBTI人格共有四个维度，每个维度有两个方向，共计八个方面。</p>
<p>分别是：</p>
<ul>
<li><p>外向（E）和内向（I）——（动力）</p>
</li>
<li><p>感觉（S）和直觉（N）——（信息收集）</p>
</li>
<li><p>思考（T）和情感（F）——（决策方式）</p>
</li>
<li><p>判断（J）和知觉（P）——（生活方式）</p>
</li>
</ul>
<p>四个维度，两两组合，共有十六种类型。</p>
<hr>
<h1 id="测试渠道">测试渠道</h1><p>我做了两个测试，以确保测试结果的可靠性：</p>
<p>（1）才储网测试链接：<a href="http://www.apesk.com/mbti/dati.asp" target="_blank" rel="external">http://www.apesk.com/mbti/dati.asp</a>，进去之后，我选择的是<strong>28题版</strong>；</p>
<p>（2）壹心理网测试链接：<a href="http://www.xinli001.com/ceshi/422/" target="_blank" rel="external">http://www.xinli001.com/ceshi/422/</a>，这里默认是采用<strong>93题版</strong>的。</p>
<hr>
<h1 id="才储网测试结果">才储网测试结果</h1><h2 id="结果标题">结果标题</h2><p><strong>INFJ 博爱型——基于博爱的理想，设身处地地关怀他人</strong></p>
<h2 id="我的MBTI图形">我的MBTI图形</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/9760bafafae59a1d8951c5c145fcf8ec.png" alt=""></p>
<h2 id="基本描述">基本描述</h2><p>分析：您的性格类型倾向为“ INFJ ”(内向 直觉 情感 判断 倾向度： I71 N57 F71 J57  不假思索指数：8)</p>
<p>寻求思想、关系、物质等之间的意义和联系。希望了解什么能够激励人，对人有很强的洞察力。有责任心，坚持自己的价值观。对于怎样更好的服务大众有清晰的远景。在对于目标的实现过程中有计划而且果断坚定。</p>
<p>INFJ型的人生活在思想的世界里。他们是独立的、有独创性的思想家，具有强烈的感情、坚定的原则和正直的人性。即使面对怀疑，INFJ型的人仍相信自己的看法与决定。他们对自己的评价高于其他的一切，包括流行观点和存在的权威，这种内在的观念激发着他们的积极性。通常INFJ型的人具有本能的洞察力，能够看到事物更深层的含义。即使他人无法分享他们的热情，但灵感对于他们重要而令人信服。INFJ型的人忠诚、坚定、富有理想。他们珍视正直，十分坚定以至达到倔强的地步。因为他们的说服能力，以及对于什么对公共利益最有利有清楚的看法，所以INFJ型的人会成为伟大的领导者。由于他们的贡献，他们通常会受到尊重或敬佩。因为珍视友谊和和睦，INFJ型的人喜欢说服别人，使之相信他们的观点是正确的。通过运用嘉许和赞扬，而不是争吵和威胁，他们赢得了他人的合作。他们愿意毫无保留地激励同伴，避免争吵。通常INFJ型的人是深思熟虑的决策者，他们觉得问题使人兴奋，在行动之前他们通常要仔细地考虑。他们喜欢每次全神贯注于一件事情，这会造成一段时期的专心致志。满怀热情与同情心，INFJ型的人强烈地渴望为他人的幸福做贡献。他们注意其他人的情感和利益，能够很好地处理复杂的人。INFJ型的人本身具有深厚复杂的性格，既敏感又热切。他们内向，很难被人了解，但是愿意同自己信任的人分享内在的自我。他们往往有一个交往深厚、持久的小规模的朋友圈，在合适的氛围中能产生充分的个人热情和激情。</p>
<blockquote>
<p>INFJ (Introverted Intuition with Feeling)代表人物：</p>
<p>卡尔·古斯塔夫·荣格 精神病学家</p>
<p>语录：在我们视野所及中，人类存在的唯一目的，是在黑暗中燃起一束光亮。</p>
</blockquote>
<p><strong>您适合的领域有：咨询、教育、科研等领域 文化、艺术、设计等。</strong></p>
<p><strong>您适合的职业有：</strong></p>
<ul>
<li><p>特殊教育教师</p>
</li>
<li><p>建筑设计师</p>
</li>
<li><p>培训经理/培训师</p>
</li>
<li><p>职业指导顾问</p>
</li>
<li><p>心理咨询师</p>
</li>
<li><p>网站编辑</p>
</li>
<li><p>作家</p>
</li>
<li><p>仲裁人</p>
</li>
<li><p>人力资源经理</p>
</li>
<li><p>事业发展顾问</p>
</li>
<li><p>营销人员</p>
</li>
<li><p>企业组织发展顾问</p>
</li>
<li><p>职位分析人员</p>
</li>
<li><p>媒体特约规划师</p>
</li>
<li><p>编辑／艺术指导（杂志）</p>
</li>
<li><p>口译人员</p>
</li>
<li><p>社会科学工作者</p>
</li>
<li><p>心理诊疗师 </p>
</li>
<li><p>大学教师（人文学科、艺术类）</p>
</li>
<li><p>心理学、教育学、社会学、哲学及其它领域的研究人员</p>
</li>
<li><p>作家</p>
</li>
<li><p>诗人</p>
</li>
<li><p>剧作家</p>
</li>
<li><p>电影编剧</p>
</li>
<li><p>电影导演</p>
</li>
<li><p>画家</p>
</li>
<li><p>雕塑家</p>
</li>
<li><p>音乐家</p>
</li>
<li><p>艺术顾问</p>
</li>
<li><p>设计师</p>
</li>
</ul>
<h2 id="气质类型">气质类型</h2><p>根据大卫·凯尔西（David Keirsey）气质与性情理论，你属于“理想主义者”，下面是对“理想主义者”的描述：</p>
<p>“理想主义者”型的人感兴趣的是事物的意义、关系和可能性，并基于其个人的价值观念做出决定。这是一类关心个人成长和如何理解他人与自我的人。</p>
<p>“理想主义者”做人的原则是：“真实地面对自已”，是精神上最具哲理性的人。“理想主义者”乐于接受新的思想，善 于容纳他人。</p>
<p>“理想主义者”好象永远在寻找生存的意义。他们非常崇尚人与人之间和各种关系中的真实和正直，容易将别人理想化。许多“理想 主义者”本能地喜欢帮助别人成长和进步。“理想主义者”是很好的传播者，被人们认为是促进积极变化的催化剂。</p>
<p>他们天生能够理解别人的情感，关心他们在生活、工作中碰到的人们（如同事、病人或客户、雇员）的需要。</p>
<p>对于“理想主义者”型的人而言，一份好的工作应该是对他们个人很有意义的工作，而不是简单的常规工作或只是一种谋生手段。“ 理想主义者”崇尚和谐，不愿意在一种竞争激烈或四分五裂的环境中发展。他们喜欢民主、能够激励各种层次的人们高度参与的组织 。他们会被那些促进人性价值的组织或那些允许他们帮助别人完成工作的职业所吸引。</p>
<p><strong>总体描述：</strong></p>
<ol>
<li>对别人的情绪敏感，能理解、体会别人的心情，善于安慰、鼓励别人</li>
<li>对文字、语言敏感</li>
<li>善于分析、总结</li>
<li>善于从整体上把握事物</li>
<li>能理解复杂的理论概念，善于将事情概念化，善于从中推断出原则 </li>
<li>擅长策略性思维</li>
</ol>
<p><strong>潜在的弱点：</strong> </p>
<ol>
<li>有仅仅凭个人的好恶或价值观来决定事情，并希望别人也以同样的角度或标准来处理问题的倾向。</li>
<li>有时他们心里老想着别人的问题，可能会过于陷于其中，以至于被其困扰。</li>
<li>有时容易将别人或事情理想化，不够实际。</li>
<li>不是特别善于管束和批评他人，尽管常常自我批评。有时会为了和睦而牺牲自己的意见或利益。</li>
<li>有些此类型成员比较容易动感情，情绪波动较大。</li>
</ol>
<h2 id="优势与劣势">优势与劣势</h2><p><strong>INFJ的特质：博爱型——基于博爱的理想，设身处地地关怀他人</strong></p>
<p><strong>优势：</strong></p>
<p>你有计划、有条理，喜欢遵照固有的模式处理问题，乐于探求独特的方式以获得有意义的成长和发展。你通过认同和赞扬与别人进行沟通，具有很强的说服力，你可以成为伟大的领导者。你的贡献被人尊敬和推崇。</p>
<p>你喜欢独处，性格复杂，有深度，是独立的思考者。你忠诚、有责任心，喜欢解决问题，通常在认真思考之后行动。你在同一时间内只专注一件事情。</p>
<p>你有敏锐的洞察力，相信灵感，努力寻求生活的意义和事件的内在联系。你有坚定的原则，就算被别人怀疑，也相信自己的想法和决定，依靠坚韧不拔取得成功。</p>
<p>他人能随时体会到你的善良和体贴，但不太了解你，因为你总是做的含蓄和复杂。事实上你是非常重感情，忠于自我价值观，有强烈的愿望为大家做贡献，有时候你也很紧张和敏感，但表现的深藏不露；你倾向于拥有小范围的而深长久远的友谊。</p>
<p><strong>劣势：</strong></p>
<p>你的完美和固执，使你易走极端。一旦决定后，拒绝改变，并抵制那些与你的价值相冲突的想法，以至于变的没有远见。你专注的追求一个理想，不会听取别人的客观意见，因为自己的地位是不容置疑的。</p>
<p>你总是探寻事情的意义和价值，过于专注各种想法，会显得不切实际，而且经常会忽视一些常规的细节。你需要留意周围的情况，并学会运用已被证实的信息，这样可以帮助你更好的在现实世界中发挥你的创造性思维。</p>
<p>你敏感，非常关注个人的感受和他人的反应，对任何批评都很介意，甚至会视为人身攻击。对你来讲，你需要客观的认识自己和周围的人际关系，更好的促进事情向正面转化。</p>
<hr>
<h1 id="壹心理网测试结果">壹心理网测试结果</h1><p><strong>我的结果 : INFJ</strong></p>
<p><strong>性格特点：</strong></p>
<p>性格内向，很难被人了解，但是愿意同自己信任的人分享内在的自我。往往有一个交往深厚、持久的小规模的朋友圈，在合适的氛围中能产生充分的个人热情和激情。</p>
<p>生活在思想的世界里，灵感对于你来说非常重要。喜欢寻求思想、关系、物质等之间的意义和联系，具有本能的洞察力，能够看到事物更深层的含义。是独立的、有独创性的思想者，即使面对怀疑，仍相信自己的看法与决定。遇到与人和社会准则有关的问题时，会更多的考虑自己内心深处的真实想法。</p>
<p>非常坚持自己的价值观，不太相信那些流行的观点和权威。喜欢说服别人，让他们相信自己的观点是正确的。经常是通过嘉许和赞扬，而不是争吵和威胁，来赢得他人的合作。你是深思熟虑的决策者，觉得问题使人兴奋，在行动之前你通常要反复地考虑。</p>
<p>具有深厚复杂的性格，既敏感又热切，强烈地渴望为他人的幸福做贡献，注意其他人的情感和利益，能够很好地处理复杂的关系。在目标的实现过程中有计划而且果断坚定，喜欢每次全神贯注于一件事情。</p>
<p><strong>适合职业：</strong></p>
<ul>
<li><p>特殊教育教师、培训师、心理咨询师、企业组织发展顾问、大学教师（人文学科、艺术类）</p>
</li>
<li><p>建筑设计师、作家、诗人、剧作家、电影编剧、电影导演、艺术家</p>
</li>
<li><p>网站编辑、作家、营销人员、职位分析人员、编辑／艺术指导（杂志）</p>
</li>
<li><p>社会科学工作者、心理诊疗师、职业指导顾问</p>
</li>
<li><p>心理学、教育学、社会学、哲学及其它领域的研究人员</p>
</li>
</ul>
<p><em>附：壹心理网有1225324人测试过，结果分布如下图：</em></p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/3978cd7993c02a6a0f9d66ad6ae171ab.png" alt=""></p>
<hr>
<h1 id="百度百科里对INFJ型人格的描述">百度百科里对INFJ型人格的描述</h1><ul>
<li><p>因为坚忍、创意及必须达成的意图而能成功；</p>
</li>
<li><p>会在工作中投注最大的努力；</p>
</li>
<li><p>默默强力的、诚挚的及用心的关切他人；</p>
</li>
<li><p>因坚守原则而受敬重；</p>
</li>
<li><p>提出造福大众利益的明确远景而为人所尊敬与追随；</p>
</li>
<li><p>追求创见、关系及物质财物的意义及关联；</p>
</li>
<li><p>想了解什么能激励别人及对他人具洞察力；</p>
</li>
<li><p>光明正大且坚信其价值观；</p>
</li>
<li><p>有组织且果断地履行其愿景。</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="MBTI简介">MBTI简介</h1><p>闲来无事，做了下MBTI测试——国际最为流行的职业人格评估测试。</p>
<p>20世纪40年代，美国一对母女在荣格的心理学类型理论的基础上提出了一套个性测验模型。伊莎贝尔·迈尔斯（Isabel Myers）和凯瑟琳·布里格斯（Katharine Briggs）把这套理论模型以她们的名字命名，叫作Myers-Briggs类型指标<strong>MBTI（Myers-Briggs Type Indicator）</strong>。</p>]]>
    
    </summary>
    
      <category term="心理测试" scheme="http://yoursite.com/tags/%E5%BF%83%E7%90%86%E6%B5%8B%E8%AF%95/"/>
    
      <category term="心理学" scheme="http://yoursite.com/categories/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式学习（九）——职责链模式]]></title>
    <link href="http://yoursite.com/2015/05/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A09%E2%80%94%E2%80%94%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/05/25/设计模式学习9——职责链模式/</id>
    <published>2015-05-25T12:07:52.000Z</published>
    <updated>2015-05-25T15:52:36.000Z</updated>
    <content type="html"><![CDATA[<h1 id="职责链模式定义">职责链模式定义</h1><p><strong>职责链模式（Chain of Responsibility Pattern）</strong>避免请求发送者和接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</p>
<p>在客户端创建好传递链之后，发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织链和分配责任。</p>
<p>值得注意的是，如果建链不当，可能会造成循环调用，将导致系统陷入死循环。</p>
<a id="more"></a>
<hr>
<h1 id="职责链模式结构图">职责链模式结构图</h1><p><img src="http://qiniupicbed.qiniudn.com/upload/ead8f3253cfdaedf937c1776102329bd.png" alt=""></p>
<p>图中：</p>
<ul>
<li><p>Handler表示抽象传递者，它定义了一个处理请求的接口，并且在Handler中定义了后继对象，其后继对象类型为Handler，可以在Handler中编写代码实现后继链的设置；</p>
</li>
<li><p>ConcreteHandler表示具体传递者，处理它所负责的请求，并可以访问链中下一个对象，当有请求发送过来时，如果能够处理该请求就处理它，否则将请求转发给后继者；</p>
</li>
<li><p>Client表示客户类，它向链中的对象提出最初的请求。</p>
</li>
</ul>
<hr>
<h1 id="职责链模式实例——在线文档帮助系统">职责链模式实例——在线文档帮助系统</h1><h2 id="实例说明">实例说明</h2><p>某公司欲开发一个软件系统的在线文档帮助系统，用户可以在任何一个查询环境中输入查询关键字，如果当前查询环境下没有相关内容，则系统会将查询按照一定的顺序转发给其他查询环境。基于上述需求，采用职责链模式对该系统进行设计。</p>
<h2 id="实例类图">实例类图</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/ed6425d39940e7aa0fc37e24b322e595.png" alt=""></p>
<p>实例类图中与职责链模式结构图对应的类主要有：</p>
<ul>
<li><p>SearchContext抽象类充当抽象处理者（抽象传递者）；</p>
</li>
<li><p>JavaSearchContext、SQLSearchContext和UMLSearchContext充当具体处理者（具体传递者）；</p>
</li>
<li><p>Client为客户类。</p>
</li>
</ul>
<h2 id="实例代码">实例代码</h2><p>SearchContext.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象查询请求处理上下文类：抽象传递者</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">SearchContext</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">protected</span> SearchContext successor;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccessor</span><span class="params">(SearchContext successor)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.successor = successor;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">(String keyword)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JavaSearchContext.java:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//具体查询请求处理上下文类：具体传递者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JavaSearchContext</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">SearchContext</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	public void search(<span class="type">String</span> keyword)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//模拟实现</span></span><br><span class="line">		<span class="keyword">if</span>(keyword.contains(<span class="string">"Java"</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">System</span>.out.println(<span class="string">"查询关键字Java！"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			successor.search(keyword);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SQLSearchContext.java:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//具体查询请求处理上下文类：具体传递者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SQLSearchContext</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">SearchContext</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	public void search(<span class="type">String</span> keyword)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//模拟实现</span></span><br><span class="line">		<span class="keyword">if</span>(keyword.contains(<span class="string">"SQL"</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">System</span>.out.println(<span class="string">"查询关键字SQL！"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			successor.search(keyword);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>UMLSearchContext.java:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//具体查询请求处理上下文类：具体传递者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UMLSearchContext</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">SearchContext</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	public void search(<span class="type">String</span> keyword)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//模拟实现</span></span><br><span class="line">		<span class="keyword">if</span>(keyword.contains(<span class="string">"UML"</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">System</span>.out.println(<span class="string">"查询关键字UML！"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			successor.search(keyword);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Client.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端测试类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		SearchContext jContext,sContext,uContext;</span><br><span class="line">		jContext = <span class="keyword">new</span> JavaSearchContext();</span><br><span class="line">		sContext = <span class="keyword">new</span> SQLSearchContext();</span><br><span class="line">		uContext = <span class="keyword">new</span> UMLSearchContext();</span><br><span class="line">		jContext.setSuccessor(sContext);</span><br><span class="line">		sContext.setSuccessor(uContext);</span><br><span class="line">		String keyword = <span class="string">"UML类图绘制疑惑"</span>;</span><br><span class="line">		jContext.search(keyword);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果">运行结果</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/956f12670b1fcd9b512923e16414a1c6.png" alt=""></p>
<h2 id="附加描述">附加描述</h2><p>在本实例中，客户端测试类创建了职责链，当向jContext对象传递查询关键字“UML类图绘制疑惑”时，jContext首先处理该关键字，如果不能处理则转发请求给它的后继者，直到链上某一个对象能够处理该关键字请求，对于该关键字，请求转发顺序为jContext-&gt;sContext-&gt;uContext，最后由uContext对象处理该请求。职责链由客户端创建，因此请求的传递顺序也由客户端来确定。</p>
<hr>
<h1 id="后话">后话</h1><p>职责链模式就好像流水线加工一样，对于一个客户请求，在线上不断传递下去，看线上哪个工人能处理好这个请求。</p>
<p>这个模式的实例代码很精辟，看完之后，捋顺了代码流程，不禁赞叹！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="职责链模式定义">职责链模式定义</h1><p><strong>职责链模式（Chain of Responsibility Pattern）</strong>避免请求发送者和接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</p>
<p>在客户端创建好传递链之后，发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织链和分配责任。</p>
<p>值得注意的是，如果建链不当，可能会造成循环调用，将导致系统陷入死循环。</p>]]>
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式学习（八）——代理模式]]></title>
    <link href="http://yoursite.com/2015/05/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A08%E2%80%94%E2%80%94%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/05/25/设计模式学习8——代理模式/</id>
    <published>2015-05-25T11:07:41.000Z</published>
    <updated>2015-05-25T15:21:37.000Z</updated>
    <content type="html"><![CDATA[<h1 id="代理模式定义">代理模式定义</h1><p><strong>代理模式（Proxy Pattern）</strong>为另一个对象提供一个替身或占位符以控制对这个对象的访问。</p>
<p>在一些情况下，客户端不想或不能够直接引用一个对象，而代理对象可以在客户端和目标对象之间起到中介作用，去掉客户不能看到的内容和服务或者增添客户需要的额外服务。</p>
<a id="more"></a>
<p>最常见的代理模式有以下三种：</p>
<ul>
<li><p><strong>远程代理</strong>：为一个位于不同的地址空间的对象提供一个本地的代理对象，这个不同的地址空间可以在同一台主机中，也可以在另一台主机中。远程代理又称为<strong>大使（Ambassador）</strong>。</p>
</li>
<li><p><strong>虚拟代理</strong>：如果需要创建一个资源消耗较大的对象，先创建一个消耗相对较小的对象，真实对象只在需要时才会被真正创建。</p>
</li>
<li><p><strong>保护代理</strong>：控制对一个对象的访问，可以给不同的用户提供不同级别的使用权限。</p>
</li>
</ul>
<p>代理模式能够协调调用者和被调用者，能够在一定程度上降低系统的耦合度。</p>
<hr>
<h1 id="代理模式结构图">代理模式结构图</h1><p><img src="http://qiniupicbed.qiniudn.com/upload/88ca7d8563cd41dadd7f84a8ae6cd0ce.png" alt=""></p>
<p>图中：</p>
<ul>
<li><p>Subject表示抽象主题角色，它声明了真实主题和代理主题的共同接口，这样一来在任何使用真实主题的地方都可以使用代理主题；</p>
</li>
<li><p>Proxy表示代理主题角色，代理主题角色内部含有对真实主题的引用，从而可以再任何时候操作真是主题对象，它可以控制真实主题的应用；</p>
</li>
<li><p>RealSubject表示真实主题角色，它定义了代理角色所代表的真实对象。</p>
</li>
</ul>
<hr>
<h1 id="代理模式实例——日志记录代理">代理模式实例——日志记录代理</h1><h2 id="实例说明">实例说明</h2><p>在某应用软件中需要记录业务方法的调用日志，在不修改现有业务类的基础上为每一个类提供一个日志记录代理类，在代理类中输出日志，如在业务方法method()调用之前输出“方法method()被调用，调用时间为2010-10-10 10:10:10”，调用之后如果没有抛异常则输出“方法method()调用成功”，否则输出“方法method()调用失败”。在代理类中调用真实业务类的业务方法，使用代理模式设计该日志记录模块的结构，绘制类图并编程模拟实现。</p>
<h2 id="实例类图">实例类图</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/1cc3c0eab760445516b0637bd40c0324.png" alt=""></p>
<p>实例类图中与代理模式结构图对应的类主要有：</p>
<ul>
<li><p>AbstractLog接口充当抽象主题；</p>
</li>
<li><p>LoggerProxy类充当代理主题；</p>
</li>
<li><p>BusinessClass类充当真实主题。</p>
</li>
</ul>
<h2 id="实例代码">实例代码</h2><p>AbstractLog.java:</p>
<figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line">//抽象日志记录类：抽象主题</span><br><span class="line"><span class="keyword">interface</span> <span class="type">AbstractLog</span></span><br><span class="line">&#123;</span><br><span class="line">	public <span class="type">void</span> <span class="keyword">method</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>LoggerProxy.java:</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//日志记录代理类：代理主题</span></span><br><span class="line">class LoggerProxy implements AbstractLog</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> BusinessClass business;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> LoggerProxy()</span><br><span class="line">	&#123;</span><br><span class="line">		business = <span class="keyword">new</span> BusinessClass();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> method()</span><br><span class="line">	&#123;</span><br><span class="line">		Calendar calendar = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">		<span class="built_in">int</span> <span class="built_in">year</span> = calendar.<span class="built_in">get</span>(Calendar.YEAR);</span><br><span class="line">		<span class="built_in">int</span> <span class="built_in">month</span> = calendar.<span class="built_in">get</span>(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">int</span> <span class="built_in">day</span> = calendar.<span class="built_in">get</span>(Calendar.DAY_OF_MONTH);</span><br><span class="line">		<span class="built_in">int</span> <span class="built_in">hour</span> = calendar.<span class="built_in">get</span>(Calendar.HOUR) + <span class="number">12</span>;</span><br><span class="line">		<span class="built_in">int</span> <span class="built_in">minute</span> = calendar.<span class="built_in">get</span>(Calendar.MINUTE);</span><br><span class="line">		<span class="built_in">int</span> <span class="built_in">second</span> = calendar.<span class="built_in">get</span>(Calendar.SECOND);</span><br><span class="line">		<span class="keyword">String</span> dateTime = <span class="built_in">year</span> + <span class="string">"-"</span> + <span class="built_in">month</span> + <span class="string">"-"</span> + <span class="built_in">day</span> + <span class="string">" "</span> + <span class="built_in">hour</span> + <span class="string">":"</span> + <span class="built_in">minute</span> + <span class="string">":"</span> + <span class="built_in">second</span> + <span class="string">"！"</span>;</span><br><span class="line">		System.out.<span class="built_in">println</span>(<span class="string">"方法method()被调用，调用时间为"</span> + dateTime);</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			business.method();</span><br><span class="line">			System.out.<span class="built_in">println</span>(<span class="string">"方法method()调用成功！"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(Exception e)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.<span class="built_in">println</span>(<span class="string">"方法method()调用失败！"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>BusinessClass.java:</p>
<figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line">//业务类：真实主题</span><br><span class="line">class <span class="type">BusinessClass</span> implements <span class="type">AbstractLog</span></span><br><span class="line">&#123;</span><br><span class="line">	public <span class="type">void</span> <span class="keyword">method</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">System</span>.<span class="keyword">out</span>.println(<span class="string">"真实业务方法！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Client.java:</p>
<figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line">//客户端测试类</span><br><span class="line">class <span class="type">Client</span></span><br><span class="line">&#123;</span><br><span class="line">	public <span class="keyword">static</span> <span class="type">void</span> main(<span class="type">String</span> args[])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">AbstractLog</span> al;</span><br><span class="line">		al = new <span class="type">LoggerProxy</span>();</span><br><span class="line">		al.<span class="keyword">method</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果">运行结果</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/6cd89cfc629bf529643749cedc8a1817.png" alt=""></p>
<h2 id="附加描述">附加描述</h2><p>在本实例中，通过代理类LoggerProxy来间接调用真实业务类BusinessClass的方法，可以在调用真实业务方法时增加新功能（如日志记录），此处使用的是代理模式的一种较为简单的形式，类似于保护代理，在实施真实调用时可以执行一些额外的操作。由于代理主题和真实主题实现了相同的接口，因此在客户端可以针对抽象编程，而将具体代理类类名存储至配置文件中，增加和更换代理类和真实类都很方便，无需修改源代码，满足开闭原则。</p>
<hr>
<h1 id="后话">后话</h1><p>之前对代理一知半解，这次趁着学习代理模式也对代理更有所认知了。</p>
<p>代理的英文有好多个，agent、proxy、stub和surrogate是比较常见到的几个英文。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="代理模式定义">代理模式定义</h1><p><strong>代理模式（Proxy Pattern）</strong>为另一个对象提供一个替身或占位符以控制对这个对象的访问。</p>
<p>在一些情况下，客户端不想或不能够直接引用一个对象，而代理对象可以在客户端和目标对象之间起到中介作用，去掉客户不能看到的内容和服务或者增添客户需要的额外服务。</p>]]>
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式学习（七）——外观模式]]></title>
    <link href="http://yoursite.com/2015/05/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A07%E2%80%94%E2%80%94%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/05/25/设计模式学习7——外观模式/</id>
    <published>2015-05-25T10:07:31.000Z</published>
    <updated>2015-05-25T14:48:56.000Z</updated>
    <content type="html"><![CDATA[<h1 id="外观模式定义">外观模式定义</h1><p><strong>外观模式（Facade Pattern）</strong>提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用。</p>
<p>外观模式允许我们让客户和子系统之间避免紧耦合，它遵守<strong>“最少知识”原则</strong>。这个原则希望我们在设计中，不要让太多的类耦合在一起，免得修改系统中一部分，会影响到其他部分。如果许多类之间相互依赖，那么这个系统就会变成一个易碎的系统，它需要花许多成本维护，也会因为太复杂而不容易被其他人了解。</p>
<p>外观模式对客户屏蔽子系统组件，减少了客户处理的对象数目，使得子系统使用起来更加容易。</p>
<a id="more"></a>
<hr>
<h1 id="外观模式结构图">外观模式结构图</h1><p><img src="http://qiniupicbed.qiniudn.com/upload/477ecc9f62bddfee706f34d8f1cc156a.png" alt=""></p>
<p>图中：</p>
<ul>
<li><p>Facade表示外观角色，客户端可以调用这个方法，此角色知道相关的（一个或多个）子系统的功能和责任，在正常情况下，将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；</p>
</li>
<li><p>Subsystem表示子系统角色，一个系统可以同时有一个或多个子系统，每一个子系统都不是一个单独的类，而是一个类的集合，它实现子系统的功能，每一个子系统都可以被客户端直接调用，或者被外观角色调用，它处理由外观类传过来的任务，子系统并不知道外观的存在，对于子系统而言，外观仅仅是另外一个客户端而已。</p>
</li>
</ul>
<hr>
<h1 id="外观模式实例——文件加密">外观模式实例——文件加密</h1><h2 id="实例说明">实例说明</h2><p>某系统需要提供一个文件加密模块，加密流程包括三个操作，分别是读取源文件、加密、保存加密之后的文件。读取文件和保存文件使用流来实现，这三个操作相对独立，其业务代码封装在三个不同的类中。现在需要提供一个统一的加密外观类，用户可以直接使用该加密外观类完成文件的读取、加密和保存三个操作，而不需要与每一个类进行交互，使用外观模式设计该加密模块，要求编程模拟实现。</p>
<h2 id="实例类图">实例类图</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/81555404163c6cba1afb86018dfe4971.png" alt=""></p>
<p>实例类图中与外观模式结构图对应的类主要有：</p>
<ul>
<li><p>EncryptFacade充当外观类；</p>
</li>
<li><p>FileReader、CipherMachine和FileWriter充当子系统类。</p>
</li>
</ul>
<h2 id="实例代码">实例代码</h2><p>EncryptFacade.java:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加密外观类：外观类</span></span><br><span class="line"><span class="keyword">class</span> EncryptFacade</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> FileReader reader;</span><br><span class="line">	<span class="keyword">private</span> CipherMachine cipher;</span><br><span class="line">	<span class="keyword">private</span> FileWriter writer;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> EncryptFacade()</span><br><span class="line">	&#123;</span><br><span class="line">		reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">		cipher = <span class="keyword">new</span> CipherMachine();</span><br><span class="line">		writer = <span class="keyword">new</span> FileWriter();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">void</span> fileEncrypt(<span class="built_in">String</span> fileNameSrc, <span class="built_in">String</span> fileNameDes)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">String</span> plainStr = reader.read(fileNameSrc);</span><br><span class="line">		<span class="built_in">String</span> encryptStr = cipher.encrypt(plainStr);</span><br><span class="line">		writer.write(encryptStr,fileNameDes);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>FileReader.java:</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件读取类：子系统类</span></span><br><span class="line"><span class="keyword">class</span> FileReader</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> String <span class="keyword">read</span>(String fileNameSrc)</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.<span class="keyword">println</span>(<span class="string">"读取文件，获取明文。"</span>);</span><br><span class="line">		StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			FileInputStream inFS=<span class="keyword">new</span> FileInputStream(fileNameSrc);		</span><br><span class="line">			<span class="keyword">int</span> data;</span><br><span class="line">    		<span class="keyword">while</span>((data=inFS.<span class="keyword">read</span>())!=-<span class="number">1</span>)</span><br><span class="line">    		&#123;</span><br><span class="line">    			sb = sb.<span class="keyword">append</span>((<span class="keyword">char</span>)data);</span><br><span class="line">    		&#125;</span><br><span class="line">     		inFS.close();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(FileNotFoundException e)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.<span class="keyword">println</span>(<span class="string">"文件不存在！"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(IOException e)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.<span class="keyword">println</span>(<span class="string">"文件操作错误！"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> sb.toString();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CipherMachine.java:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数据加密类：子系统类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CipherMachine</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	public <span class="built_in">String</span> encrypt(<span class="built_in">String</span> plainText)</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(<span class="string">"数据加密，将明文转换为密文。"</span>);</span><br><span class="line">		<span class="built_in">String</span> es=<span class="string">""</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;plainText.length();i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">String</span> c=<span class="built_in">String</span>.valueOf(plainText.charAt(i)%<span class="number">7</span>);</span><br><span class="line">			es+=c;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> es;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>FileWriter.java:</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件保存类：子系统类</span></span><br><span class="line"><span class="keyword">class</span> FileWriter</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">write</span>(String encryptStr,String fileNameDes)</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.<span class="keyword">println</span>(<span class="string">"保存密文，写入文件。"</span>);</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">     		FileOutputStream outFS = <span class="keyword">new</span> FileOutputStream(fileNameDes);</span><br><span class="line">      		outFS.<span class="keyword">write</span>(encryptStr.getBytes());</span><br><span class="line">      		outFS.close();</span><br><span class="line">		&#125;	</span><br><span class="line">		<span class="keyword">catch</span>(FileNotFoundException e)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.<span class="keyword">println</span>(<span class="string">"文件不存在！"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(IOException e)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.<span class="keyword">println</span>(<span class="string">"文件操作错误！"</span>);</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Client.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端测试类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		EncryptFacade ef = <span class="keyword">new</span> EncryptFacade();</span><br><span class="line">		ef.fileEncrypt(<span class="string">"src/src.txt"</span>,<span class="string">"src/des.txt"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果">运行结果</h2><p>Console输出：<br><img src="http://qiniupicbed.qiniudn.com/upload/15b9318ec3baedd094fb09409fba19ba.png" alt=""></p>
<p>src.txt和des.txt文件中的内容为：<br><img src="http://qiniupicbed.qiniudn.com/upload/4e26aa425ca0f4238b3c18a0dd62ab73.png" alt=""></p>
<h2 id="附加描述">附加描述</h2><p>在本实例中，对src文件夹下的文件src.txt中的数据进行加密，该文件的内容为“Hello world!”，加密之后将密文保存到src文件夹下的另一个文件des.txt中，程序运行后保存在文件中的密文为“233364062325”。在加密类CipherMachine中，采用求模运算对明文进行加密，将明文中的每一个字符除以一个整数（本例中为7，可以由用户自行设置）后取余数作为密文。</p>
<hr>
<h1 id="后话">后话</h1><p>Facade模式的思想简单，但是用处甚广。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="外观模式定义">外观模式定义</h1><p><strong>外观模式（Facade Pattern）</strong>提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用。</p>
<p>外观模式允许我们让客户和子系统之间避免紧耦合，它遵守<strong>“最少知识”原则</strong>。这个原则希望我们在设计中，不要让太多的类耦合在一起，免得修改系统中一部分，会影响到其他部分。如果许多类之间相互依赖，那么这个系统就会变成一个易碎的系统，它需要花许多成本维护，也会因为太复杂而不容易被其他人了解。</p>
<p>外观模式对客户屏蔽子系统组件，减少了客户处理的对象数目，使得子系统使用起来更加容易。</p>]]>
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式学习（六）——组合模式]]></title>
    <link href="http://yoursite.com/2015/05/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A06%E2%80%94%E2%80%94%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/05/25/设计模式学习6——组合模式/</id>
    <published>2015-05-25T09:07:22.000Z</published>
    <updated>2015-05-25T09:48:09.000Z</updated>
    <content type="html"><![CDATA[<h1 id="组合模式定义">组合模式定义</h1><p><strong>组合模式（Composite Pattern）</strong>通过组合多个对象形成树型结构，以表示“整体-部分”的结构层次。组合模型对单个对象（即叶子对象）和组合对象（即容器对象）的使用具有一致性。换句话说，在大多数情况下，我们可以忽略对象组合和个别对象之间的差别。</p>
<p>组合结构内的任意对象称为<strong>组件</strong>，组件可以是组合，也可以是叶子节点。</p>
<a id="more"></a>
<p>在使用组合模式时，通常要在透明性和安全性之间折衷。</p>
<hr>
<h1 id="组合模式结构图">组合模式结构图</h1><p><img src="http://qiniupicbed.qiniudn.com/upload/32fa9192443db3a5d567d9618ba1152c.png" alt=""></p>
<p>图中：</p>
<ul>
<li><p>Component表示抽象构件，它可以是接口或抽象类，为叶子构件和容器构件对象声明接口，在该角色中可以包含所有子类共有行为的声明和实现，在抽象构件中还定义了访问及管理子构件的方法，如增加子构件、删除子构件、获取子构件等；</p>
</li>
<li><p>Leaf表示叶子构件，在组合中表示叶子节点对象，它没有子节点，它实现抽象构件接口声明的基本行为；</p>
</li>
<li><p>Composite表示容器构件，它定义包含子节点（可以是叶子节点或容器节点）的构件的行为，并存储子节点（叶子节点或容器节点），它实现抽象构件接口中定义的操作叶子构件的行为；</p>
</li>
<li><p>Client表示客户类，它通过Component接口控制组合构件中的对象。</p>
</li>
</ul>
<hr>
<h1 id="组合模式实例——杀毒软件">组合模式实例——杀毒软件</h1><h2 id="实例说明">实例说明</h2><p>使用组合模式设计一个杀毒软件（AntiVirus）的框架，该软件既可以对某个文件夹（Folder）杀毒，也可以对某个指定的文件（File）进行杀毒，文件种类包括文本文件TextFile、图片文件ImageFile、视频文件VideoFile。绘制类图并编程模拟实现。</p>
<h2 id="实例类图">实例类图</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/deb92145c3fb0fc430aa2fd2da93fdb2.png" alt=""></p>
<p>实例类图中与组合模式结构图对应的类主要有：</p>
<ul>
<li><p>AbstractFile充当抽象构件类；</p>
</li>
<li><p>TextFile、ImageFile和VideoFile充当叶子构件类；</p>
</li>
<li><p>Folder充当容器构件类。</p>
</li>
</ul>
<h2 id="实例代码">实例代码</h2><p>AbstractFile.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象文件类：抽象构件</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AbstractFile</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(AbstractFile element)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(AbstractFile element)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>TextFile.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文本文件类：叶子构件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">TextFile</span> <span class="title">extends</span> <span class="title">AbstractFile</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> String fileName;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TextFile</span><span class="params">(String fileName)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.fileName=fileName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(AbstractFile element)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">	   System.<span class="keyword">out</span>.println(<span class="string">"对不起，不支持该方法！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(AbstractFile element)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"对不起，不支持该方法！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"浏览文本文件："</span> + fileName);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ImageFile.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图片文件类：叶子构件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">ImageFile</span> <span class="title">extends</span> <span class="title">AbstractFile</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> String fileName;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ImageFile</span><span class="params">(String fileName)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.fileName=fileName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(AbstractFile element)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">	   System.<span class="keyword">out</span>.println(<span class="string">"对不起，不支持该方法！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(AbstractFile element)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"对不起，不支持该方法！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"浏览图片文件："</span> + fileName);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>VideoFile.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//视频文件类：叶子构件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">VideoFile</span> <span class="title">extends</span> <span class="title">AbstractFile</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> String fileName;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">VideoFile</span><span class="params">(String fileName)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.fileName=fileName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(AbstractFile element)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">	   System.<span class="keyword">out</span>.println(<span class="string">"对不起，不支持该方法！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(AbstractFile element)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"对不起，不支持该方法！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"浏览视频文件："</span> + fileName);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Folder.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件夹类：容器构件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Folder</span> <span class="keyword">extends</span> <span class="title">AbstractFile</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> ArrayList fileList=<span class="keyword">new</span> ArrayList();</span><br><span class="line">	<span class="keyword">private</span> String fileName;	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Folder</span><span class="params">(String fileName)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.fileName=fileName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(AbstractFile element)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">	   fileList.add(element);	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(AbstractFile element)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		fileList.remove(element);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"文件夹 - "</span> + fileName + <span class="string">" - 包含如下资料："</span>);</span><br><span class="line">		<span class="keyword">for</span>(Object obj : fileList)</span><br><span class="line">		&#123;</span><br><span class="line">			((AbstractFile)obj).display();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Client.java:</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端测试类</span></span><br><span class="line">class Client</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span> args[])</span><br><span class="line">	&#123;</span><br><span class="line">		AbstractFile file1,file2,file3,file4,file5,folder1,folder2,folder3;</span><br><span class="line">		file1 = <span class="keyword">new</span> ImageFile(<span class="string">"房子.gif"</span>);</span><br><span class="line">		file2 = <span class="keyword">new</span> ImageFile(<span class="string">"美女.jpg"</span>);</span><br><span class="line">		file3 = <span class="keyword">new</span> TextFile(<span class="string">"设计模式.txt"</span>);</span><br><span class="line">		file4 = <span class="keyword">new</span> TextFile(<span class="string">"Java程序设计.doc"</span>);</span><br><span class="line">		file5 = <span class="keyword">new</span> VideoFile(<span class="string">"非诚勿扰.rmvb"</span>);</span><br><span class="line">		folder1 = <span class="keyword">new</span> Folder(<span class="string">"最新图片"</span>);</span><br><span class="line">		folder1.<span class="built_in">add</span>(file1);</span><br><span class="line">		folder1.<span class="built_in">add</span>(file2);</span><br><span class="line">		folder2 = <span class="keyword">new</span> Folder(<span class="string">"学习资料"</span>);</span><br><span class="line">		folder2.<span class="built_in">add</span>(file3);</span><br><span class="line">		folder2.<span class="built_in">add</span>(file4);</span><br><span class="line">		folder3 = <span class="keyword">new</span> Folder(<span class="string">"个人资料"</span>);</span><br><span class="line">		folder3.<span class="built_in">add</span>(file5);</span><br><span class="line">		folder3.<span class="built_in">add</span>(folder1);</span><br><span class="line">		folder3.<span class="built_in">add</span>(folder2);	</span><br><span class="line">		folder3.display();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果">运行结果</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/ef37e617d7acee6a772468862802500c.png" alt=""></p>
<h2 id="附加描述">附加描述</h2><p>本实例使用了透明组合模式，在抽象构件类中定义了所有方法，包括用于管理子构件的方法，如add()方法和remove()方法，因此在TextFile等叶子构件类中实现这些方法时必须进行相应的异常处理或错误提示。在容器构件Folder的display()方法中递归调用其成员对象的display()方法，从而实现对整个树型结构的遍历。</p>
<hr>
<h1 id="后话">后话</h1><p>组合模式的思想就是利用树型结构来管理构件，和我们熟悉的文件夹下面有文件夹或文件的存储方式一致，理解起来也不困难。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="组合模式定义">组合模式定义</h1><p><strong>组合模式（Composite Pattern）</strong>通过组合多个对象形成树型结构，以表示“整体-部分”的结构层次。组合模型对单个对象（即叶子对象）和组合对象（即容器对象）的使用具有一致性。换句话说，在大多数情况下，我们可以忽略对象组合和个别对象之间的差别。</p>
<p>组合结构内的任意对象称为<strong>组件</strong>，组件可以是组合，也可以是叶子节点。</p>]]>
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式学习（五）——备忘录模式]]></title>
    <link href="http://yoursite.com/2015/05/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A05%E2%80%94%E2%80%94%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/05/25/设计模式学习5——备忘录模式/</id>
    <published>2015-05-25T08:07:05.000Z</published>
    <updated>2015-05-25T09:04:31.000Z</updated>
    <content type="html"><![CDATA[<h1 id="备忘录模式定义">备忘录模式定义</h1><p><strong>备忘录模式（Memento Pattern）</strong>确保在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。</p>
<p>备忘录模式有两个目标：</p>
<ul>
<li><p>储存系统关键对象的重要状态；</p>
</li>
<li><p>维护关键对象的封装。</p>
</li>
</ul>
<a id="more"></a>
<p>单一职责原则告诉我们，设计时不要把保持状态的工作和关键对象混在一起。这个专门掌握状态的对象，就称为备忘录。</p>
<p>备忘录模式提供了一种状态恢复的实现机制，使得用户可以方便地回到一个特定的历史步骤，当新的状态无效或者存在问题时，可以使用存储起来的备忘录将状态复原，当前很多软件都提供了Undo（撤销）操作功能，就使用了备忘录模式。</p>
<hr>
<h1 id="备忘录模式结构图">备忘录模式结构图</h1><p><img src="http://qiniupicbed.qiniudn.com/upload/d49f44f1e7b65f79511d397a2da301d9.png" alt=""></p>
<p>图中：</p>
<ul>
<li><p>Originator表示原发器，它创建备忘录并存储其当前内部状态，还可使用备忘录来恢复内部状态；</p>
</li>
<li><p>Memento表示备忘录，它存储原发器的内部状态，并根据原发器来决定保存哪些内部状态，同时它还通过一些机制来防止原发器以外的其他对象访问备忘录，理想情况是只允许原发器访问本备忘录的内部状态；</p>
</li>
<li><p>Caretaker表示负责人，它负责保存好备忘录，但不能对备忘录的内容进行操作或检查。</p>
</li>
</ul>
<hr>
<h1 id="备忘录模式实例——游戏恢复点设置">备忘录模式实例——游戏恢复点设置</h1><h2 id="实例说明">实例说明</h2><p>某模拟战争游戏为了给玩家提供更好的用户体验，在游戏过程中可以设置一个恢复点，记录当前游戏场景，如果在后续游戏中玩家角色“不幸牺牲”，可以返回到先前场景，从所设恢复点开始重新游戏。现使用备忘录模式设计该功能，绘制类图并编程实现。</p>
<h2 id="实例类图">实例类图</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/a02a058eddc8416f6d1519674990ebd7.png" alt=""></p>
<p>实例类图中与备忘录模式结构图对应的类主要有：</p>
<ul>
<li><p>GameScene充当原发器角色，它是待保存历史状态的类；</p>
</li>
<li><p>SceneMemento充当备忘录角色，它存储了GameScene的历史状态；</p>
</li>
<li><p>Caretaker充当负责人角色，它用于管理备忘录。</p>
</li>
</ul>
<h2 id="实例代码">实例代码</h2><p>GameScene.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">package memo;</span><br><span class="line"></span><br><span class="line"><span class="comment">//游戏场景类：原发器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GameScene</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> String scene;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> lifeValue;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScene</span><span class="params">(String scene)</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.scene = scene; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLifeValue</span><span class="params">(<span class="keyword">int</span> lifeValue)</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.lifeValue = lifeValue; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getScene</span><span class="params">()</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>.scene); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLifeValue</span><span class="params">()</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>.lifeValue); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restore</span><span class="params">(SceneMemento m)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.scene = m.getScene();</span><br><span class="line">		<span class="keyword">this</span>.lifeValue = m.getLifeValue();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> SceneMemento <span class="title">save</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SceneMemento(<span class="keyword">this</span>.scene,<span class="keyword">this</span>.lifeValue);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.print(<span class="string">"当前游戏场景为："</span> + <span class="keyword">this</span>.scene + <span class="string">"，"</span>);</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"您还有"</span> + <span class="keyword">this</span>.lifeValue + <span class="string">"条命！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SceneMemento.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> memo;</span><br><span class="line"></span><br><span class="line"><span class="comment">//场景备忘录：备忘录</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SceneMemento</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String scene;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> lifeValue;</span><br><span class="line">	SceneMemento(String scene,<span class="keyword">int</span> lifeValue)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>.scene = scene;</span><br><span class="line">		<span class="keyword">this</span>.lifeValue = lifeValue;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setScene</span><span class="params">(String scene)</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.scene = scene; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setLifeValue</span><span class="params">(<span class="keyword">int</span> lifeValue)</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.lifeValue = lifeValue; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">String <span class="title">getScene</span><span class="params">()</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>.scene); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getLifeValue</span><span class="params">()</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>.lifeValue); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Caretaker.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> user;</span><br><span class="line"><span class="keyword">import</span> memo.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//负责人</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> SceneMemento memento;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> SceneMemento <span class="title">getSceneMemento</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.memento;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSceneMemento</span><span class="params">(SceneMemento memento)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.memento = memento;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Client.java:</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">package user;</span><br><span class="line">import memo.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端测试类</span></span><br><span class="line"><span class="keyword">class</span> Client</span><br><span class="line">&#123;</span><br><span class="line">	public static void main(String <span class="keyword">args</span>[])</span><br><span class="line">	&#123;</span><br><span class="line">		GameScene scene = new GameScene();</span><br><span class="line">		Caretaker <span class="keyword">ct</span> = new Caretaker();</span><br><span class="line">		scene.setScene(<span class="string">"无名湖"</span>);</span><br><span class="line">		scene.setLifeValue(3);</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"原始状态："</span>);</span><br><span class="line">		scene.<span class="keyword">display</span>();</span><br><span class="line">		<span class="keyword">ct</span>.setSceneMemento(scene.<span class="keyword">save</span>());</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"--------------------------------"</span>);</span><br><span class="line">		</span><br><span class="line">		scene.setScene(<span class="string">"魔鬼洞"</span>);</span><br><span class="line">		scene.setLifeValue(0);</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"牺牲状态："</span>);</span><br><span class="line">		scene.<span class="keyword">display</span>();</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"--------------------------------"</span>);</span><br><span class="line">		</span><br><span class="line">		scene.<span class="keyword">restore</span>(<span class="keyword">ct</span>.getSceneMemento());</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"恢复到原始状态："</span>);</span><br><span class="line">		scene.<span class="keyword">display</span>();</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"--------------------------------"</span>);		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果">运行结果</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/641404e3e75b04ce6d11bf673bfd9e21.png" alt=""></p>
<h2 id="附加描述">附加描述</h2><p>在本实例中，原发器GameScene在调用save()方法后将产生一个备忘录对象，该备忘录对象将保存在Caretaker中，原发器需要恢复状态时再将其从Caretaker中取出，可以通过调用restore()方法来获取存储在备忘录中的状态信息。</p>
<p>在真实开发中，除了原发器可以创建备忘录并给备忘录赋值外，其他对象不应该直接调用备忘录中的方法，也不能创建备忘录。在Java语言中，通常将Memento类与Originator类定义在同一个package包中来实现封装，可使用默认访问标识符来定义Memento类，使其包内可见，只有Originator类可以对它进行访问，限制其他类对Memento的访问。</p>
<hr>
<h1 id="后话">后话</h1><p>以前老是不知道public、protected、private和包到底有什么用，通过备忘录模式的学习，对此有了一些理解。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="备忘录模式定义">备忘录模式定义</h1><p><strong>备忘录模式（Memento Pattern）</strong>确保在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。</p>
<p>备忘录模式有两个目标：</p>
<ul>
<li><p>储存系统关键对象的重要状态；</p>
</li>
<li><p>维护关键对象的封装。</p>
</li>
</ul>]]>
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式学习（四）——解释器模式]]></title>
    <link href="http://yoursite.com/2015/05/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A04%E2%80%94%E2%80%94%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/05/25/设计模式学习4——解释器模式/</id>
    <published>2015-05-25T06:06:46.000Z</published>
    <updated>2015-05-25T08:04:23.000Z</updated>
    <content type="html"><![CDATA[<h1 id="解释器模式定义">解释器模式定义</h1><p><strong>解释器模式（Interpreter Pattern）</strong>描述了如何为语言定义一个文法，如何在该语言中表示一个句子，以及如何解释这些句子。这里的语言意思是使用规定格式和语法的代码。</p>
<p>简单说来，解释器模式用来为语言创建解释器。</p>
<a id="more"></a>
<p>如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子，这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题，而且当文法简单、效率不是关键问题的时候效果最好。</p>
<p>解释器模式将一个语法规则表示成一个类，便于实现。而且，因为语法由许多类表示，所以我们可以轻易地改变和扩展此语言。</p>
<hr>
<h1 id="解释器模式结构图">解释器模式结构图</h1><p><img src="http://qiniupicbed.qiniudn.com/upload/50604a3a78b166a7b7e375a9aaa6574f.png" alt=""></p>
<p>图中：</p>
<ul>
<li><p>AbstractExpression表示抽象表达式，它声明一个抽象的解释操作，该接口为抽象语法树上所有的节点所共享；</p>
</li>
<li><p>TerminalExpression表示终结符表达式，它实现与文法中的终结符相关联的解释操作，语言中每一个句子的每个终结符都属于该类的一个实例；</p>
</li>
<li><p>NonterminalExpression表示非终结符表达式，它实现了文法中的非终结符的解释操作，在解释过程中一般需要应用递归的方式对句子进行处理；</p>
</li>
<li><p>Context表示上下文（环境），它包含了解释器之外一些其他的全局信息；</p>
</li>
<li><p>Client表示客户端，它用于构建表示该文法定义的语言中的一个特定的句子的抽象语法树，该语法树由终结符表达式（叶子节点）和非终结符表达式（中间节点）组成，并且Client负责调用解释操作。</p>
</li>
</ul>
<hr>
<h1 id="解释器模式实例——机器人控制程序">解释器模式实例——机器人控制程序</h1><h2 id="实例说明">实例说明</h2><p>某机器人控制程序包含一些简单的英文指令，其文法规则如下：</p>
<p>expression : : = direction action distance | composite</p>
<p>composite : : = expression ‘and’ expression</p>
<p>direction : : = ‘up’ | ‘down’ | ‘left’ | ‘right’</p>
<p>action : : = ‘move’ | ‘run’</p>
<p>distance : : = an integer //一个整数值</p>
<p>如输入：up move 5，则输出“向上移动5个单位”；输入：down run 10 and left move 20，则输出“向下快速移动10个单位再向左移动20个单位”。</p>
<p>现使用解释器模式来设计该程序并模拟实现。</p>
<h2 id="实例类图">实例类图</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/bd754e3904335e3f9973218f08f1878e.png" alt=""></p>
<p>实例类图中与解释器模式结构图对应的类主要有：</p>
<ul>
<li><p>AbstractNode充当抽象表达式角色；</p>
</li>
<li><p>DirectionNode、ActionNode和DistanceNode充当终结符表达式角色；</p>
</li>
<li><p>AndNode和SentenceNode充当非终结符表达式角色；</p>
</li>
<li><p><em>InstructionHandler为指令处理类，充当工具类角色。</em></p>
</li>
</ul>
<h2 id="实例代码">实例代码</h2><p>AbstractNode.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象表达式</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AbstractNode</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">interpret</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>DirectionNode.java:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方向解释：终结符表达式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DirectionNode</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AbstractNode</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">String</span> direction;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">DirectionNode</span>(<span class="type">String</span> direction)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>.direction = direction;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">String</span> interpret()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(direction.equalsIgnoreCase(<span class="string">"up"</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"向上"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(direction.equalsIgnoreCase(<span class="string">"down"</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"向下"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(direction.equalsIgnoreCase(<span class="string">"left"</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"向左"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(direction.equalsIgnoreCase(<span class="string">"right"</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"向右"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"无效指令"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ActionNode.java:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//动作解释：终结符表达式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActionNode</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AbstractNode</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">String</span> action;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">ActionNode</span>(<span class="type">String</span> action)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>.action = action;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">String</span> interpret()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(action.equalsIgnoreCase(<span class="string">"move"</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"移动"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(action.equalsIgnoreCase(<span class="string">"run"</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"快速移动"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"无效指令"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>DistanceNode.java:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//距离解释：终结符表达式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DistanceNode</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AbstractNode</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">String</span> distance;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">DistanceNode</span>(<span class="type">String</span> distance)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>.distance = distance;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">String</span> interpret()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.distance;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AndNode.java:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//And解释：非终结符表达式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AndNode</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AbstractNode</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">AbstractNode</span> left;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">AbstractNode</span> right;</span><br><span class="line">	public <span class="type">AndNode</span>(<span class="type">AbstractNode</span> left,<span class="type">AbstractNode</span> right)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>.left = left;</span><br><span class="line">		<span class="keyword">this</span>.right = right;</span><br><span class="line">	&#125;</span><br><span class="line">	public <span class="type">String</span> interpret()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> left.interpret() + <span class="string">"再"</span> + right.interpret();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SentenceNode.java:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简单句子解释：非终结符表达式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SentenceNode</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AbstractNode</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">AbstractNode</span> direction;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">AbstractNode</span> action;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">AbstractNode</span> distance;</span><br><span class="line">	public <span class="type">SentenceNode</span>(<span class="type">AbstractNode</span> direction,<span class="type">AbstractNode</span> action,<span class="type">AbstractNode</span> distance)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>.direction = direction;</span><br><span class="line">		<span class="keyword">this</span>.action = action;</span><br><span class="line">		<span class="keyword">this</span>.distance = distance;</span><br><span class="line">	&#125;</span><br><span class="line">	public <span class="type">String</span> interpret()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> direction.interpret() + action.interpret() + distance.interpret();</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>InstructionHandler.java:</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指令处理类：工具类</span></span><br><span class="line">class InstructionHandler</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> AbstractNode node;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> handle(<span class="keyword">String</span> instruction)</span><br><span class="line">    &#123;</span><br><span class="line">    	AbstractNode left=<span class="keyword">null</span>,right=<span class="keyword">null</span>;</span><br><span class="line">    	AbstractNode direction=<span class="keyword">null</span>,action=<span class="keyword">null</span>,distance=<span class="keyword">null</span>;</span><br><span class="line">    	Stack stack=<span class="keyword">new</span> Stack(); </span><br><span class="line">    	<span class="keyword">String</span>[] words=instruction.<span class="built_in">split</span>(<span class="string">" "</span>); <span class="comment">//以空格分隔字符串</span></span><br><span class="line">    	<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;words.length;i++)</span><br><span class="line">    	&#123;</span><br><span class="line">    		<span class="keyword">if</span>(words[i].equalsIgnoreCase(<span class="string">"and"</span>))</span><br><span class="line">    		&#123;</span><br><span class="line">    			left=(AbstractNode)stack.pop();</span><br><span class="line">    		    <span class="keyword">String</span> word1=words[++i];</span><br><span class="line">    		    direction=<span class="keyword">new</span> DirectionNode(word1);</span><br><span class="line">    		    <span class="keyword">String</span> word2=words[++i];</span><br><span class="line">    		    action=<span class="keyword">new</span> ActionNode(word2);</span><br><span class="line">    		    <span class="keyword">String</span> word3=words[++i];</span><br><span class="line">    		    distance=<span class="keyword">new</span> DistanceNode(word3);</span><br><span class="line">    		    right=<span class="keyword">new</span> SentenceNode(direction,action,distance);</span><br><span class="line">    			stack.push(<span class="keyword">new</span> AndNode(left,right));</span><br><span class="line">    		&#125;</span><br><span class="line">    		<span class="keyword">else</span> </span><br><span class="line">    		&#123;	</span><br><span class="line">    		    <span class="keyword">String</span> word1=words[i];</span><br><span class="line">    		    direction=<span class="keyword">new</span> DirectionNode(word1);</span><br><span class="line">    		    <span class="keyword">String</span> word2=words[++i];</span><br><span class="line">    		    action=<span class="keyword">new</span> ActionNode(word2);</span><br><span class="line">    		    <span class="keyword">String</span> word3=words[++i];</span><br><span class="line">    		    distance=<span class="keyword">new</span> DistanceNode(word3);</span><br><span class="line">    		    left=<span class="keyword">new</span> SentenceNode(direction,action,distance);</span><br><span class="line">    		    stack.push(left);</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">this</span>.node=(AbstractNode)stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">String</span> output()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">String</span> result = node.interpret();</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Client.java:</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端测试类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		String instruction = <span class="string">"up move 5 and down run 10 and left move 5"</span>;</span><br><span class="line">		InstructionHandler <span class="keyword">handler</span> = <span class="keyword">new</span> InstructionHandler();</span><br><span class="line">		<span class="keyword">handler</span>.handle(instruction);</span><br><span class="line">		String outString;</span><br><span class="line">		outString = <span class="keyword">handler</span>.output();</span><br><span class="line">		System.out.println(outString);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果">运行结果</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/f639f1952ffb7491d290b91aab630f53.png" alt=""></p>
<h2 id="附加描述">附加描述</h2><p>在本实例中，我们将一个DirectionNode（方向节点）、一个ActionNode（动作节点）和一个DistanceNode（距离节点）组成一个SentenceNode（句子节点）。句子节点再通过and连接在一起，形成更加复杂的结构。本实例的工具类InstructionHandler用于对输入指令进行处理，将输入指令分割为字符串数组，将第1个、第2个和第3个单词组合成一个句子，并存入栈中；如果发现有单词and，则先将原先栈中所存句子取出来作为and的左表达式，再将and后的第1个、第2个和第3个单词组合成一个句子作为and的右表达式，然后将组合而成的AndNode节点存入栈中。以此类推，直到整个指令解析结束。</p>
<p>我们可以通过抽象语法树来表示解析过程，如指令 down run 10 and left move 20 对应的抽象语法树如下图所示。</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/32b7a151d69084f84d7ebaafb25c3f00.png" alt=""></p>
<hr>
<h1 id="后话">后话</h1><p>通过学习解释器模式，让我对树结构的用法有了进一步的理解。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="解释器模式定义">解释器模式定义</h1><p><strong>解释器模式（Interpreter Pattern）</strong>描述了如何为语言定义一个文法，如何在该语言中表示一个句子，以及如何解释这些句子。这里的语言意思是使用规定格式和语法的代码。</p>
<p>简单说来，解释器模式用来为语言创建解释器。</p>]]>
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式学习（三）——访问者模式]]></title>
    <link href="http://yoursite.com/2015/05/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A03%E2%80%94%E2%80%94%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/05/25/设计模式学习3——访问者模式/</id>
    <published>2015-05-24T16:00:22.000Z</published>
    <updated>2015-05-25T06:52:38.000Z</updated>
    <content type="html"><![CDATA[<h1 id="访问者模式定义及优缺点">访问者模式定义及优缺点</h1><p><strong>访问者模式（Visitor Pattern）</strong>用于表示一个作用于某对象结构中的各元素的操作，它使得用户可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p>
<p>访问者模式使得对对象的操作变得更为灵活，它将数据结构和作用于结构上的操作之间的耦合解脱开，使得增加一个新的访问者类变得很方便。</p>
<h2 id="访问者模式的优点：">访问者模式的优点：</h2><ul>
<li>允许你对组合结构加入新的操作，而无需改变结构本身；</li>
</ul>
<a id="more"></a>
<ul>
<li><p>想要加入新的操作，相对容易；</p>
</li>
<li><p>访问者所进行的操作，其代码是集中在一起的。</p>
</li>
</ul>
<h2 id="访问者模式的缺点：">访问者模式的缺点：</h2><ul>
<li><p>当采用访问者模式时，会打破组合类的封装；</p>
</li>
<li><p>因为游走的功能牵涉其中，所以对组合结构的改变就更加困难。</p>
</li>
</ul>
<hr>
<h1 id="访问者模式结构图">访问者模式结构图</h1><p><img src="http://qiniupicbed.qiniudn.com/upload/f638e8d18ce4f63197a3d6ca2a4fe90b.png" alt=""></p>
<p>图中：</p>
<ul>
<li><p>Visitor表示抽象访问者，它为对象结构类中每一个ConcreteElement的类声明一个Visit操作，通过这个操作的名称或方法签名（方法的参数和返回类型）可识别传出Visit请求给访问者的类，这就使得访问者可以确定正要被访问的元素的具体类，访问者就可以直接通过该元素的特定接口（Element）访问到它；</p>
</li>
<li><p>ConcreteVisitor表示具体访问者，它实现了每个由抽象访问者声明的操作，每一个操作用于访问对象结构中一种类型的元素；</p>
</li>
<li><p>Element表示抽象元素，在其中声明一个accept()操作，它以一个抽象访问者作为参数；</p>
</li>
<li><p>ConcreteElement表示具体元素，它实现了accept()操作，在accept()中调用访问者的访问方法以便完成对一个元素的操作；</p>
</li>
<li><p>ObjectStructure表示对象结构，它提供一个高层的接口以允许访问者访问它的元素，可以是一个组合模式或是一个集合，如一个列表或一个无序集合，可结合迭代器模式枚举其中的元素。</p>
</li>
</ul>
<hr>
<h1 id="访问者模式实例——奖励审批">访问者模式实例——奖励审批</h1><h2 id="实例说明">实例说明</h2><p>某高校奖励审批系统可以实现教师奖励和学生奖励的审批（AwardCheck），如果教师发表论文数超过10篇或者学生论文超过2篇可以评选科研奖，如果教师教学反馈分大于等于90分或者学生平均成绩大于等于90分可以评选成绩优秀奖，使用访问者模式设计该系统，以判断候选人集合中的教师或学生是否符合某种获奖要求。</p>
<h2 id="实例类图">实例类图</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/cec1958ca8107d0fe61efccd159dd074.png" alt=""></p>
<p>实例类图中与访问者模式结构图对应的类主要有：</p>
<ul>
<li><p>AwardCheck充当抽象访问者角色；</p>
</li>
<li><p>ScientificAwardCheck和ExcellenceAwardCheck充当具体访问者角色；</p>
</li>
<li><p>Person充当抽象元素角色；</p>
</li>
<li><p>Teacher和Student充当具体元素角色；</p>
</li>
<li><p>CandidateList充当对象结构角色。</p>
</li>
</ul>
<h2 id="实例代码">实例代码</h2><p>AwardCheck.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象奖励审批类：抽象访问者类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AwardCheck</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Teacher teacher)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Student student)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ScientificAwardCheck.java:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//科研奖审批类：具体访问者类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScientificAwardCheck</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AwardCheck</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	public void visit(<span class="type">Teacher</span> teacher)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(teacher.getPaperAmount()&gt;=<span class="number">10</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">System</span>.out.println(teacher.getName() + <span class="string">"可评选教师科研奖！"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	public void visit(<span class="type">Student</span> student)	</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(student.getPaperAmount()&gt;=<span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">System</span>.out.println(student.getName() + <span class="string">"可评选学生科研奖！"</span>);</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ExcellenceAwardCheck.java:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//成绩优秀奖审批类：具体访问者类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExcellenceAwardCheck</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AwardCheck</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	public void visit(<span class="type">Teacher</span> teacher)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(teacher.getFeedbackScore()&gt;=<span class="number">90</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">System</span>.out.println(teacher.getName() + <span class="string">"可评选教师成绩优秀奖！"</span>);</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line">	public void visit(<span class="type">Student</span> student)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(student.getScore()&gt;=<span class="number">90</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">System</span>.out.println(student.getName() + <span class="string">"可评选学生成绩优秀奖！"</span>);</span><br><span class="line">		&#125;			</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Person.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//申请人类：抽象元素类</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(AwardCheck check)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Teacher.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//教师类：具体元素类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">implements</span> <span class="title">Person</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> paperAmount;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> feedbackScore;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name; </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPaperAmount</span><span class="params">(<span class="keyword">int</span> paperAmount)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.paperAmount = paperAmount; </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFeedbackScore</span><span class="params">(<span class="keyword">double</span> feedbackScore)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.feedbackScore = feedbackScore; </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>.name); </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPaperAmount</span><span class="params">()</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>.paperAmount); </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getFeedbackScore</span><span class="params">()</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>.feedbackScore); </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(AwardCheck check)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		check.visit(<span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Student.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生类：具体元素类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Person</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> paperAmount;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name; </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPaperAmount</span><span class="params">(<span class="keyword">int</span> paperAmount)</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.paperAmount = paperAmount; </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">double</span> score)</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.score = score; </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>.name); </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPaperAmount</span><span class="params">()</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>.paperAmount); </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getScore</span><span class="params">()</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>.score); </span><br><span class="line">	&#125;	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(AwardCheck check)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		check.visit(<span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CandidateList.java:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//候选人集合类：对象结构</span></span><br><span class="line"><span class="keyword">class</span> CandidateList</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> ArrayList&lt;Person&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPerson</span><span class="params">(Person person)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">list</span>.add(person);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removePerson</span><span class="params">(Person person)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">list</span>.remove(person);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(AwardCheck check)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		Iterator i = <span class="built_in">list</span>.iterator();</span><br><span class="line">		<span class="keyword">while</span>(i.hasNext())</span><br><span class="line">		&#123;</span><br><span class="line">			((Person)i.next()).accept(check);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Client.java:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端测试类</span></span><br><span class="line"><span class="keyword">class</span> Client</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		CandidateList <span class="built_in">list</span> = <span class="keyword">new</span> CandidateList();</span><br><span class="line">		AwardCheck sac,eac;</span><br><span class="line">		Teacher teacher = <span class="keyword">new</span> Teacher();</span><br><span class="line">		Student student = <span class="keyword">new</span> Student();</span><br><span class="line">		teacher.setName(<span class="string">"李雷"</span>);</span><br><span class="line">		teacher.setPaperAmount(<span class="number">15</span>);</span><br><span class="line">		teacher.setFeedbackScore(<span class="number">92</span>);</span><br><span class="line">		student.setName(<span class="string">"韩梅梅"</span>);</span><br><span class="line">		student.setPaperAmount(<span class="number">2</span>);</span><br><span class="line">		student.setScore(<span class="number">85</span>);</span><br><span class="line">		<span class="built_in">list</span>.addPerson(teacher);</span><br><span class="line">		<span class="built_in">list</span>.addPerson(student);</span><br><span class="line">		sac = <span class="keyword">new</span> ScientificAwardCheck();</span><br><span class="line">		<span class="built_in">list</span>.accept(sac);</span><br><span class="line">		System.out.println(<span class="string">"-------------------------"</span>);</span><br><span class="line">		eac = <span class="keyword">new</span> ExcellenceAwardCheck();</span><br><span class="line">		<span class="built_in">list</span>.accept(eac);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果">运行结果</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/a9d3cd7c219811ff0a8bef9d60d060ba.png" alt=""></p>
<h2 id="附加描述">附加描述</h2><p>在本实例中，CandidateList类中定义了一个ArrayList类型的集合对象，用于存储待审核的学生和教师信息，在其accept()方法中通过参数传入一个访问者对象，该访问者对象将遍历审核存储在集合中的学生对象和教师对象，取出存储在元素对象中的论文数量和平均成绩，判断是否符合科研奖和成绩优秀奖的评选条件，再输出相应的判断结果。</p>
<hr>
<h1 id="后话">后话</h1><p>看书学习这个设计模式时，有的话看了一遍两遍，根本就不明白是要表达什么意思，整段整段的专用术语晦涩难懂。可是再坚持看几遍，就会恍然大悟，如梦初醒。这真是验证了那句名言——“书读百遍，其义自现。”</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="访问者模式定义及优缺点">访问者模式定义及优缺点</h1><p><strong>访问者模式（Visitor Pattern）</strong>用于表示一个作用于某对象结构中的各元素的操作，它使得用户可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p>
<p>访问者模式使得对对象的操作变得更为灵活，它将数据结构和作用于结构上的操作之间的耦合解脱开，使得增加一个新的访问者类变得很方便。</p>
<h2 id="访问者模式的优点：">访问者模式的优点：</h2><ul>
<li>允许你对组合结构加入新的操作，而无需改变结构本身；</li>
</ul>]]>
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式学习（二）——策略模式]]></title>
    <link href="http://yoursite.com/2015/05/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A02%E2%80%94%E2%80%94%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/05/24/设计模式学习2——策略模式/</id>
    <published>2015-05-24T14:53:09.000Z</published>
    <updated>2015-05-24T15:52:31.000Z</updated>
    <content type="html"><![CDATA[<h1 id="策略模式定义">策略模式定义</h1><p><strong>策略模式（Strategy Pattern）</strong>中定义一系列算法，并将每一个算法封装起来，使它们可以相互替换，策略模式让算法独立于使用它的客户而变化。</p>
<p>有许多算法可以实现同一功能，比如存在多种搜索算法、排序算法等。如果将这些算法硬编码在程序中，则会导致系统变得庞大而难以维护，在增加新的算法或改变现有算法时也将变得十分困难。为了解决类似问题，可以定义一些独立的类来封装不同的算法，每一个封装算法的类成为<strong>策略</strong>。</p>
<a id="more"></a>
<p>策略模式把算法的责任和算法本身分割开，委派给不同的对象管理。策略模式使用起来很方便，如需要提供一个灵活的网站搜索工具，可以有多种搜索策略，并且还会在以后根据实际情况增加新的搜索方式，就可以使用策略模式，创建一个搜索管理器用于和外部环境代码交互，在外部代码中针对抽象层编程，从而使得新的搜索方式出现时外部代码无需做任何改变，同时使得搜索算法的重用变得更为灵活。</p>
<hr>
<h1 id="策略模式结构图">策略模式结构图</h1><p><img src="http://qiniupicbed.qiniudn.com/upload/02b84892ab605bcac6b4e13379d23514.png" alt=""></p>
<p>图中：</p>
<ul>
<li><p>Context表示环境类，它通过ConcreteStrategy对象配置其执行环境，并维护一个对Strategy的引用实例，可以定义一个接口供Strategy存取其数据；</p>
</li>
<li><p>Strategy表示抽象策略类，它定义一个公共的接口给所有支持的算法，Context可以使用这个接口调用ConcreteStrategy定义的算法；</p>
</li>
<li><p>ConcreteStrategyA和ConcreteStrategyB表示具体策略类，它们实现Strategy接口定义的算法。</p>
</li>
</ul>
<hr>
<h1 id="策略模式实例——电影票打折">策略模式实例——电影票打折</h1><h2 id="实例说明">实例说明</h2><p>某电影院售票系统为不同类型的用户提供了不同的打折方式（Discount），学生凭学生证可享受8折优惠（StudentDiscount），儿童可享受减免10元的优惠（ChildrenDiscount），VIP用户除享受半价优惠外还可以进行积分（VIPDiscount）。使用策略模式设计该系统，结合场景绘制相应的类图并编码实现。</p>
<h2 id="实例类图">实例类图</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/1280a7eb67bf6efcc4fc15899c6f8e0d.png" alt=""></p>
<p>实例类图中与策略模式结构图对应的类主要有：</p>
<ul>
<li><p>MovieTicket为环境类；</p>
</li>
<li><p>Discount为抽象策略类；</p>
</li>
<li><p>StudentDiscount、ChildrenDiscount和VIPDiscount为具体策略类。</p>
</li>
</ul>
<h2 id="实例代码">实例代码</h2><p>MovieTicket.java:</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">//电影票类：环境类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieTicket</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">	<span class="keyword">private</span> Discount discount;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.price = price;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setDiscount</span><span class="params">(Discount discount)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.discount = discount;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">return</span> discount.<span class="title">calculate</span><span class="params">(<span class="keyword">this</span>.price)</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Discount.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//折扣类：抽象策略类</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title">Discount</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">double</span> price)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>StudentDiscount.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生折扣类：具体策略类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentDiscount</span> <span class="keyword">implements</span> <span class="title">Discount</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">double</span> price)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.out.print(<span class="string">"学生--&gt;"</span>);</span><br><span class="line">		<span class="keyword">return</span> price * <span class="number">0.8</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ChildrenDiscount.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//儿童折扣类：具体策略类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildrenDiscount</span> <span class="keyword">implements</span> <span class="title">Discount</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">double</span> price)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.out.print(<span class="string">"儿童--&gt;"</span>);</span><br><span class="line">		<span class="keyword">return</span> price - <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>VIPDiscount.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//VIP用户折扣类：具体策略类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">VIPDiscount</span> <span class="title">implements</span> <span class="title">Discount</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">double</span> price)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.print(<span class="string">"VIP用户--&gt;"</span>);</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"增加积分！"</span>);</span><br><span class="line">		<span class="keyword">return</span> price * <span class="number">0.5</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Client.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端测试类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">double</span> price = <span class="number">50.00</span>;</span><br><span class="line">		MovieTicket mt = <span class="keyword">new</span> MovieTicket();</span><br><span class="line">		mt.setPrice(price);</span><br><span class="line">		<span class="keyword">double</span> currentPrice;</span><br><span class="line">		</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"电影票原价为："</span> + price + <span class="string">"元"</span>);</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"---------------------------------"</span>);</span><br><span class="line">			</span><br><span class="line">		Discount obj;</span><br><span class="line">		obj = <span class="keyword">new</span> StudentDiscount();  <span class="comment">//可通过配置文件实现</span></span><br><span class="line">		mt.setDiscount(obj);</span><br><span class="line">		currentPrice = mt.getPrice();</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"折后票价为："</span> + currentPrice + <span class="string">"元"</span>);</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"---------------------------------"</span>);</span><br><span class="line">		obj = <span class="keyword">new</span> VIPDiscount();</span><br><span class="line">		mt.setDiscount(obj);</span><br><span class="line">		currentPrice = mt.getPrice();</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"折后票价为"</span> + currentPrice + <span class="string">"元"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果">运行结果</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/bbe5d5d6c72a35b4d6d559e17b420cc4.png" alt=""></p>
<h2 id="附加描述">附加描述</h2><p>在本实例中，可以通过配置文件来存储具体策略类的类名，再使用反射机制生产对象，如果需要更换具体策略或使用新增加的具体策略，无需修改任何源代码（包括客户端代码），只需修改配置文件即可，完全符合开闭原则。</p>
<hr>
<h1 id="后话">后话</h1><p>学习设计模式，是一场修行。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="策略模式定义">策略模式定义</h1><p><strong>策略模式（Strategy Pattern）</strong>中定义一系列算法，并将每一个算法封装起来，使它们可以相互替换，策略模式让算法独立于使用它的客户而变化。</p>
<p>有许多算法可以实现同一功能，比如存在多种搜索算法、排序算法等。如果将这些算法硬编码在程序中，则会导致系统变得庞大而难以维护，在增加新的算法或改变现有算法时也将变得十分困难。为了解决类似问题，可以定义一些独立的类来封装不同的算法，每一个封装算法的类成为<strong>策略</strong>。</p>]]>
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[滑稽的大雨]]></title>
    <link href="http://yoursite.com/2015/05/23/%E6%BB%91%E7%A8%BD%E7%9A%84%E5%A4%A7%E9%9B%A8/"/>
    <id>http://yoursite.com/2015/05/23/滑稽的大雨/</id>
    <published>2015-05-23T07:00:23.000Z</published>
    <updated>2015-05-23T08:18:21.000Z</updated>
    <content type="html"><![CDATA[<p><strong>（一）</strong></p>
<p>记得唐代诗人李约的《观祈雨》是这么写的：“桑条无叶土生烟，箫管迎龙水庙前。朱门几处看歌舞，犹恐春阴咽管弦。”这是一首悯农诗，写观看春日祈雨的感慨，前两句写农民春旱祈雨的场面，后两句写朱门看歌舞的情景。同样是面对久旱无雨，两种不同生活的描绘，足见当时的阶级对立和贫富悬殊。农民们由于天旱而忧虑一年生计，豪门权贵却日夜笙歌，犹恐天阴下雨使乐器受潮。</p>
<p>有时候很佩服古人，三言两语就能把眼前所见之景和想要表达的意思抒发出来，言简意赅，意犹未尽。我喜欢这样简短的表达，留有空白，引人思索。我厌烦喋喋不休、长篇大论的赘述，把简单变为复杂，让人听得云里雾里。</p>
<a id="more"></a>
<p>纵然时间跨越了千百年，可是人类竟是如此相似。唐代的人看雨引发了感想，如今的我在大雨天也一路看着满地的水花四溅而触景生情、浮想联翩。</p>
<p>以前我不喜欢和历史有关的东西，觉得那些都太古老了，没什么值得知道和学习的。现在想想，发现这是极为荒谬的想法，那时的我不懂得敬畏时间。我自己又何尝不是这浩渺历史长河里的一粒砂石呢？</p>
<p>现在的我若是有机会去到一些有着悠久历史的古迹，我会驻足凝视，感受身边的一草一木，感受那遥远的轻柔的风，就像千百年前到过此处的人那样，去感受这古朴的久远的气息。虽然时代不同，虽有人心差异，但是我想，心境却会有几分相似吧。</p>
<p><strong>（二）</strong></p>
<p>我撑着伞在路边的公交站等车，随意看着眼前人来人往、车水马龙的街道。</p>
<p>大雨里，卖一次性雨衣的人身披一次性雨衣，欢呼着招揽生意，雨带给他们快乐。</p>
<p>凛冽的风夹杂着大滴大滴的雨珠匆匆落下，滴滴砸在一个卖豆腐的老奶奶的小三轮车板上。她目光坚定，饱经沧桑的脸布满褶皱，那是上帝赐予勤劳的人最美的礼物。雨中的路人甚至无暇瞥一眼豆腐，她像一个隐形人一样在人群中叫卖。三轮车渐行渐远，她的白发丝丝扬起，又被大雨重重地打了下去。大雨哗哗哗，哗哗哗，阻挡了我的视线。</p>
<p>我的目光看向身旁一个小女孩的雨伞，她站的位置正好是公交站顶上雨水聚集流下的地方，我看着水柱连续不断地流下，打在她的伞上。突然觉得伞真是神奇的工具，那层布结结实实地挡住了水柱，并引导水流从伞边滑落，为它的主人撑起一小片无雨的天空。</p>
<p>一辆私家车飞驰而过，车轮卷起积在路边低地的水，水唰唰地飞溅起来，颗颗水珠欢乐地奔向等车人的裤腿。</p>
<p>“喂，怎么开的车啊！”</p>
<p>“TMD，这开车的真没素质！”</p>
<p>“素质啊……”</p>
<p>开车的人该是沉浸在车中的世界吧，他不会知道几秒钟前他的车经过的那些人在说着什么，他不会知道。</p>
<p>大雨哗哗哗，哗哗哗，淹没了等车人的抱怨。</p>
<p>公交还没有来，我注意到身旁一个撑伞抱小孩的母亲，她的鞋湿透了，衣服上不知是汗还是水，也已湿了一片。可她的伞却稳稳地举着，她怀中熟睡的孩童该是不知道这周围发生的一切吧。</p>
<p>孩子熟睡着，面带微笑。</p>
<p><strong>（三）</strong></p>
<p>“最美的不是下雨天，是曾和你躲过雨的屋檐。”</p>
<p>我行走在大雨里，耳中充满和雨有关的歌、音乐；眼前满是大雨中的各色人等；脑中不断浮现曾经下雨时的情景。</p>
<p>“竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生。”冷不丁想起苏轼的这句诗。</p>
<p>我好想丢下伞，不管不顾地淋着雨朝前走，一直一直走，直到走到天空止住哭泣。</p>
<p>“不行，你不该丢下伞！”脑中的理智跳出来对我说。</p>
<p>“你的衣服、裤子淋湿了，多不舒服啊！”</p>
<p>“你下雨天就这一双鞋子好穿，浸透了雨水，可怎么办呀！”</p>
<p>“淋雨会感冒的！”</p>
<p>“不行，你的书包里还有电脑呢！”</p>
<p>……</p>
<p>一切，一切我的理智能想到的滑稽的借口，统统跳出来，将我的伞牢牢捆在左手，稳稳地将大自然纯真的雨露拒之千里。</p>
<p><strong>（四）</strong></p>
<p>我打开实验室的窗户，外面的雨已经停了，鸟叫声从树林里传出来，无奈枝叶繁多，不见鸟儿踪影。</p>
<p>滑稽的大雨，滑稽的我，滑稽的遐想，滑稽的文。</p>
<p>大地还是湿漉漉的，我看了看来时的路，也无风雨也无晴。</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/95c64e70178baecf12c891436e274f27.JPG" alt=""></p>
<p><em>（拍摄于白城公交站后面的海滩。茫茫的天，茫茫的雨，茫茫的海。）</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>（一）</strong></p>
<p>记得唐代诗人李约的《观祈雨》是这么写的：“桑条无叶土生烟，箫管迎龙水庙前。朱门几处看歌舞，犹恐春阴咽管弦。”这是一首悯农诗，写观看春日祈雨的感慨，前两句写农民春旱祈雨的场面，后两句写朱门看歌舞的情景。同样是面对久旱无雨，两种不同生活的描绘，足见当时的阶级对立和贫富悬殊。农民们由于天旱而忧虑一年生计，豪门权贵却日夜笙歌，犹恐天阴下雨使乐器受潮。</p>
<p>有时候很佩服古人，三言两语就能把眼前所见之景和想要表达的意思抒发出来，言简意赅，意犹未尽。我喜欢这样简短的表达，留有空白，引人思索。我厌烦喋喋不休、长篇大论的赘述，把简单变为复杂，让人听得云里雾里。</p>]]>
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="看见" scheme="http://yoursite.com/tags/%E7%9C%8B%E8%A7%81/"/>
    
      <category term="个人随笔" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>