<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[小默的博客]]></title>
  <subtitle><![CDATA[用自由自在的态度，过随遇而安的生活。]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-05-09T17:38:13.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[xmuxiaomo]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[问鼎大师]]></title>
    <link href="http://yoursite.com/2015/05/10/%E9%97%AE%E9%BC%8E%E5%A4%A7%E5%B8%88/"/>
    <id>http://yoursite.com/2015/05/10/问鼎大师/</id>
    <published>2015-05-09T16:13:06.000Z</published>
    <updated>2015-05-09T17:38:13.000Z</updated>
    <content type="html"><![CDATA[<p>就在刚刚，一局PK比赛结束，弹出比分、战胜对手的同时，手机屏幕上显示我段位晋升为大师，赢得了手游《节奏大师》的最高荣耀。</p>
<p>我说不出此刻是怎样的心情，也许，是平静吧，是经过千山万水、大起大落而重获的那份内心的平静吧。</p>
<p>记得节奏大师是2012年12月份出来的，我刚开始玩的时候是2013年春节后，也就是大四下学期伊始之时。毫不夸张，我算得上是老一辈的现象级玩家了，陪伴着它经历了一次次的版本升级和新玩法的出现。从最早的只玩4KEY自由模式，到后来的闯关，记得当时玩得疯狂，两天就耗尽了初始的150体力，玩到了150关，玩到手拇指抽筋了，玩到眼睛也花了，玩到耳朵都听倦了那嗨翻心海的音乐声，玩到深夜手机没电倒头就睡。</p>
<p>当时的我觉得，这款游戏简直就是为我量身定制的，音乐节奏能完美得从指间流淌出来，旋律带动全省的音乐细胞一起震颤。</p>
<a id="more"></a>
<p>初中时的有段时间，我酷爱《劲乐团》，和同班同学约好了周末PK，当时我也是名噪一时的班级音游达人。后来劲乐团要收费了，就玩的少了。</p>
<p>之后的好多年，我再没有接触过音乐游戏，直到姐姐推荐说《节奏大师》很好玩，我才开始与它相遇，并结下不解之缘。</p>
<p>后来它走向盈利的一面，有几首好歌需要购买倒是其次，关键在于其中设置了好多游戏角色可供玩家购买，这些角色可以大幅度降低操作者失误率，说白了，就相当于半开着外挂在玩。</p>
<p>PK场的出现，简直就是我福音。最早我玩得好，可是展示的机会少之又少，寝室同学知道，还有就是同学聚会时表演过一次，哈哈。它可以与其他玩家PK，这就极大增添了这款游戏的可玩性和竞技性。</p>
<p>PK的竞技段位有7个级别，从低到高依次为小白、入门(300+)、进阶(600+)、普通(900+)、高手(1200+)、专业(1500+)和大师(1800+)。起初没花多少时间，我就迅速晋升到高手行列。自己处于哪个段位，系统就会安排实力相当的对手进行比赛。慢慢地，我发现高手这个级别的对手实力上与我还是有些微差距的，于是没过多久，我就晋升到专业组。现在想来，专业组已是半职业水准了，因为当时有许多知名战队（印象最深的为mz战队）队员都是专业级别的，我在PK中遇到几次，基本都无一幸免的是我稍逊风骚，甘拜下风。当时的mz战队成员确实个个生猛无比，我看了这个战队的宣传视频，当时的入门要求是要有50首困难歌曲达到3S。往昔的3S绝对是含金量极高的，当时的游戏设定是必须按满全部的键，且必须全部是Perfect，才判为3S。我记得我当时简直要被强迫症逼死，有时一首歌连续重复打四五十遍才能打出3S，打出来还是好的，痛苦的是在打出来之前，我必须一遍遍忍受自己手指的失控、眼花等一系列失误，接纳自己的不足，努力改进和练习，不断超越自我，增强手指的灵敏度和精准度，最终成功打出3S。当时的我深刻体会到“最痛苦的不是你失败了，而是你离成功就只差一点点”这句话的要义和精髓。</p>
<p>2014年初，当达到50个3S时，我曾在QQ空间发表了一篇文章(<a href="http://user.qzone.qq.com/307898463/2" target="_blank" rel="external">http://user.qzone.qq.com/307898463/2</a>)，打算金盆洗手，退出江湖。不料，它仍然是我不变的挚爱。断断续续地，我还是一直有玩。</p>
<p>在我到厦大读研后，我和同学在2013年末组织举办了一次节奏大师比赛，我是作为工作人员，负责在现场为同学们计分。之后自己也参加过一次学院组织的节奏大师比赛，并获得了第一名，说来惭愧，这是我在厦大得到的唯一一张获奖奖状。</p>
<p>之后节奏大师还推出了许多小玩法，比如周末闯关、极限挑战、星动模式、好友闯关等等，不过我最偏爱的还是自由模式和无道具无角色PK场。</p>
<p>节奏大师每年的夏季和冬季都有TGA大赛，先是海选，到复赛，到决赛。我每一次都参加了海选，最好的成绩是61名，可惜取的是前32名进入复赛。我每次比赛都参与，其实也就是纯为了娱乐，挑战一下自己，看看自己在大赛中拥有怎样的实力，并没有想要入围复赛或是决赛。节奏大师的高手很多，我最敬佩的只有一人——ID为“小梨大枣”，他是我见过拇指玩家里最强的，拇指AC卡农的人。我有段时间，每晚睡前都看他的游戏视频，常常看得欣喜异常、振奋不已，从床上坐起来，自己又玩几局。</p>
<p>近来，节奏大师的海选赛和PK场几乎已被外挂吞噬，前几百名已经看不到真人玩家，我在PK场里甚至有一天打了10局比赛，其中8局的对手是外挂，着实让我心寒。</p>
<p>从专业组晋升大师的过程历时将近一年，这个过程是不易的，因为这中间隔着300分的距离，我战胜高手组的对手有时不加分，战胜专业组或大师组对手加1分，输给高手组、专业组时要扣1分，输给大师组对手有时不扣分。升升降降，兜兜转转，金戈铁马，折戟沉沙，无数次的功亏一篑，无数次的卷土重来。三十功名尘与土，八千里路云和月。</p>
<p>宝剑锋从磨砺出，梅花香自苦寒来。在光鲜背后，我也曾玩得快要砸碎手机，也曾痛苦自己的手指无法如机器那样精确，也曾大骂外挂的横行。可我一次次隐忍，在细小之处追求完美，不断超越自身的局限，砥砺磨难与困苦，终究问鼎大师。</p>
<p>这也让我相信，在一个领域坚持下去，总有出头之日。我也总算在生活的一处，成为了大师。其实，不管是哪一个领域，大师都是值得敬重的，大师的分量绝不是马虎浮躁能忽悠出来的，大师，是为大师也。</p>
<p>这一刻，纵有千言万语，却只化作两幅手机游戏截图。图片背后看不见的是几乎每天不间断的练习和鲜为人知的故事。</p>
<p>大师，已然超越了技术本身，而成为了一种精神和信仰。</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/766b44defe0135a1a10dfe0cdb210b50.png" alt=""></p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/0988955ab2a5e8eb04d51069a064d8cf.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>就在刚刚，一局PK比赛结束，弹出比分、战胜对手的同时，手机屏幕上显示我段位晋升为大师，赢得了手游《节奏大师》的最高荣耀。</p>
<p>我说不出此刻是怎样的心情，也许，是平静吧，是经过千山万水、大起大落而重获的那份内心的平静吧。</p>
<p>记得节奏大师是2012年12月份出来的，我刚开始玩的时候是2013年春节后，也就是大四下学期伊始之时。毫不夸张，我算得上是老一辈的现象级玩家了，陪伴着它经历了一次次的版本升级和新玩法的出现。从最早的只玩4KEY自由模式，到后来的闯关，记得当时玩得疯狂，两天就耗尽了初始的150体力，玩到了150关，玩到手拇指抽筋了，玩到眼睛也花了，玩到耳朵都听倦了那嗨翻心海的音乐声，玩到深夜手机没电倒头就睡。</p>
<p>当时的我觉得，这款游戏简直就是为我量身定制的，音乐节奏能完美得从指间流淌出来，旋律带动全省的音乐细胞一起震颤。</p>]]>
    
    </summary>
    
      <category term="大师" scheme="http://yoursite.com/tags/%E5%A4%A7%E5%B8%88/"/>
    
      <category term="个人随笔" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[swirl学习之八——Logic]]></title>
    <link href="http://yoursite.com/2015/05/08/swirl%E5%AD%A6%E4%B9%A08/"/>
    <id>http://yoursite.com/2015/05/08/swirl学习8/</id>
    <published>2015-05-08T09:58:00.000Z</published>
    <updated>2015-05-08T09:59:26.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">| Please choose a course, <span class="keyword">or</span> type <span class="number">0</span> <span class="keyword">to</span> <span class="keyword">exit</span> swirl.</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: R Programming</span><br><span class="line"><span class="number">2</span>: <span class="keyword">Take</span> <span class="keyword">me</span> <span class="keyword">to</span> the swirl course repository!</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">| Please choose a lesson, <span class="keyword">or</span> type <span class="number">0</span> <span class="keyword">to</span> <span class="keyword">return</span> <span class="keyword">to</span> course menu.</span><br><span class="line"></span><br><span class="line"> <span class="number">1</span>: Basic Building Blocks      <span class="number">2</span>: Workspace <span class="keyword">and</span> Files     </span><br><span class="line"> <span class="number">3</span>: Sequences <span class="keyword">of</span> Numbers       <span class="number">4</span>: Vectors                 </span><br><span class="line"> <span class="number">5</span>: Missing Values             <span class="number">6</span>: Subsetting Vectors      </span><br><span class="line"> <span class="number">7</span>: Matrices <span class="keyword">and</span> Data Frames   <span class="number">8</span>: Logic                   </span><br><span class="line"> <span class="number">9</span>: Functions                 <span class="number">10</span>: lapply <span class="keyword">and</span> sapply       </span><br><span class="line"><span class="number">11</span>: vapply <span class="keyword">and</span> tapply         <span class="number">12</span>: Looking at Data         </span><br><span class="line"><span class="number">13</span>: Simulation                <span class="number">14</span>: Dates <span class="keyword">and</span> Times         </span><br><span class="line"><span class="number">15</span>: Base Graphics             </span><br><span class="line"></span><br><span class="line">Selection: <span class="number">8</span></span><br><span class="line"></span><br><span class="line">  |                                                            |   <span class="number">0</span>%</span><br><span class="line"></span><br><span class="line">| This lesson <span class="keyword">is</span> meant <span class="keyword">to</span> be a <span class="built_in">short</span> introduction <span class="keyword">to</span> logical</span><br><span class="line">| operations <span class="keyword">in</span> R.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=                                                           |   <span class="number">2</span>%</span><br><span class="line"></span><br><span class="line">| There are two logical values <span class="keyword">in</span> R, also called <span class="built_in">boolean</span> values. They</span><br><span class="line">| are <span class="literal">TRUE</span> <span class="keyword">and</span> <span class="literal">FALSE</span>. <span class="keyword">In</span> R you can construct logical expressions</span><br><span class="line">| which will evaluate <span class="keyword">to</span> either <span class="literal">TRUE</span> <span class="keyword">or</span> <span class="literal">FALSE</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==                                                          |   <span class="number">4</span>%</span><br><span class="line"></span><br><span class="line">| Many <span class="keyword">of</span> the questions <span class="keyword">in</span> this lesson will involve evaluating</span><br><span class="line">| logical expressions. It may be useful <span class="keyword">to</span> open up a second R</span><br><span class="line">| terminal <span class="keyword">where</span> you can experiment <span class="keyword">with</span> some <span class="keyword">of</span> these expressions.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |====                                                        |   <span class="number">6</span>%</span><br><span class="line"></span><br><span class="line">| Creating logical expressions requires logical operators. You<span class="comment">'re</span></span><br><span class="line">| probably familiar <span class="keyword">with</span> arithmetic operators <span class="keyword">like</span> `+`, `-`, `*`, <span class="keyword">and</span></span><br><span class="line">| `/`. The first logical <span class="keyword">operator</span> we are going <span class="keyword">to</span> discuss <span class="keyword">is</span> the</span><br><span class="line">| equality <span class="keyword">operator</span>, represented <span class="keyword">by</span> two <span class="keyword">equals</span> signs `==`. Use the</span><br><span class="line">| equality <span class="keyword">operator</span> below <span class="keyword">to</span> find out <span class="keyword">if</span> <span class="literal">TRUE</span> <span class="keyword">is</span> equal <span class="keyword">to</span> <span class="literal">TRUE</span>.</span><br><span class="line"></span><br><span class="line">&gt; <span class="literal">TRUE</span> == <span class="literal">TRUE</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| Excellent job!</span><br><span class="line"></span><br><span class="line">  |=====                                                       |   <span class="number">8</span>%</span><br><span class="line"></span><br><span class="line">| Just <span class="keyword">like</span> arithmetic, logical expressions can be grouped <span class="keyword">by</span></span><br><span class="line">| parenthesis so that the entire expression (<span class="literal">TRUE</span> == <span class="literal">TRUE</span>) == <span class="literal">TRUE</span></span><br><span class="line">| evaluates <span class="keyword">to</span> <span class="literal">TRUE</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |======                                                      |  <span class="number">10</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">To</span> test out this <span class="keyword">property</span>, <span class="keyword">try</span> evaluating (<span class="literal">FALSE</span> == <span class="literal">TRUE</span>) == <span class="literal">FALSE</span></span><br><span class="line">| .</span><br><span class="line"></span><br><span class="line">&gt; (<span class="literal">FALSE</span>==<span class="literal">TRUE</span>)==<span class="literal">FALSE</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| You got it!</span><br><span class="line"></span><br><span class="line">  |=======                                                     |  <span class="number">12</span>%</span><br><span class="line"></span><br><span class="line">| The equality <span class="keyword">operator</span> can also be used <span class="keyword">to</span> <span class="keyword">compare</span> numbers. Use `==`</span><br><span class="line">| <span class="keyword">to</span> see <span class="keyword">if</span> <span class="number">6</span> <span class="keyword">is</span> equal <span class="keyword">to</span> <span class="number">7.</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="number">6</span>==<span class="number">7</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">FALSE</span></span><br><span class="line"></span><br><span class="line">| You got it!</span><br><span class="line"></span><br><span class="line">  |========                                                    |  <span class="number">14</span>%</span><br><span class="line"></span><br><span class="line">| The previous expression evaluates <span class="keyword">to</span> <span class="literal">FALSE</span> because <span class="number">6</span> <span class="keyword">is</span> less than</span><br><span class="line">| <span class="number">7.</span> Thankfully, there are inequality operators that allow us <span class="keyword">to</span> test</span><br><span class="line">| <span class="keyword">if</span> a value <span class="keyword">is</span> less than <span class="keyword">or</span> greater than another value.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=========                                                   |  <span class="number">16</span>%</span><br><span class="line"></span><br><span class="line">| The less than <span class="keyword">operator</span> `&lt;` tests whether the number <span class="keyword">on</span> the left</span><br><span class="line">| side <span class="keyword">of</span> the <span class="keyword">operator</span> (called the left operand) <span class="keyword">is</span> less than the</span><br><span class="line">| number <span class="keyword">on</span> the right side <span class="keyword">of</span> the <span class="keyword">operator</span> (called the right</span><br><span class="line">| operand). Write an expression <span class="keyword">to</span> test whether <span class="number">6</span> <span class="keyword">is</span> less than <span class="number">7.</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="number">6</span>&lt;<span class="number">7</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| You nailed it! Good job!</span><br><span class="line"></span><br><span class="line">  |===========                                                 |  <span class="number">18</span>%</span><br><span class="line"></span><br><span class="line">| There <span class="keyword">is</span> also a less-than-<span class="keyword">or</span>-equal-<span class="keyword">to</span> <span class="keyword">operator</span> `&lt;=` which tests</span><br><span class="line">| whether the left operand <span class="keyword">is</span> less than <span class="keyword">or</span> equal <span class="keyword">to</span> the right</span><br><span class="line">| operand. Write an expression <span class="keyword">to</span> test whether <span class="number">10</span> <span class="keyword">is</span> less than <span class="keyword">or</span></span><br><span class="line">| equal <span class="keyword">to</span> <span class="number">10.</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="number">10</span>&lt;=<span class="number">10</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s the answer I was looking for.</span></span><br><span class="line"></span><br><span class="line">  |============                                                |  <span class="number">20</span>%</span><br><span class="line"></span><br><span class="line">| Keep <span class="keyword">in</span> mind that there are the corresponding greater than `&gt;` <span class="keyword">and</span></span><br><span class="line">| greater-than-<span class="keyword">or</span>-equal-<span class="keyword">to</span> `&gt;=` operators.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=============                                               |  <span class="number">22</span>%</span><br><span class="line"></span><br><span class="line">| Which <span class="keyword">of</span> the following evaluates <span class="keyword">to</span> <span class="literal">FALSE</span>?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: <span class="number">6</span> &lt; <span class="number">8</span></span><br><span class="line"><span class="number">2</span>: <span class="number">7</span> == <span class="number">7</span></span><br><span class="line"><span class="number">3</span>: <span class="number">0</span> &gt; -<span class="number">36</span></span><br><span class="line"><span class="number">4</span>: <span class="number">9</span> &gt;= <span class="number">10</span></span><br><span class="line"></span><br><span class="line">Selection: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s correct!</span></span><br><span class="line"></span><br><span class="line">  |==============                                              |  <span class="number">24</span>%</span><br><span class="line"></span><br><span class="line">| Which <span class="keyword">of</span> the following evaluates <span class="keyword">to</span> <span class="literal">TRUE</span>?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: <span class="number">57</span> &lt; <span class="number">8</span></span><br><span class="line"><span class="number">2</span>: -<span class="number">6</span> &gt; -<span class="number">7</span></span><br><span class="line"><span class="number">3</span>: <span class="number">7</span> == <span class="number">9</span></span><br><span class="line"><span class="number">4</span>: <span class="number">9</span> &gt;= <span class="number">10</span></span><br><span class="line"></span><br><span class="line">Selection: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">| Keep up the great work!</span><br><span class="line"></span><br><span class="line">  |===============                                             |  <span class="number">25</span>%</span><br><span class="line"></span><br><span class="line">| The <span class="keyword">next</span> <span class="keyword">operator</span> we will discuss <span class="keyword">is</span> the <span class="comment">'not equals' operator</span></span><br><span class="line">| represented <span class="keyword">by</span> `!=`. <span class="keyword">Not</span> <span class="keyword">equals</span> tests whether two values are</span><br><span class="line">| unequal, so <span class="literal">TRUE</span> != <span class="literal">FALSE</span> evaluates <span class="keyword">to</span> <span class="literal">TRUE</span>. <span class="keyword">Like</span> the equality</span><br><span class="line">| <span class="keyword">operator</span>, `!=` can also be used <span class="keyword">with</span> numbers. <span class="keyword">Try</span> writing an</span><br><span class="line">| expression <span class="keyword">to</span> see <span class="keyword">if</span> <span class="number">5</span> <span class="keyword">is</span> <span class="keyword">not</span> equal <span class="keyword">to</span> <span class="number">7.</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="number">5</span>!=<span class="number">7</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| You are quite good my <span class="keyword">friend</span>!</span><br><span class="line"></span><br><span class="line">  |================                                            |  <span class="number">27</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">In</span> <span class="keyword">order</span> <span class="keyword">to</span> negate <span class="built_in">boolean</span> expressions you can use the <span class="keyword">NOT</span></span><br><span class="line">| <span class="keyword">operator</span>. An exclamation point `!` will cause !<span class="literal">TRUE</span> (say: <span class="keyword">not</span> <span class="literal">true</span>)</span><br><span class="line">| <span class="keyword">to</span> evaluate <span class="keyword">to</span> <span class="literal">FALSE</span> <span class="keyword">and</span> !<span class="literal">FALSE</span> (say: <span class="keyword">not</span> <span class="literal">false</span>) <span class="keyword">to</span> evaluate <span class="keyword">to</span></span><br><span class="line">| <span class="literal">TRUE</span>. <span class="keyword">Try</span> <span class="keyword">using</span> the <span class="keyword">NOT</span> <span class="keyword">operator</span> <span class="keyword">and</span> the <span class="keyword">equals</span> <span class="keyword">operator</span> <span class="keyword">to</span> find</span><br><span class="line">| the opposite <span class="keyword">of</span> whether <span class="number">5</span> <span class="keyword">is</span> equal <span class="keyword">to</span> <span class="number">7.</span></span><br><span class="line"></span><br><span class="line">&gt; !(<span class="number">5</span>==<span class="number">7</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| You<span class="comment">'re the best!</span></span><br><span class="line"></span><br><span class="line">  |==================                                          |  <span class="number">29</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Let</span><span class="comment">'s take a moment to review. The equals operator `==` tests</span></span><br><span class="line">| whether two <span class="built_in">boolean</span> values <span class="keyword">or</span> numbers are equal, the <span class="keyword">not</span> <span class="keyword">equals</span></span><br><span class="line">| <span class="keyword">operator</span> `!=` tests whether two <span class="built_in">boolean</span> values <span class="keyword">or</span> numbers are</span><br><span class="line">| unequal, <span class="keyword">and</span> the <span class="keyword">NOT</span> <span class="keyword">operator</span> `!` negates logical expressions so</span><br><span class="line">| that <span class="literal">TRUE</span> expressions become <span class="literal">FALSE</span> <span class="keyword">and</span> <span class="literal">FALSE</span> expressions become</span><br><span class="line">| <span class="literal">TRUE</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===================                                         |  <span class="number">31</span>%</span><br><span class="line"></span><br><span class="line">| Which <span class="keyword">of</span> the following evaluates <span class="keyword">to</span> <span class="literal">FALSE</span>?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: <span class="number">7</span> != <span class="number">8</span></span><br><span class="line"><span class="number">2</span>: !<span class="literal">FALSE</span></span><br><span class="line"><span class="number">3</span>: <span class="number">9</span> &lt; <span class="number">10</span></span><br><span class="line"><span class="number">4</span>: !(<span class="number">0</span> &gt;= -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s the answer I was looking for.</span></span><br><span class="line"></span><br><span class="line">  |====================                                        |  <span class="number">33</span>%</span><br><span class="line"></span><br><span class="line">| What <span class="keyword">do</span> you think the following expression will evaluate <span class="keyword">to</span>?: (<span class="literal">TRUE</span></span><br><span class="line">| != <span class="literal">FALSE</span>) == !(<span class="number">6</span> == <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: Can there be objective truth <span class="keyword">when</span> programming?</span><br><span class="line"><span class="number">2</span>: %&gt;%</span><br><span class="line"><span class="number">3</span>: <span class="literal">FALSE</span></span><br><span class="line"><span class="number">4</span>: <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">Selection: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">| All that practice <span class="keyword">is</span> paying <span class="keyword">off</span>!</span><br><span class="line"></span><br><span class="line">  |=====================                                       |  <span class="number">35</span>%</span><br><span class="line"></span><br><span class="line">| At some point you may need <span class="keyword">to</span> examine relationships between</span><br><span class="line">| multiple logical expressions. This <span class="keyword">is</span> <span class="keyword">where</span> the <span class="keyword">AND</span> <span class="keyword">operator</span> <span class="keyword">and</span></span><br><span class="line">| the <span class="keyword">OR</span> <span class="keyword">operator</span> come <span class="keyword">in</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |======================                                      |  <span class="number">37</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Let</span><span class="comment">'s look at how the AND operator works. There are two AND</span></span><br><span class="line">| operators <span class="keyword">in</span> R, `&amp;` <span class="keyword">and</span> `&amp;&amp;`. Both operators work similarly, <span class="keyword">if</span> the</span><br><span class="line">| right <span class="keyword">and</span> left operands <span class="keyword">of</span> <span class="keyword">AND</span> are both <span class="literal">TRUE</span> the entire expression</span><br><span class="line">| <span class="keyword">is</span> <span class="literal">TRUE</span>, otherwise it <span class="keyword">is</span> <span class="literal">FALSE</span>. <span class="keyword">For</span> example, <span class="literal">TRUE</span> &amp; <span class="literal">TRUE</span> evaluates</span><br><span class="line">| <span class="keyword">to</span> <span class="literal">TRUE</span>. <span class="keyword">Try</span> typing <span class="literal">FALSE</span> &amp; <span class="literal">FALSE</span> <span class="keyword">to</span> how it <span class="keyword">is</span> evaluated.</span><br><span class="line"></span><br><span class="line">&gt; <span class="literal">FALSE</span>&amp;<span class="literal">FALSE</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">FALSE</span></span><br><span class="line"></span><br><span class="line">| Excellent work!</span><br><span class="line"></span><br><span class="line">  |========================                                    |  <span class="number">39</span>%</span><br><span class="line"></span><br><span class="line">| You can use the `&amp;` <span class="keyword">operator</span> <span class="keyword">to</span> evaluate <span class="keyword">AND</span> across a vector. The</span><br><span class="line">| `&amp;&amp;` version <span class="keyword">of</span> <span class="keyword">AND</span> only evaluates the first member <span class="keyword">of</span> a vector.</span><br><span class="line">| <span class="keyword">Let</span><span class="comment">'s test both for practice. Type the expression TRUE &amp; c(TRUE,</span></span><br><span class="line">| <span class="literal">FALSE</span>, <span class="literal">FALSE</span>).</span><br><span class="line"></span><br><span class="line">&gt; <span class="literal">TRUE</span>&amp;c(<span class="literal">TRUE</span>,<span class="literal">FALSE</span>,<span class="literal">FALSE</span>)</span><br><span class="line">[<span class="number">1</span>]  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span></span><br><span class="line"></span><br><span class="line">| Great job!</span><br><span class="line"></span><br><span class="line">  |=========================                                   |  <span class="number">41</span>%</span><br><span class="line"></span><br><span class="line">| What happens <span class="keyword">in</span> this <span class="keyword">case</span> <span class="keyword">is</span> that the left operand `<span class="literal">TRUE</span>` <span class="keyword">is</span></span><br><span class="line">| recycled across every element <span class="keyword">in</span> the vector <span class="keyword">of</span> the right operand.</span><br><span class="line">| This <span class="keyword">is</span> the equivalent statement <span class="keyword">as</span> c(<span class="literal">TRUE</span>, <span class="literal">TRUE</span>, <span class="literal">TRUE</span>) &amp; c(<span class="literal">TRUE</span>,</span><br><span class="line">| <span class="literal">FALSE</span>, <span class="literal">FALSE</span>).</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==========================                                  |  <span class="number">43</span>%</span><br><span class="line"></span><br><span class="line">| Now we<span class="comment">'ll type the same expression except we'll use the `&amp;&amp;`</span></span><br><span class="line">| <span class="keyword">operator</span>. Type the expression <span class="literal">TRUE</span> &amp;&amp; c(<span class="literal">TRUE</span>, <span class="literal">FALSE</span>, <span class="literal">FALSE</span>).</span><br><span class="line"></span><br><span class="line">&gt; <span class="literal">TRUE</span>&amp;&amp;c(<span class="literal">TRUE</span>,<span class="literal">FALSE</span>,<span class="literal">FALSE</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| All that hard work <span class="keyword">is</span> paying <span class="keyword">off</span>!</span><br><span class="line"></span><br><span class="line">  |===========================                                 |  <span class="number">45</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">In</span> this <span class="keyword">case</span>, the left operand <span class="keyword">is</span> only evaluated <span class="keyword">with</span> the first</span><br><span class="line">| member <span class="keyword">of</span> the right operand (the vector). The rest <span class="keyword">of</span> the elements</span><br><span class="line">| <span class="keyword">in</span> the vector aren<span class="comment">'t evaluated at all in this expression.</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |============================                                |  <span class="number">47</span>%</span><br><span class="line"></span><br><span class="line">| The <span class="keyword">OR</span> <span class="keyword">operator</span> follows a similar <span class="keyword">set</span> <span class="keyword">of</span> rules. The `|` version <span class="keyword">of</span></span><br><span class="line">| <span class="keyword">OR</span> evaluates <span class="keyword">OR</span> across an entire vector, <span class="keyword">while</span> the `||` version <span class="keyword">of</span></span><br><span class="line">| <span class="keyword">OR</span> only evaluates the first member <span class="keyword">of</span> a vector.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=============================                               |  <span class="number">49</span>%</span><br><span class="line"></span><br><span class="line">| An expression <span class="keyword">using</span> the <span class="keyword">OR</span> <span class="keyword">operator</span> will evaluate <span class="keyword">to</span> <span class="literal">TRUE</span> <span class="keyword">if</span> the</span><br><span class="line">| left operand <span class="keyword">or</span> the right operand <span class="keyword">is</span> <span class="literal">TRUE</span>. <span class="keyword">If</span> both are <span class="literal">TRUE</span>, the</span><br><span class="line">| expression will evaluate <span class="keyword">to</span> <span class="literal">TRUE</span>, however <span class="keyword">if</span> neither are <span class="literal">TRUE</span>, <span class="keyword">then</span></span><br><span class="line">| the expression will be <span class="literal">FALSE</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===============================                             |  <span class="number">51</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Let</span><span class="comment">'s test out the vectorized version of the OR operator. Type the</span></span><br><span class="line">| expression <span class="literal">TRUE</span> | c(<span class="literal">TRUE</span>, <span class="literal">FALSE</span>, <span class="literal">FALSE</span>).</span><br><span class="line"></span><br><span class="line">&gt; <span class="literal">TRUE</span>|c(<span class="literal">TRUE</span>,<span class="literal">FALSE</span>,<span class="literal">FALSE</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span> <span class="literal">TRUE</span> <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| Great job!</span><br><span class="line"></span><br><span class="line">  |================================                            |  <span class="number">53</span>%</span><br><span class="line"></span><br><span class="line">| Now <span class="keyword">let</span><span class="comment">'s try out the non-vectorized version of the OR operator.</span></span><br><span class="line">| Type the expression <span class="literal">TRUE</span> || c(<span class="literal">TRUE</span>, <span class="literal">FALSE</span>, <span class="literal">FALSE</span>).</span><br><span class="line"></span><br><span class="line">&gt; <span class="literal">TRUE</span>||c(<span class="literal">TRUE</span>,<span class="literal">FALSE</span>,<span class="literal">FALSE</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| Perseverance, that<span class="comment">'s the answer.</span></span><br><span class="line"></span><br><span class="line">  |=================================                           |  <span class="number">55</span>%</span><br><span class="line"></span><br><span class="line">| Logical operators can be chained together just <span class="keyword">like</span> arithmetic</span><br><span class="line">| operators. The expressions: `<span class="number">6</span> != <span class="number">10</span> &amp;&amp; <span class="literal">FALSE</span> &amp;&amp; <span class="number">1</span> &gt;= <span class="number">2</span>` <span class="keyword">or</span> `<span class="literal">TRUE</span></span><br><span class="line">| || <span class="number">5</span> &lt; <span class="number">9.3</span> || <span class="literal">FALSE</span>` are perfectly normal <span class="keyword">to</span> see.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==================================                          |  <span class="number">57</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">As</span> you may recall, arithmetic has an <span class="keyword">order</span> <span class="keyword">of</span> operations <span class="keyword">and</span> so <span class="keyword">do</span></span><br><span class="line">| logical expressions. All <span class="keyword">AND</span> operators are evaluated before <span class="keyword">OR</span></span><br><span class="line">| operators. <span class="keyword">Let</span><span class="comment">'s look at an example of an ambiguous case. Type: 5 &gt;</span></span><br><span class="line">| <span class="number">8</span> || <span class="number">6</span> != <span class="number">8</span> &amp;&amp; <span class="number">4</span> &gt; <span class="number">3.9</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="number">5</span> &gt; <span class="number">8</span> || <span class="number">6</span> != <span class="number">8</span> &amp;&amp; <span class="number">4</span> &gt; <span class="number">3.9</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| You are quite good my <span class="keyword">friend</span>!</span><br><span class="line"></span><br><span class="line">  |===================================                         |  <span class="number">59</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Let</span><span class="comment">'s walk through the order of operations in the above case. First</span></span><br><span class="line">| the left <span class="keyword">and</span> right operands <span class="keyword">of</span> the <span class="keyword">AND</span> <span class="keyword">operator</span> are evaluated. <span class="number">6</span> <span class="keyword">is</span></span><br><span class="line">| <span class="keyword">not</span> equal <span class="number">8</span>, <span class="number">4</span> <span class="keyword">is</span> greater than <span class="number">3.9</span>, therefore both operands are</span><br><span class="line">| <span class="literal">TRUE</span> so the resulting expression `<span class="literal">TRUE</span> &amp;&amp; <span class="literal">TRUE</span>` evaluates <span class="keyword">to</span> <span class="literal">TRUE</span>.</span><br><span class="line">| <span class="keyword">Then</span> the left operand <span class="keyword">of</span> the <span class="keyword">OR</span> <span class="keyword">operator</span> <span class="keyword">is</span> evaluated: <span class="number">5</span> <span class="keyword">is</span> <span class="keyword">not</span></span><br><span class="line">| greater than <span class="number">8</span> so the entire expression <span class="keyword">is</span> reduced <span class="keyword">to</span> <span class="literal">FALSE</span> ||</span><br><span class="line">| <span class="literal">TRUE</span>. Since the right operand <span class="keyword">of</span> this expression <span class="keyword">is</span> <span class="literal">TRUE</span> the entire</span><br><span class="line">| expression evaluates <span class="keyword">to</span> <span class="literal">TRUE</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |====================================                        |  <span class="number">61</span>%</span><br><span class="line"></span><br><span class="line">| Which one <span class="keyword">of</span> the following expressions evaluates <span class="keyword">to</span> <span class="literal">TRUE</span>?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: <span class="number">99.99</span> &gt; <span class="number">100</span> || <span class="number">45</span> &lt; <span class="number">7.3</span> || <span class="number">4</span> != <span class="number">4.0</span></span><br><span class="line"><span class="number">2</span>: <span class="literal">TRUE</span> &amp;&amp; <span class="literal">FALSE</span> || <span class="number">9</span> &gt;= <span class="number">4</span> &amp;&amp; <span class="number">3</span> &lt; <span class="number">6</span></span><br><span class="line"><span class="number">3</span>: <span class="literal">FALSE</span> || <span class="literal">TRUE</span> &amp;&amp; <span class="literal">FALSE</span></span><br><span class="line"><span class="number">4</span>: <span class="literal">TRUE</span> &amp;&amp; <span class="number">62</span> &lt; <span class="number">62</span> &amp;&amp; <span class="number">44</span> &gt;= <span class="number">44</span></span><br><span class="line"></span><br><span class="line">Selection: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">| All that hard work <span class="keyword">is</span> paying <span class="keyword">off</span>!</span><br><span class="line"></span><br><span class="line">  |======================================                      |  <span class="number">63</span>%</span><br><span class="line"></span><br><span class="line">| Which one <span class="keyword">of</span> the following expressions evaluates <span class="keyword">to</span> <span class="literal">FALSE</span>?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: !(<span class="number">8</span> &gt; <span class="number">4</span>) ||  <span class="number">5</span> == <span class="number">5.0</span> &amp;&amp; <span class="number">7.8</span> &gt;= <span class="number">7.79</span></span><br><span class="line"><span class="number">2</span>: <span class="literal">FALSE</span> || <span class="literal">TRUE</span> &amp;&amp; <span class="number">6</span> != <span class="number">4</span> || <span class="number">9</span> &gt; <span class="number">4</span></span><br><span class="line"><span class="number">3</span>: <span class="number">6</span> &gt;= -<span class="number">9</span> &amp;&amp; !(<span class="number">6</span> &gt; <span class="number">7</span>) &amp;&amp; !(!<span class="literal">TRUE</span>)</span><br><span class="line"><span class="number">4</span>: <span class="literal">FALSE</span> &amp;&amp; <span class="number">6</span> &gt;= <span class="number">6</span> || <span class="number">7</span> &gt;= <span class="number">8</span> || <span class="number">50</span> &lt;= <span class="number">49.5</span></span><br><span class="line"></span><br><span class="line">Selection: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">| Excellent work!</span><br><span class="line"></span><br><span class="line">  |=======================================                     |  <span class="number">65</span>%</span><br><span class="line"></span><br><span class="line">| Now that you<span class="comment">'re familiar with R's logical operators you can take</span></span><br><span class="line">| advantage <span class="keyword">of</span> a few functions that R provides <span class="keyword">for</span> dealing <span class="keyword">with</span></span><br><span class="line">| logical expressions.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |========================================                    |  <span class="number">67</span>%</span><br><span class="line"></span><br><span class="line">| The <span class="keyword">function</span> <span class="keyword">isTRUE</span>() takes one argument. <span class="keyword">If</span> that argument</span><br><span class="line">| evaluates <span class="keyword">to</span> <span class="literal">TRUE</span>, the <span class="keyword">function</span> will <span class="keyword">return</span> <span class="literal">TRUE</span>. Otherwise, the</span><br><span class="line">| <span class="keyword">function</span> will <span class="keyword">return</span> <span class="literal">FALSE</span>. <span class="keyword">Try</span> <span class="keyword">using</span> this <span class="keyword">function</span> <span class="keyword">by</span> typing:</span><br><span class="line">| <span class="keyword">isTRUE</span>(<span class="number">6</span> &gt; <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">isTRUE</span>(<span class="number">6</span>&gt;<span class="number">4</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| You are really <span class="keyword">on</span> a roll!</span><br><span class="line"></span><br><span class="line">  |=========================================                   |  <span class="number">69</span>%</span><br><span class="line"></span><br><span class="line">| Which <span class="keyword">of</span> the following evaluates <span class="keyword">to</span> <span class="literal">TRUE</span>?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: <span class="keyword">isTRUE</span>(<span class="number">3</span>)</span><br><span class="line"><span class="number">2</span>: <span class="keyword">isTRUE</span>(NA)</span><br><span class="line"><span class="number">3</span>: <span class="keyword">isTRUE</span>(!<span class="literal">TRUE</span>)</span><br><span class="line"><span class="number">4</span>: !<span class="keyword">isTRUE</span>(<span class="number">4</span> &lt; <span class="number">3</span>)</span><br><span class="line"><span class="number">5</span>: !<span class="keyword">isTRUE</span>(<span class="number">8</span> != <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">| Excellent work!</span><br><span class="line"></span><br><span class="line">  |==========================================                  |  <span class="number">71</span>%</span><br><span class="line"></span><br><span class="line">| The <span class="keyword">function</span> identical() will <span class="keyword">return</span> <span class="literal">TRUE</span> <span class="keyword">if</span> the two R objects</span><br><span class="line">| passed <span class="keyword">to</span> it <span class="keyword">as</span> arguments are identical. <span class="keyword">Try</span> out the identical()</span><br><span class="line">| <span class="keyword">function</span> <span class="keyword">by</span> typing: identical(<span class="comment">'twins', 'twins')</span></span><br><span class="line"></span><br><span class="line">&gt; identical(<span class="comment">'twins','twins')</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| Great job!</span><br><span class="line"></span><br><span class="line">  |============================================                |  <span class="number">73</span>%</span><br><span class="line"></span><br><span class="line">| Which <span class="keyword">of</span> the following evaluates <span class="keyword">to</span> <span class="literal">TRUE</span>?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: identical(<span class="number">4</span>, <span class="number">3.1</span>)</span><br><span class="line"><span class="number">2</span>: identical(<span class="comment">'hello', 'Hello')</span></span><br><span class="line"><span class="number">3</span>: identical(<span class="number">5</span> &gt; <span class="number">4</span>, <span class="number">3</span> &lt; <span class="number">3.1</span>)</span><br><span class="line"><span class="number">4</span>: !identical(<span class="number">7</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">| Keep working <span class="keyword">like</span> that <span class="keyword">and</span> you<span class="comment">'ll get there!</span></span><br><span class="line"></span><br><span class="line">  |=============================================               |  <span class="number">75</span>%</span><br><span class="line"></span><br><span class="line">| You should also be aware <span class="keyword">of</span> the <span class="keyword">xor</span>() <span class="keyword">function</span>, which takes two</span><br><span class="line">| arguments. The <span class="keyword">xor</span>() <span class="keyword">function</span> stands <span class="keyword">for</span> exclusive <span class="keyword">OR</span>. <span class="keyword">If</span> one</span><br><span class="line">| argument evaluates <span class="keyword">to</span> <span class="literal">TRUE</span> <span class="keyword">and</span> one argument evaluates <span class="keyword">to</span> <span class="literal">FALSE</span>,</span><br><span class="line">| <span class="keyword">then</span> this <span class="keyword">function</span> will <span class="keyword">return</span> <span class="literal">TRUE</span>, otherwise it will <span class="keyword">return</span></span><br><span class="line">| <span class="literal">FALSE</span>. <span class="keyword">Try</span> out the <span class="keyword">xor</span>() <span class="keyword">function</span> <span class="keyword">by</span> typing: <span class="keyword">xor</span>(<span class="number">5</span> == <span class="number">6</span>, !<span class="literal">FALSE</span>)</span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">xor</span>(<span class="number">5</span>==<span class="number">6</span>,!<span class="literal">FALSE</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| Perseverance, that<span class="comment">'s the answer.</span></span><br><span class="line"></span><br><span class="line">  |==============================================              |  <span class="number">76</span>%</span><br><span class="line"></span><br><span class="line">| <span class="number">5</span> == <span class="number">6</span> evaluates <span class="keyword">to</span> <span class="literal">FALSE</span>, !<span class="literal">FALSE</span> evaluates <span class="keyword">to</span> <span class="literal">TRUE</span>, so <span class="keyword">xor</span>(<span class="literal">FALSE</span>,</span><br><span class="line">| <span class="literal">TRUE</span>) evaluates <span class="keyword">to</span> <span class="literal">TRUE</span>. <span class="keyword">On</span> the other hand <span class="keyword">if</span> the first argument</span><br><span class="line">| was changed <span class="keyword">to</span> <span class="number">5</span> == <span class="number">5</span> <span class="keyword">and</span> the second argument was unchanged <span class="keyword">then</span></span><br><span class="line">| both arguments would have been <span class="literal">TRUE</span>, so <span class="keyword">xor</span>(<span class="literal">TRUE</span>, <span class="literal">TRUE</span>) would have</span><br><span class="line">| evaluated <span class="keyword">to</span> <span class="literal">FALSE</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===============================================             |  <span class="number">78</span>%</span><br><span class="line"></span><br><span class="line">| Which <span class="keyword">of</span> the following evaluates <span class="keyword">to</span> <span class="literal">FALSE</span>?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: <span class="keyword">xor</span>(!<span class="keyword">isTRUE</span>(<span class="literal">TRUE</span>), <span class="number">6</span> &gt; -<span class="number">1</span>)</span><br><span class="line"><span class="number">2</span>: <span class="keyword">xor</span>(!!<span class="literal">TRUE</span>, !!<span class="literal">FALSE</span>)</span><br><span class="line"><span class="number">3</span>: <span class="keyword">xor</span>(<span class="number">4</span> &gt;= <span class="number">9</span>, <span class="number">8</span> != <span class="number">8.0</span>)</span><br><span class="line"><span class="number">4</span>: <span class="keyword">xor</span>(identical(<span class="keyword">xor</span>, <span class="comment">'xor'), 7 == 7.0)</span></span><br><span class="line"></span><br><span class="line">Selection: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">| You are doing so well!</span><br><span class="line"></span><br><span class="line">  |================================================            |  <span class="number">80</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">For</span> the <span class="keyword">next</span> few questions, we<span class="comment">'re going to need to create a vector</span></span><br><span class="line">| <span class="keyword">of</span> integers called ints. Create this vector <span class="keyword">by</span> typing: ints &lt;-</span><br><span class="line">| sample(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">&gt; ints&lt;-sample(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s the answer I was looking for.</span></span><br><span class="line"></span><br><span class="line">  |=================================================           |  <span class="number">82</span>%</span><br><span class="line"></span><br><span class="line">| Now simply display the contents <span class="keyword">of</span> ints.</span><br><span class="line"></span><br><span class="line">&gt; ints</span><br><span class="line"> [<span class="number">1</span>]  <span class="number">9</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">1</span>  <span class="number">6</span>  <span class="number">5</span>  <span class="number">4</span>  <span class="number">8</span> <span class="number">10</span>  <span class="number">7</span></span><br><span class="line"></span><br><span class="line">| You are doing so well!</span><br><span class="line"></span><br><span class="line">  |===================================================         |  <span class="number">84</span>%</span><br><span class="line"></span><br><span class="line">| The vector `ints` <span class="keyword">is</span> a random sampling <span class="keyword">of</span> integers <span class="keyword">from</span> <span class="number">1</span> <span class="keyword">to</span> <span class="number">10</span></span><br><span class="line">| without replacement. <span class="keyword">Let</span><span class="comment">'s say we wanted to ask some logical</span></span><br><span class="line">| questions about contents <span class="keyword">of</span> ints. <span class="keyword">If</span> we type ints &gt; <span class="number">5</span>, we will <span class="keyword">get</span></span><br><span class="line">| a logical vector corresponding <span class="keyword">to</span> whether <span class="keyword">each</span> element <span class="keyword">of</span> ints <span class="keyword">is</span></span><br><span class="line">| greater than <span class="number">5.</span> <span class="keyword">Try</span> typing: ints &gt; <span class="number">5</span></span><br><span class="line"></span><br><span class="line">&gt; ints&gt;<span class="number">5</span></span><br><span class="line"> [<span class="number">1</span>]  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| Keep working <span class="keyword">like</span> that <span class="keyword">and</span> you<span class="comment">'ll get there!</span></span><br><span class="line"></span><br><span class="line">  |====================================================        |  <span class="number">86</span>%</span><br><span class="line"></span><br><span class="line">| We can use the resulting logical vector <span class="keyword">to</span> ask other questions</span><br><span class="line">| about ints. The which() <span class="keyword">function</span> takes a logical vector <span class="keyword">as</span> an</span><br><span class="line">| argument <span class="keyword">and</span> returns the indices <span class="keyword">of</span> the vector that are <span class="literal">TRUE</span>. <span class="keyword">For</span></span><br><span class="line">| example which(c(<span class="literal">TRUE</span>, <span class="literal">FALSE</span>, <span class="literal">TRUE</span>)) would <span class="keyword">return</span> the vector c(<span class="number">1</span>,</span><br><span class="line">| <span class="number">3</span>).</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=====================================================       |  <span class="number">88</span>%</span><br><span class="line"></span><br><span class="line">| Use the which() <span class="keyword">function</span> <span class="keyword">to</span> find the indices <span class="keyword">of</span> ints that are</span><br><span class="line">| greater than <span class="number">7.</span></span><br><span class="line"></span><br><span class="line">&gt; which(ints&gt;<span class="number">7</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">8</span> <span class="number">9</span></span><br><span class="line"></span><br><span class="line">| Nice work!</span><br><span class="line"></span><br><span class="line">  |======================================================      |  <span class="number">90</span>%</span><br><span class="line"></span><br><span class="line">| Which <span class="keyword">of</span> the following commands would produce the indices <span class="keyword">of</span> the</span><br><span class="line">| elements <span class="keyword">in</span> ints that are less than <span class="keyword">or</span> equal <span class="keyword">to</span> <span class="number">2</span>?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: which(ints &lt;= <span class="number">2</span>)</span><br><span class="line"><span class="number">2</span>: ints &lt;= <span class="number">2</span></span><br><span class="line"><span class="number">3</span>: which(ints &lt; <span class="number">2</span>)</span><br><span class="line"><span class="number">4</span>: ints &lt; <span class="number">2</span></span><br><span class="line"></span><br><span class="line">Selection: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s the answer I was looking for.</span></span><br><span class="line"></span><br><span class="line">  |=======================================================     |  <span class="number">92</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Like</span> the which() <span class="keyword">function</span>, the functions any() <span class="keyword">and</span> all() <span class="keyword">take</span></span><br><span class="line">| logical vectors <span class="keyword">as</span> their argument. The any() <span class="keyword">function</span> will <span class="keyword">return</span></span><br><span class="line">| <span class="literal">TRUE</span> <span class="keyword">if</span> one <span class="keyword">or</span> more <span class="keyword">of</span> the elements <span class="keyword">in</span> the logical vector <span class="keyword">is</span> <span class="literal">TRUE</span>.</span><br><span class="line">| The all() <span class="keyword">function</span> will <span class="keyword">return</span> <span class="literal">TRUE</span> <span class="keyword">if</span> every element <span class="keyword">in</span> the logical</span><br><span class="line">| vector <span class="keyword">is</span> <span class="literal">TRUE</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |========================================================    |  <span class="number">94</span>%</span><br><span class="line"></span><br><span class="line">| Use the any() <span class="keyword">function</span> <span class="keyword">to</span> see <span class="keyword">if</span> any <span class="keyword">of</span> the elements <span class="keyword">of</span> ints are</span><br><span class="line">| less than zero.</span><br><span class="line"></span><br><span class="line">&gt; any(ints&lt;<span class="number">0</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">FALSE</span></span><br><span class="line"></span><br><span class="line">| Great job!</span><br><span class="line"></span><br><span class="line">  |==========================================================  |  <span class="number">96</span>%</span><br><span class="line"></span><br><span class="line">| Use the all() <span class="keyword">function</span> <span class="keyword">to</span> see <span class="keyword">if</span> all <span class="keyword">of</span> the elements <span class="keyword">of</span> ints are</span><br><span class="line">| greater than zero.</span><br><span class="line"></span><br><span class="line">&gt; all(ints&gt;<span class="number">0</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| Nice work!</span><br><span class="line"></span><br><span class="line">  |=========================================================== |  <span class="number">98</span>%</span><br><span class="line"></span><br><span class="line">| Which <span class="keyword">of</span> the following evaluates <span class="keyword">to</span> <span class="literal">TRUE</span>?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: all(c(<span class="literal">TRUE</span>, <span class="literal">FALSE</span>, <span class="literal">TRUE</span>))</span><br><span class="line"><span class="number">2</span>: any(ints == <span class="number">10</span>)</span><br><span class="line"><span class="number">3</span>: all(ints == <span class="number">10</span>)</span><br><span class="line"><span class="number">4</span>: any(ints == <span class="number">2.5</span>)</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s a job well done!</span></span><br><span class="line"></span><br><span class="line">  |============================================================| <span class="number">100</span>%</span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s all for this introduction to logic in R. If you really want</span></span><br><span class="line">| <span class="keyword">to</span> see what you can <span class="keyword">do</span> <span class="keyword">with</span> logic, check out the control flow</span><br><span class="line">| lesson!</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">| Are you currently enrolled <span class="keyword">in</span> the Coursera course associated <span class="keyword">with</span></span><br><span class="line">| this lesson?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: Yes</span><br><span class="line"><span class="number">2</span>: No</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">| You<span class="comment">'ve reached the end of this lesson! Returning to the main</span></span><br><span class="line">| menu...</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">| Please choose a course, ]]>
    </summary>
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[swirl学习之七——Matrices and Data Frames]]></title>
    <link href="http://yoursite.com/2015/05/08/swirl%E5%AD%A6%E4%B9%A07/"/>
    <id>http://yoursite.com/2015/05/08/swirl学习7/</id>
    <published>2015-05-07T18:05:48.000Z</published>
    <updated>2015-05-07T18:07:44.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">| Please choose a course, <span class="keyword">or</span> type <span class="number">0</span> <span class="keyword">to</span> <span class="keyword">exit</span> swirl.</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: R Programming</span><br><span class="line"><span class="number">2</span>: <span class="keyword">Take</span> <span class="keyword">me</span> <span class="keyword">to</span> the swirl course repository!</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">| Please choose a lesson, <span class="keyword">or</span> type <span class="number">0</span> <span class="keyword">to</span> <span class="keyword">return</span> <span class="keyword">to</span> course menu.</span><br><span class="line"></span><br><span class="line"> <span class="number">1</span>: Basic Building Blocks      <span class="number">2</span>: Workspace <span class="keyword">and</span> Files     </span><br><span class="line"> <span class="number">3</span>: Sequences <span class="keyword">of</span> Numbers       <span class="number">4</span>: Vectors                 </span><br><span class="line"> <span class="number">5</span>: Missing Values             <span class="number">6</span>: Subsetting Vectors      </span><br><span class="line"> <span class="number">7</span>: Matrices <span class="keyword">and</span> Data Frames   <span class="number">8</span>: Logic                   </span><br><span class="line"> <span class="number">9</span>: Functions                 <span class="number">10</span>: lapply <span class="keyword">and</span> sapply       </span><br><span class="line"><span class="number">11</span>: vapply <span class="keyword">and</span> tapply         <span class="number">12</span>: Looking at Data         </span><br><span class="line"><span class="number">13</span>: Simulation                <span class="number">14</span>: Dates <span class="keyword">and</span> Times         </span><br><span class="line"><span class="number">15</span>: Base Graphics             </span><br><span class="line"></span><br><span class="line">Selection: <span class="number">7</span></span><br><span class="line"></span><br><span class="line">  |                                                            |   <span class="number">0</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">In</span> this lesson, we<span class="comment">'ll cover matrices and data frames. Both</span></span><br><span class="line">| represent <span class="comment">'rectangular' data types, meaning that they are used to</span></span><br><span class="line">| store tabular data, <span class="keyword">with</span> rows <span class="keyword">and</span> columns.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==                                                          |   <span class="number">3</span>%</span><br><span class="line"></span><br><span class="line">| The main difference, <span class="keyword">as</span> you<span class="comment">'ll see, is that matrices can only</span></span><br><span class="line">| contain a <span class="built_in">single</span> <span class="keyword">class</span> <span class="keyword">of</span> data, <span class="keyword">while</span> data frames can consist <span class="keyword">of</span></span><br><span class="line">| many different classes <span class="keyword">of</span> data.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===                                                         |   <span class="number">6</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Let</span><span class="comment">'s create a vector containing the numbers 1 through 20 using the</span></span><br><span class="line">| `:` <span class="keyword">operator</span>. Store the result <span class="keyword">in</span> a variable called my_vector.</span><br><span class="line"></span><br><span class="line">&gt; my_vector&lt;-<span class="number">1</span>:<span class="number">20</span></span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s the answer I was looking for.</span></span><br><span class="line"></span><br><span class="line">  |=====                                                       |   <span class="number">9</span>%</span><br><span class="line"></span><br><span class="line">| View the contents <span class="keyword">of</span> the vector you just created.</span><br><span class="line"></span><br><span class="line">&gt; my_vector</span><br><span class="line"> [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line">| Excellent job!</span><br><span class="line"></span><br><span class="line">  |=======                                                     |  <span class="number">11</span>%</span><br><span class="line"></span><br><span class="line">| The <span class="keyword">dim</span>() <span class="keyword">function</span> tells us the <span class="comment">'dimensions' of an object. What</span></span><br><span class="line">| happens <span class="keyword">if</span> we <span class="keyword">do</span> <span class="keyword">dim</span>(my_vector)? Give it a <span class="keyword">try</span>.</span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">dim</span>(my_vector)</span><br><span class="line">NULL</span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s correct!</span></span><br><span class="line"></span><br><span class="line">  |=========                                                   |  <span class="number">14</span>%</span><br><span class="line"></span><br><span class="line">| Clearly, that<span class="comment">'s not very helpful! Since my_vector is a vector, it</span></span><br><span class="line">| doesn<span class="comment">'t have a `dim` attribute (so it's just NULL), but we can find</span></span><br><span class="line">| its length <span class="keyword">using</span> the length() <span class="keyword">function</span>. <span class="keyword">Try</span> that now.</span><br><span class="line"></span><br><span class="line">&gt; length(my_vector)</span><br><span class="line">[<span class="number">1</span>] <span class="number">20</span></span><br><span class="line"></span><br><span class="line">| Excellent job!</span><br><span class="line"></span><br><span class="line">  |==========                                                  |  <span class="number">17</span>%</span><br><span class="line"></span><br><span class="line">| Ah! That<span class="comment">'s what we wanted. But, what happens if we give my_vector a</span></span><br><span class="line">| `<span class="keyword">dim</span>` attribute? <span class="keyword">Let</span><span class="comment">'s give it a try. Type dim(my_vector) <span class="xmlDocTag">&lt;- c(4,</span><br><span class="line">| 5).</span><br><span class="line"></span><br><span class="line">&gt;</span> dim(my_vector)<span class="xmlDocTag">&lt;-c(4,5)</span><br><span class="line"></span><br><span class="line">| Great job!</span><br><span class="line"></span><br><span class="line">  |============                                                |  20%</span><br><span class="line"></span><br><span class="line">| It's okay if that last command seemed a little strange to you. It</span><br><span class="line">| should! The dim() function allows you to get OR set the `dim`</span><br><span class="line">| attribute for an R object. In this case, we assigned the value c(4,</span><br><span class="line">| 5) to the `dim` attribute of my_vector.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==============                                              |  23%</span><br><span class="line"></span><br><span class="line">| Use dim(my_vector) to confirm that we've set the `dim` attribute</span><br><span class="line">| correctly.</span><br><span class="line"></span><br><span class="line">&gt;</span> dim(my_vector)</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">4</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line">| All that practice <span class="keyword">is</span> paying <span class="keyword">off</span>!</span><br><span class="line"></span><br><span class="line">  |===============                                             |  <span class="number">26</span>%</span><br><span class="line"></span><br><span class="line">| Another way <span class="keyword">to</span> see this <span class="keyword">is</span> <span class="keyword">by</span> calling the attributes() <span class="keyword">function</span> <span class="keyword">on</span></span><br><span class="line">| my_vector. <span class="keyword">Try</span> it now.</span><br><span class="line"></span><br><span class="line">&gt; attributes(my_vector)</span><br><span class="line">$<span class="keyword">dim</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">4</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">| Keep up the great work!</span><br><span class="line"></span><br><span class="line">  |=================                                           |  <span class="number">29</span>%</span><br><span class="line"></span><br><span class="line">| Just <span class="keyword">like</span> <span class="keyword">in</span> math <span class="keyword">class</span>, <span class="keyword">when</span> dealing <span class="keyword">with</span> a <span class="number">2</span>-dimensional <span class="built_in">object</span></span><br><span class="line">| (think rectangular table), the first number <span class="keyword">is</span> the number <span class="keyword">of</span> rows</span><br><span class="line">| <span class="keyword">and</span> the second <span class="keyword">is</span> the number <span class="keyword">of</span> columns. Therefore, we just gave</span><br><span class="line">| my_vector <span class="number">4</span> rows <span class="keyword">and</span> <span class="number">5</span> columns.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===================                                         |  <span class="number">31</span>%</span><br><span class="line"></span><br><span class="line">| But, wait! That doesn<span class="comment">'t sound like a vector any more. Well, it's</span></span><br><span class="line">| <span class="keyword">not</span>. Now it<span class="comment">'s a matrix. View the contents of my_vector now to see</span></span><br><span class="line">| what it looks <span class="keyword">like</span>.</span><br><span class="line"></span><br><span class="line">&gt; my_vector</span><br><span class="line">     [,<span class="number">1</span>] [,<span class="number">2</span>] [,<span class="number">3</span>] [,<span class="number">4</span>] [,<span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>,]    <span class="number">1</span>    <span class="number">5</span>    <span class="number">9</span>   <span class="number">13</span>   <span class="number">17</span></span><br><span class="line">[<span class="number">2</span>,]    <span class="number">2</span>    <span class="number">6</span>   <span class="number">10</span>   <span class="number">14</span>   <span class="number">18</span></span><br><span class="line">[<span class="number">3</span>,]    <span class="number">3</span>    <span class="number">7</span>   <span class="number">11</span>   <span class="number">15</span>   <span class="number">19</span></span><br><span class="line">[<span class="number">4</span>,]    <span class="number">4</span>    <span class="number">8</span>   <span class="number">12</span>   <span class="number">16</span>   <span class="number">20</span></span><br><span class="line"></span><br><span class="line">| All that practice <span class="keyword">is</span> paying <span class="keyword">off</span>!</span><br><span class="line"></span><br><span class="line">  |=====================                                       |  <span class="number">34</span>%</span><br><span class="line"></span><br><span class="line">| Now, <span class="keyword">let</span><span class="comment">'s confirm it's actually a matrix by using the class()</span></span><br><span class="line">| <span class="keyword">function</span>. Type <span class="keyword">class</span>(my_vector) <span class="keyword">to</span> see what I mean.</span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">class</span>(my_vector)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"matrix"</span></span><br><span class="line"></span><br><span class="line">| You<span class="comment">'re the best!</span></span><br><span class="line"></span><br><span class="line">  |======================                                      |  <span class="number">37</span>%</span><br><span class="line"></span><br><span class="line">| Sure enough, my_vector <span class="keyword">is</span> now a matrix. We should store it <span class="keyword">in</span> a <span class="keyword">new</span></span><br><span class="line">| variable that helps us remember what it <span class="keyword">is</span>. Store the value <span class="keyword">of</span></span><br><span class="line">| my_vector <span class="keyword">in</span> a <span class="keyword">new</span> variable called my_matrix.</span><br><span class="line"></span><br><span class="line">&gt; my_matrix&lt;-my_vector</span><br><span class="line"></span><br><span class="line">| Keep up the great work!</span><br><span class="line"></span><br><span class="line">  |========================                                    |  <span class="number">40</span>%</span><br><span class="line"></span><br><span class="line">| The example that we<span class="comment">'ve used so far was meant to illustrate the</span></span><br><span class="line">| point that a matrix <span class="keyword">is</span> simply an atomic vector <span class="keyword">with</span> a dimension</span><br><span class="line">| attribute. A more direct method <span class="keyword">of</span> creating the same matrix uses</span><br><span class="line">| the matrix() <span class="keyword">function</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==========================                                  |  <span class="number">43</span>%</span><br><span class="line"></span><br><span class="line">| Bring up the help file <span class="keyword">for</span> the matrix() <span class="keyword">function</span> now <span class="keyword">using</span> the `?`</span><br><span class="line">| <span class="keyword">function</span>.</span><br><span class="line"></span><br><span class="line">&gt; ?matrix</span><br><span class="line"></span><br><span class="line">| Perseverance, that<span class="comment">'s the answer.</span></span><br><span class="line"></span><br><span class="line">  |===========================                                 |  <span class="number">46</span>%</span><br><span class="line"></span><br><span class="line">| Now, look at the documentation <span class="keyword">for</span> the matrix <span class="keyword">function</span> <span class="keyword">and</span> see <span class="keyword">if</span></span><br><span class="line">| you can figure out how <span class="keyword">to</span> create a matrix containing the same</span><br><span class="line">| numbers (<span class="number">1</span>-<span class="number">20</span>) <span class="keyword">and</span> dimensions (<span class="number">4</span> rows, <span class="number">5</span> columns) <span class="keyword">by</span> calling the</span><br><span class="line">| matrix() <span class="keyword">function</span>. Store the result <span class="keyword">in</span> a variable called</span><br><span class="line">| my_matrix2.</span><br><span class="line"></span><br><span class="line">&gt; my_matrix2&lt;-matrix(<span class="number">1</span>:<span class="number">20</span>,nrow=<span class="number">4</span>,ncol=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s a job well done!</span></span><br><span class="line"></span><br><span class="line">  |=============================                               |  <span class="number">49</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Finally</span>, <span class="keyword">let</span><span class="comment">'s confirm that my_matrix and my_matrix2 are actually</span></span><br><span class="line">| identical. The identical() <span class="keyword">function</span> will tell us <span class="keyword">if</span> its first two</span><br><span class="line">| arguments are the same. <span class="keyword">Try</span> it out.</span><br><span class="line"></span><br><span class="line">&gt; identical(my_matrix,my_matrix2)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| You nailed it! Good job!</span><br><span class="line"></span><br><span class="line">  |===============================                             |  <span class="number">51</span>%</span><br><span class="line"></span><br><span class="line">| Now, imagine that the numbers <span class="keyword">in</span> our table represent some</span><br><span class="line">| measurements <span class="keyword">from</span> a clinical experiment, <span class="keyword">where</span> <span class="keyword">each</span> row represents</span><br><span class="line">| one patient <span class="keyword">and</span> <span class="keyword">each</span> column represents one variable <span class="keyword">for</span> which</span><br><span class="line">| measurements were taken.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=================================                           |  <span class="number">54</span>%</span><br><span class="line"></span><br><span class="line">| We may want <span class="keyword">to</span> label the rows, so that we know which numbers belong</span><br><span class="line">| <span class="keyword">to</span> <span class="keyword">each</span> patient <span class="keyword">in</span> the experiment. One way <span class="keyword">to</span> <span class="keyword">do</span> this <span class="keyword">is</span> <span class="keyword">to</span> add a</span><br><span class="line">| column <span class="keyword">to</span> the matrix, which contains the names <span class="keyword">of</span> all four people.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==================================                          |  <span class="number">57</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Let</span><span class="comment">'s start by creating a character vector containing the names of</span></span><br><span class="line">| our patients -- Bill, Gina, Kelly, <span class="keyword">and</span> Sean. Remember that <span class="built_in">double</span></span><br><span class="line">| quotes tell R that something <span class="keyword">is</span> a character <span class="built_in">string</span>. Store the</span><br><span class="line">| result <span class="keyword">in</span> a variable called patients.</span><br><span class="line"></span><br><span class="line">&gt; patients&lt;-c(<span class="string">"Bill"</span>,<span class="string">"Gina"</span>,<span class="string">"Kelly"</span>,<span class="string">"Sean"</span>)</span><br><span class="line"></span><br><span class="line">| You are doing so well!</span><br><span class="line"></span><br><span class="line">  |====================================                        |  <span class="number">60</span>%</span><br><span class="line"></span><br><span class="line">| Now we<span class="comment">'ll use the cbind() function to 'combine columns'. Don't</span></span><br><span class="line">| worry about storing the result <span class="keyword">in</span> a <span class="keyword">new</span> variable. Just <span class="keyword">call</span> cbind()</span><br><span class="line">| <span class="keyword">with</span> two arguments -- the patients vector <span class="keyword">and</span> my_matrix.</span><br><span class="line"></span><br><span class="line">&gt; cbind(patients,my_matrix)</span><br><span class="line">     patients                       </span><br><span class="line">[<span class="number">1</span>,] <span class="string">"Bill"</span>   <span class="string">"1"</span> <span class="string">"5"</span> <span class="string">"9"</span>  <span class="string">"13"</span> <span class="string">"17"</span></span><br><span class="line">[<span class="number">2</span>,] <span class="string">"Gina"</span>   <span class="string">"2"</span> <span class="string">"6"</span> <span class="string">"10"</span> <span class="string">"14"</span> <span class="string">"18"</span></span><br><span class="line">[<span class="number">3</span>,] <span class="string">"Kelly"</span>  <span class="string">"3"</span> <span class="string">"7"</span> <span class="string">"11"</span> <span class="string">"15"</span> <span class="string">"19"</span></span><br><span class="line">[<span class="number">4</span>,] <span class="string">"Sean"</span>   <span class="string">"4"</span> <span class="string">"8"</span> <span class="string">"12"</span> <span class="string">"16"</span> <span class="string">"20"</span></span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s correct!</span></span><br><span class="line"></span><br><span class="line">  |======================================                      |  <span class="number">63</span>%</span><br><span class="line"></span><br><span class="line">| Something <span class="keyword">is</span> fishy about our result! It appears that combining the</span><br><span class="line">| character vector <span class="keyword">with</span> our matrix <span class="keyword">of</span> numbers caused everything <span class="keyword">to</span> be</span><br><span class="line">| enclosed <span class="keyword">in</span> <span class="built_in">double</span> quotes. This means we<span class="comment">'re left with a matrix of</span></span><br><span class="line">| character strings, which <span class="keyword">is</span> no good.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=======================================                     |  <span class="number">66</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">If</span> you remember back <span class="keyword">to</span> the beginning <span class="keyword">of</span> this lesson, I told you</span><br><span class="line">| that matrices can only contain ONE <span class="keyword">class</span> <span class="keyword">of</span> data. Therefore, <span class="keyword">when</span></span><br><span class="line">| we tried <span class="keyword">to</span> combine a character vector <span class="keyword">with</span> a numeric matrix, R was</span><br><span class="line">| forced <span class="keyword">to</span> <span class="comment">'coerce' the numbers to characters, hence the double</span></span><br><span class="line">| quotes.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=========================================                   |  <span class="number">69</span>%</span><br><span class="line"></span><br><span class="line">| This <span class="keyword">is</span> called <span class="comment">'implicit coercion', because we didn't ask for it.</span></span><br><span class="line">| It just happened. But why didn<span class="comment">'t R just convert the names of our</span></span><br><span class="line">| patients <span class="keyword">to</span> numbers? I<span class="comment">'ll let you ponder that question on your own.</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===========================================                 |  <span class="number">71</span>%</span><br><span class="line"></span><br><span class="line">| So, we<span class="comment">'re still left with the question of how to include the names</span></span><br><span class="line">| <span class="keyword">of</span> our patients <span class="keyword">in</span> the table without destroying the integrity <span class="keyword">of</span></span><br><span class="line">| our numeric data. <span class="keyword">Try</span> the following -- my_data &lt;-</span><br><span class="line">| data.frame(patients, my_matrix)</span><br><span class="line"></span><br><span class="line">&gt; my_data&lt;-data.frame(patients,my_matrix)</span><br><span class="line"></span><br><span class="line">| You nailed it! Good job!</span><br><span class="line"></span><br><span class="line">  |=============================================               |  <span class="number">74</span>%</span><br><span class="line"></span><br><span class="line">| Now view the contents <span class="keyword">of</span> my_data <span class="keyword">to</span> see what we<span class="comment">'ve come up with.</span></span><br><span class="line"></span><br><span class="line">&gt; my_data</span><br><span class="line">  patients X1 X2 X3 X4 X5</span><br><span class="line"><span class="number">1</span>     Bill  <span class="number">1</span>  <span class="number">5</span>  <span class="number">9</span> <span class="number">13</span> <span class="number">17</span></span><br><span class="line"><span class="number">2</span>     Gina  <span class="number">2</span>  <span class="number">6</span> <span class="number">10</span> <span class="number">14</span> <span class="number">18</span></span><br><span class="line"><span class="number">3</span>    Kelly  <span class="number">3</span>  <span class="number">7</span> <span class="number">11</span> <span class="number">15</span> <span class="number">19</span></span><br><span class="line"><span class="number">4</span>     Sean  <span class="number">4</span>  <span class="number">8</span> <span class="number">12</span> <span class="number">16</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line">| Your dedication <span class="keyword">is</span> inspiring!</span><br><span class="line"></span><br><span class="line">  |==============================================              |  <span class="number">77</span>%</span><br><span class="line"></span><br><span class="line">| It looks <span class="keyword">like</span> the data.frame() <span class="keyword">function</span> allowed us <span class="keyword">to</span> store our</span><br><span class="line">| character vector <span class="keyword">of</span> names right alongside our matrix <span class="keyword">of</span> numbers.</span><br><span class="line">| That<span class="comment">'s exactly what we were hoping for!</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |================================================            |  <span class="number">80</span>%</span><br><span class="line"></span><br><span class="line">| Behind the scenes, the data.frame() <span class="keyword">function</span> takes any number <span class="keyword">of</span></span><br><span class="line">| arguments <span class="keyword">and</span> returns a <span class="built_in">single</span> <span class="built_in">object</span> <span class="keyword">of</span> <span class="keyword">class</span> `data.frame` that <span class="keyword">is</span></span><br><span class="line">| composed <span class="keyword">of</span> the original objects.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==================================================          |  <span class="number">83</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Let</span><span class="comment">'s confirm this by calling the class() function on our newly</span></span><br><span class="line">| created data frame.</span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">class</span>(my_data)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"data.frame"</span></span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s the answer I was looking for.</span></span><br><span class="line"></span><br><span class="line">  |===================================================         |  <span class="number">86</span>%</span><br><span class="line"></span><br><span class="line">| It<span class="comment">'s also possible to assign names to the individual rows and</span></span><br><span class="line">| columns <span class="keyword">of</span> a data frame, which presents another possible way <span class="keyword">of</span></span><br><span class="line">| determining which row <span class="keyword">of</span> values <span class="keyword">in</span> our table belongs <span class="keyword">to</span> <span class="keyword">each</span></span><br><span class="line">| patient.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=====================================================       |  <span class="number">89</span>%</span><br><span class="line"></span><br><span class="line">| However, since we<span class="comment">'ve already solved that problem, let's solve a</span></span><br><span class="line">| different problem <span class="keyword">by</span> assigning names <span class="keyword">to</span> the columns <span class="keyword">of</span> our data</span><br><span class="line">| frame so that we know what type <span class="keyword">of</span> measurement <span class="keyword">each</span> column</span><br><span class="line">| represents.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=======================================================     |  <span class="number">91</span>%</span><br><span class="line"></span><br><span class="line">| Since we have six columns (including patient names), we<span class="comment">'ll need to</span></span><br><span class="line">| first create a vector containing one element <span class="keyword">for</span> <span class="keyword">each</span> column.</span><br><span class="line">| Create a character vector called cnames that contains the following</span><br><span class="line">| values (<span class="keyword">in</span> <span class="keyword">order</span>) -- <span class="string">"patient"</span>, <span class="string">"age"</span>, <span class="string">"weight"</span>, <span class="string">"bp"</span>, <span class="string">"rating"</span>,</span><br><span class="line">| <span class="string">"test"</span>.</span><br><span class="line"></span><br><span class="line">&gt; cnames&lt;-c(<span class="string">"patient"</span>,<span class="string">"age"</span>,<span class="string">"weight"</span>,<span class="string">"bp"</span>,<span class="string">"rating"</span>,<span class="string">"test"</span>)</span><br><span class="line"></span><br><span class="line">| Nice work!</span><br><span class="line"></span><br><span class="line">  |=========================================================   |  <span class="number">94</span>%</span><br><span class="line"></span><br><span class="line">| Now, use the colnames() <span class="keyword">function</span> <span class="keyword">to</span> <span class="keyword">set</span> the `colnames` attribute</span><br><span class="line">| <span class="keyword">for</span> our data frame. This <span class="keyword">is</span> similar <span class="keyword">to</span> the way we used the <span class="keyword">dim</span>()</span><br><span class="line">| <span class="keyword">function</span> earlier <span class="keyword">in</span> this lesson.</span><br><span class="line"></span><br><span class="line">&gt; colnames(my_data)&lt;-cnames</span><br><span class="line"></span><br><span class="line">| You are amazing!</span><br><span class="line"></span><br><span class="line">  |==========================================================  |  <span class="number">97</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Let</span><span class="comment">'s see if that got the job done. Print the contents of my_data.</span></span><br><span class="line"></span><br><span class="line">&gt; my_data</span><br><span class="line">  patient age weight bp rating test</span><br><span class="line"><span class="number">1</span>    Bill   <span class="number">1</span>      <span class="number">5</span>  <span class="number">9</span>     <span class="number">13</span>   <span class="number">17</span></span><br><span class="line"><span class="number">2</span>    Gina   <span class="number">2</span>      <span class="number">6</span> <span class="number">10</span>     <span class="number">14</span>   <span class="number">18</span></span><br><span class="line"><span class="number">3</span>   Kelly   <span class="number">3</span>      <span class="number">7</span> <span class="number">11</span>     <span class="number">15</span>   <span class="number">19</span></span><br><span class="line"><span class="number">4</span>    Sean   <span class="number">4</span>      <span class="number">8</span> <span class="number">12</span>     <span class="number">16</span>   <span class="number">20</span></span><br><span class="line"></span><br><span class="line">| You nailed it! Good job!</span><br><span class="line"></span><br><span class="line">  |============================================================| <span class="number">100</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">In</span> this lesson, you learned the basics <span class="keyword">of</span> working <span class="keyword">with</span> two very</span><br><span class="line">| important <span class="keyword">and</span> common data structures -- matrices <span class="keyword">and</span> data frames.</span><br><span class="line">| There<span class="comment">'s much more to learn and we'll be covering more advanced</span></span><br><span class="line">| topics, particularly <span class="keyword">with</span> respect <span class="keyword">to</span> data frames, <span class="keyword">in</span> future</span><br><span class="line">| lessons.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">| Are you currently enrolled <span class="keyword">in</span> the Coursera course associated <span class="keyword">with</span></span><br><span class="line">| this lesson?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: Yes</span><br><span class="line"><span class="number">2</span>: No</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">| You<span class="comment">'ve reached the end of this lesson! Returning to the main</span></span><br><span class="line">| menu...</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">| Please choose a course, ]]>
    </summary>
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[swirl学习之六——Subsetting Vectors]]></title>
    <link href="http://yoursite.com/2015/05/07/swirl%E5%AD%A6%E4%B9%A06/"/>
    <id>http://yoursite.com/2015/05/07/swirl学习6/</id>
    <published>2015-05-07T13:46:50.000Z</published>
    <updated>2015-05-07T13:51:37.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">| Please choose a course, <span class="keyword">or</span> type <span class="number">0</span> <span class="keyword">to</span> <span class="keyword">exit</span> swirl.</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: R Programming</span><br><span class="line"><span class="number">2</span>: Take <span class="keyword">me</span> <span class="keyword">to</span> <span class="keyword">the</span> swirl course repository!</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">| Please choose a lesson, <span class="keyword">or</span> type <span class="number">0</span> <span class="keyword">to</span> <span class="constant">return</span> <span class="keyword">to</span> course menu.</span><br><span class="line"></span><br><span class="line"> <span class="number">1</span>: Basic Building Blocks      <span class="number">2</span>: Workspace <span class="keyword">and</span> Files     </span><br><span class="line"> <span class="number">3</span>: Sequences <span class="keyword">of</span> Numbers       <span class="number">4</span>: Vectors                 </span><br><span class="line"> <span class="number">5</span>: Missing Values             <span class="number">6</span>: Subsetting Vectors      </span><br><span class="line"> <span class="number">7</span>: Matrices <span class="keyword">and</span> Data Frames   <span class="number">8</span>: Logic                   </span><br><span class="line"> <span class="number">9</span>: Functions                 <span class="number">10</span>: lapply <span class="keyword">and</span> sapply       </span><br><span class="line"><span class="number">11</span>: vapply <span class="keyword">and</span> tapply         <span class="number">12</span>: Looking <span class="keyword">at</span> Data         </span><br><span class="line"><span class="number">13</span>: Simulation                <span class="number">14</span>: Dates <span class="keyword">and</span> Times         </span><br><span class="line"><span class="number">15</span>: Base Graphics             </span><br><span class="line"></span><br><span class="line">Selection: <span class="number">6</span></span><br><span class="line"></span><br><span class="line">  |                                                        |   <span class="number">0</span>%</span><br><span class="line"></span><br><span class="line">| In this lesson, we'll see how <span class="keyword">to</span> extract elements <span class="keyword">from</span> a vector</span><br><span class="line">| based <span class="function_start"><span class="keyword">on</span></span> <span class="keyword">some</span> conditions <span class="keyword">that</span> we specify.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=                                                       |   <span class="number">3</span>%</span><br><span class="line"></span><br><span class="line">| For example, we may only be interested <span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">first</span> <span class="number">20</span> elements</span><br><span class="line">| <span class="keyword">of</span> a vector, <span class="keyword">or</span> only <span class="keyword">the</span> elements <span class="keyword">that</span> are <span class="keyword">not</span> NA, <span class="keyword">or</span> only</span><br><span class="line">| those <span class="keyword">that</span> are positive <span class="keyword">or</span> correspond <span class="keyword">to</span> a specific variable <span class="keyword">of</span></span><br><span class="line">| interest. By <span class="keyword">the</span> <span class="keyword">end</span> <span class="keyword">of</span> this lesson, you'll know how <span class="keyword">to</span> handle</span><br><span class="line">| each <span class="keyword">of</span> these scenarios.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===                                                     |   <span class="number">5</span>%</span><br><span class="line"></span><br><span class="line">| I've created <span class="keyword">for</span> you a vector called x <span class="keyword">that</span> <span class="keyword">contains</span> a random</span><br><span class="line">| ordering <span class="keyword">of</span> <span class="number">20</span> numbers (<span class="keyword">from</span> a standard normal distribution)</span><br><span class="line">| <span class="keyword">and</span> <span class="number">20</span> NAs. Type x now <span class="keyword">to</span> see what <span class="keyword">it</span> looks like.</span><br><span class="line"></span><br><span class="line">&gt; x</span><br><span class="line"> [<span class="number">1</span>]          NA  <span class="number">1.01612351</span>  <span class="number">0.17390520</span>          NA -<span class="number">0.62466706</span></span><br><span class="line"> [<span class="number">6</span>]          NA -<span class="number">2.57269671</span>          NA -<span class="number">0.44002462</span>          NA</span><br><span class="line">[<span class="number">11</span>]  <span class="number">0.37101633</span>  <span class="number">0.65818630</span>  <span class="number">1.03885003</span>  <span class="number">0.16175551</span>          NA</span><br><span class="line">[<span class="number">16</span>] -<span class="number">0.32999611</span>          NA          NA          NA  <span class="number">0.40024254</span></span><br><span class="line">[<span class="number">21</span>]          NA  <span class="number">0.53018587</span>          NA          NA          NA</span><br><span class="line">[<span class="number">26</span>]          NA          NA  <span class="number">0.28211580</span> -<span class="number">0.04009442</span>          NA</span><br><span class="line">[<span class="number">31</span>]  <span class="number">0.79493463</span>  <span class="number">0.60598426</span>          NA -<span class="number">1.42021598</span>          NA</span><br><span class="line">[<span class="number">36</span>]  <span class="number">0.17550349</span>  <span class="number">0.39153186</span>          NA  <span class="number">1.07989501</span>          NA</span><br><span class="line"></span><br><span class="line">| You are really <span class="function_start"><span class="keyword">on</span></span> a roll!</span><br><span class="line"></span><br><span class="line">  |====                                                    |   <span class="number">8</span>%</span><br><span class="line"></span><br><span class="line">| The way you <span class="keyword">tell</span> R <span class="keyword">that</span> you want <span class="keyword">to</span> select <span class="keyword">some</span> particular</span><br><span class="line">| elements (i.e. a 'subset') <span class="keyword">from</span> a vector <span class="keyword">is</span> <span class="keyword">by</span> placing an</span><br><span class="line">| 'index vector' <span class="keyword">in</span> square brackets immediately following <span class="keyword">the</span></span><br><span class="line">| <span class="property">name</span> <span class="keyword">of</span> <span class="keyword">the</span> vector.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |======                                                  |  <span class="number">11</span>%</span><br><span class="line"></span><br><span class="line">| For a simple example, <span class="keyword">try</span> x[<span class="number">1</span>:<span class="number">10</span>] <span class="keyword">to</span> view <span class="keyword">the</span> <span class="keyword">first</span> ten</span><br><span class="line">| elements <span class="keyword">of</span> x.</span><br><span class="line"></span><br><span class="line">&gt; x[<span class="number">1</span>:<span class="number">10</span>]</span><br><span class="line"> [<span class="number">1</span>]         NA  <span class="number">1.0161235</span>  <span class="number">0.1739052</span>         NA -<span class="number">0.6246671</span></span><br><span class="line"> [<span class="number">6</span>]         NA -<span class="number">2.5726967</span>         NA -<span class="number">0.4400246</span>         NA</span><br><span class="line"></span><br><span class="line">| All <span class="keyword">that</span> hard work <span class="keyword">is</span> paying off!</span><br><span class="line"></span><br><span class="line">  |=======                                                 |  <span class="number">13</span>%</span><br><span class="line"></span><br><span class="line">| Index vectors come <span class="keyword">in</span> four different flavors <span class="comment">-- logical</span></span><br><span class="line">| vectors, vectors <span class="keyword">of</span> positive integers, vectors <span class="keyword">of</span> negative</span><br><span class="line">| integers, <span class="keyword">and</span> vectors <span class="keyword">of</span> <span class="property">character</span> strings <span class="comment">-- each of which</span></span><br><span class="line">| we'll cover <span class="keyword">in</span> this lesson.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=========                                               |  <span class="number">16</span>%</span><br><span class="line"></span><br><span class="line">| Let's start <span class="keyword">by</span> indexing <span class="keyword">with</span> logical vectors. One common</span><br><span class="line">| scenario when working <span class="keyword">with</span> <span class="type">real</span>-world data <span class="keyword">is</span> <span class="keyword">that</span> we want <span class="keyword">to</span></span><br><span class="line">| extract all elements <span class="keyword">of</span> a vector <span class="keyword">that</span> are <span class="keyword">not</span> NA (i.e. missing</span><br><span class="line">| data). Recall <span class="keyword">that</span> <span class="keyword">is</span>.na(x) yields a vector <span class="keyword">of</span> logical values</span><br><span class="line">| <span class="keyword">the</span> same <span class="property">length</span> <span class="keyword">as</span> x, <span class="keyword">with</span> TRUEs corresponding <span class="keyword">to</span> NA values <span class="keyword">in</span></span><br><span class="line">| x <span class="keyword">and</span> FALSEs corresponding <span class="keyword">to</span> non-NA values <span class="keyword">in</span> x.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==========                                              |  <span class="number">18</span>%</span><br><span class="line"></span><br><span class="line">| What do you think x[<span class="keyword">is</span>.na(x)] will give you?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: A vector <span class="keyword">of</span> <span class="property">length</span> <span class="number">0</span></span><br><span class="line"><span class="number">2</span>: A vector <span class="keyword">of</span> TRUEs <span class="keyword">and</span> FALSEs</span><br><span class="line"><span class="number">3</span>: A vector <span class="keyword">with</span> no NAs</span><br><span class="line"><span class="number">4</span>: A vector <span class="keyword">of</span> all NAs</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">| You are amazing!</span><br><span class="line"></span><br><span class="line">  |============                                            |  <span class="number">21</span>%</span><br><span class="line"></span><br><span class="line">| Prove <span class="keyword">it</span> <span class="keyword">to</span> yourself <span class="keyword">by</span> typing x[<span class="keyword">is</span>.na(x)].</span><br><span class="line"></span><br><span class="line">&gt; x[<span class="keyword">is</span>.na(x)]</span><br><span class="line"> [<span class="number">1</span>] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA</span><br><span class="line"></span><br><span class="line">| Excellent job!</span><br><span class="line"></span><br><span class="line">  |=============                                           |  <span class="number">24</span>%</span><br><span class="line"></span><br><span class="line">| Recall <span class="keyword">that</span> `!` gives us <span class="keyword">the</span> negation <span class="keyword">of</span> a logical expression,</span><br><span class="line">| so !<span class="keyword">is</span>.na(x) can be <span class="command">read</span> <span class="keyword">as</span> '<span class="keyword">is</span> <span class="keyword">not</span> NA'. Therefore, <span class="keyword">if</span> we want</span><br><span class="line">| <span class="keyword">to</span> create a vector called y <span class="keyword">that</span> <span class="keyword">contains</span> all <span class="keyword">of</span> <span class="keyword">the</span> non-NA</span><br><span class="line">| values <span class="keyword">from</span> x, we can use y &lt;- x[!<span class="keyword">is</span>.na(x)]. Give <span class="keyword">it</span> a <span class="keyword">try</span>.</span><br><span class="line"></span><br><span class="line">&gt; y&lt;-x[!<span class="keyword">is</span>.na(x)]</span><br><span class="line"></span><br><span class="line">| Your dedication <span class="keyword">is</span> inspiring!</span><br><span class="line"></span><br><span class="line">  |===============                                         |  <span class="number">26</span>%</span><br><span class="line"></span><br><span class="line">| Print y <span class="keyword">to</span> <span class="keyword">the</span> console.</span><br><span class="line"></span><br><span class="line">&gt; y</span><br><span class="line"> [<span class="number">1</span>]  <span class="number">1.01612351</span>  <span class="number">0.17390520</span> -<span class="number">0.62466706</span> -<span class="number">2.57269671</span> -<span class="number">0.44002462</span></span><br><span class="line"> [<span class="number">6</span>]  <span class="number">0.37101633</span>  <span class="number">0.65818630</span>  <span class="number">1.03885003</span>  <span class="number">0.16175551</span> -<span class="number">0.32999611</span></span><br><span class="line">[<span class="number">11</span>]  <span class="number">0.40024254</span>  <span class="number">0.53018587</span>  <span class="number">0.28211580</span> -<span class="number">0.04009442</span>  <span class="number">0.79493463</span></span><br><span class="line">[<span class="number">16</span>]  <span class="number">0.60598426</span> -<span class="number">1.42021598</span>  <span class="number">0.17550349</span>  <span class="number">0.39153186</span>  <span class="number">1.07989501</span></span><br><span class="line"></span><br><span class="line">| Keep working like <span class="keyword">that</span> <span class="keyword">and</span> you'll <span class="keyword">get</span> there!</span><br><span class="line"></span><br><span class="line">  |================                                        |  <span class="number">29</span>%</span><br><span class="line"></span><br><span class="line">| Now <span class="keyword">that</span> we've isolated <span class="keyword">the</span> non-missing values <span class="keyword">of</span> x <span class="keyword">and</span> <span class="keyword">put</span></span><br><span class="line">| them <span class="keyword">in</span> y, we can subset y <span class="keyword">as</span> we please.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==================                                      |  <span class="number">32</span>%</span><br><span class="line"></span><br><span class="line">| Recall <span class="keyword">that</span> <span class="keyword">the</span> expression y &gt; <span class="number">0</span> will give us a vector <span class="keyword">of</span></span><br><span class="line">| logical values <span class="keyword">the</span> same <span class="property">length</span> <span class="keyword">as</span> y, <span class="keyword">with</span> TRUEs corresponding</span><br><span class="line">| <span class="keyword">to</span> values <span class="keyword">of</span> y <span class="keyword">that</span> are <span class="keyword">greater than</span> zero <span class="keyword">and</span> FALSEs</span><br><span class="line">| corresponding <span class="keyword">to</span> values <span class="keyword">of</span> y <span class="keyword">that</span> are <span class="keyword">less than or equal</span> <span class="keyword">to</span></span><br><span class="line">| zero. What do you think y[y &gt; <span class="number">0</span>] will give you?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: A vector <span class="keyword">of</span> all NAs</span><br><span class="line"><span class="number">2</span>: A vector <span class="keyword">of</span> all <span class="keyword">the</span> positive elements <span class="keyword">of</span> y</span><br><span class="line"><span class="number">3</span>: A vector <span class="keyword">of</span> <span class="property">length</span> <span class="number">0</span></span><br><span class="line"><span class="number">4</span>: A vector <span class="keyword">of</span> all <span class="keyword">the</span> negative elements <span class="keyword">of</span> y</span><br><span class="line"><span class="number">5</span>: A vector <span class="keyword">of</span> TRUEs <span class="keyword">and</span> FALSEs</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">| All <span class="keyword">that</span> hard work <span class="keyword">is</span> paying off!</span><br><span class="line"></span><br><span class="line">  |===================                                     |  <span class="number">34</span>%</span><br><span class="line"></span><br><span class="line">| Type y[y &gt; <span class="number">0</span>] <span class="keyword">to</span> see <span class="keyword">that</span> we <span class="keyword">get</span> all <span class="keyword">of</span> <span class="keyword">the</span> positive elements</span><br><span class="line">| <span class="keyword">of</span> y, which are also <span class="keyword">the</span> positive elements <span class="keyword">of</span> our original</span><br><span class="line">| vector x.</span><br><span class="line"></span><br><span class="line">&gt; y[y&gt;<span class="number">0</span>]</span><br><span class="line"> [<span class="number">1</span>] <span class="number">1.0161235</span> <span class="number">0.1739052</span> <span class="number">0.3710163</span> <span class="number">0.6581863</span> <span class="number">1.0388500</span> <span class="number">0.1617555</span></span><br><span class="line"> [<span class="number">7</span>] <span class="number">0.4002425</span> <span class="number">0.5301859</span> <span class="number">0.2821158</span> <span class="number">0.7949346</span> <span class="number">0.6059843</span> <span class="number">0.1755035</span></span><br><span class="line">[<span class="number">13</span>] <span class="number">0.3915319</span> <span class="number">1.0798950</span></span><br><span class="line"></span><br><span class="line">| You're <span class="keyword">the</span> best!</span><br><span class="line"></span><br><span class="line">  |=====================                                   |  <span class="number">37</span>%</span><br><span class="line"></span><br><span class="line">| You might wonder why we didn't just <span class="keyword">start with</span> x[x &gt; <span class="number">0</span>] <span class="keyword">to</span></span><br><span class="line">| isolate <span class="keyword">the</span> positive elements <span class="keyword">of</span> x. Try <span class="keyword">that</span> now <span class="keyword">to</span> see why.</span><br><span class="line"></span><br><span class="line">&gt; x[x&gt;<span class="number">0</span>]</span><br><span class="line"> [<span class="number">1</span>]        NA <span class="number">1.0161235</span> <span class="number">0.1739052</span>        NA        NA        NA</span><br><span class="line"> [<span class="number">7</span>]        NA <span class="number">0.3710163</span> <span class="number">0.6581863</span> <span class="number">1.0388500</span> <span class="number">0.1617555</span>        NA</span><br><span class="line">[<span class="number">13</span>]        NA        NA        NA <span class="number">0.4002425</span>        NA <span class="number">0.5301859</span></span><br><span class="line">[<span class="number">19</span>]        NA        NA        NA        NA        NA <span class="number">0.2821158</span></span><br><span class="line">[<span class="number">25</span>]        NA <span class="number">0.7949346</span> <span class="number">0.6059843</span>        NA        NA <span class="number">0.1755035</span></span><br><span class="line">[<span class="number">31</span>] <span class="number">0.3915319</span>        NA <span class="number">1.0798950</span>        NA</span><br><span class="line"></span><br><span class="line">| Keep up <span class="keyword">the</span> great work!</span><br><span class="line"></span><br><span class="line">  |======================                                  |  <span class="number">39</span>%</span><br><span class="line"></span><br><span class="line">| Since NA <span class="keyword">is</span> <span class="keyword">not</span> a value, <span class="keyword">but</span> rather a placeholder <span class="keyword">for</span> an</span><br><span class="line">| unknown quantity, <span class="keyword">the</span> expression NA &gt; <span class="number">0</span> evaluates <span class="keyword">to</span> NA. Hence</span><br><span class="line">| we <span class="keyword">get</span> a bunch <span class="keyword">of</span> NAs mixed <span class="keyword">in</span> <span class="keyword">with</span> our positive numbers when</span><br><span class="line">| we do this.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |========================                                |  <span class="number">42</span>%</span><br><span class="line"></span><br><span class="line">| Combining our knowledge <span class="keyword">of</span> logical operators <span class="keyword">with</span> our new</span><br><span class="line">| knowledge <span class="keyword">of</span> subsetting, we could do this <span class="comment">-- x[!is.na(x) &amp; x &gt;</span></span><br><span class="line">| <span class="number">0</span>]. Try <span class="keyword">it</span> out.</span><br><span class="line"></span><br><span class="line">&gt; x[!<span class="keyword">is</span>.na(x)&amp;x&gt;<span class="number">0</span>]</span><br><span class="line"> [<span class="number">1</span>] <span class="number">1.0161235</span> <span class="number">0.1739052</span> <span class="number">0.3710163</span> <span class="number">0.6581863</span> <span class="number">1.0388500</span> <span class="number">0.1617555</span></span><br><span class="line"> [<span class="number">7</span>] <span class="number">0.4002425</span> <span class="number">0.5301859</span> <span class="number">0.2821158</span> <span class="number">0.7949346</span> <span class="number">0.6059843</span> <span class="number">0.1755035</span></span><br><span class="line">[<span class="number">13</span>] <span class="number">0.3915319</span> <span class="number">1.0798950</span></span><br><span class="line"></span><br><span class="line">| You got <span class="keyword">it</span> right!</span><br><span class="line"></span><br><span class="line">  |=========================                               |  <span class="number">45</span>%</span><br><span class="line"></span><br><span class="line">| In this case, we request only values <span class="keyword">of</span> x <span class="keyword">that</span> are both</span><br><span class="line">| non-missing AND <span class="keyword">greater than</span> zero.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===========================                             |  <span class="number">47</span>%</span><br><span class="line"></span><br><span class="line">| I've already shown you how <span class="keyword">to</span> subset just <span class="keyword">the</span> <span class="keyword">first</span> ten values</span><br><span class="line">| <span class="keyword">of</span> x using x[<span class="number">1</span>:<span class="number">10</span>]. In this case, we're providing a vector <span class="keyword">of</span></span><br><span class="line">| positive integers inside <span class="keyword">of</span> <span class="keyword">the</span> square brackets, which tells R</span><br><span class="line">| <span class="keyword">to</span> <span class="constant">return</span> only <span class="keyword">the</span> elements <span class="keyword">of</span> x numbered <span class="number">1</span> <span class="keyword">through</span> <span class="number">10.</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |============================                            |  <span class="number">50</span>%</span><br><span class="line"></span><br><span class="line">| Many programming languages use what's called 'zero-based</span><br><span class="line">| indexing', which means <span class="keyword">that</span> <span class="keyword">the</span> <span class="keyword">first</span> element <span class="keyword">of</span> a vector <span class="keyword">is</span></span><br><span class="line">| considered element <span class="number">0.</span> R uses 'one-based indexing', which (you</span><br><span class="line">| guessed <span class="keyword">it</span>!) means <span class="keyword">the</span> <span class="keyword">first</span> element <span class="keyword">of</span> a vector <span class="keyword">is</span> considered</span><br><span class="line">| element <span class="number">1.</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=============================                           |  <span class="number">53</span>%</span><br><span class="line"></span><br><span class="line">| Can you figure out how we'd subset <span class="keyword">the</span> <span class="number">3</span>rd, <span class="number">5</span>th, <span class="keyword">and</span> <span class="number">7</span>th</span><br><span class="line">| elements <span class="keyword">of</span> x? Hint <span class="comment">-- Use the c() function to specify the</span></span><br><span class="line">| element numbers <span class="keyword">as</span> a numeric vector.</span><br><span class="line"></span><br><span class="line">&gt; x[c(<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>)]</span><br><span class="line">[<span class="number">1</span>]  <span class="number">0.1739052</span> -<span class="number">0.6246671</span> -<span class="number">2.5726967</span></span><br><span class="line"></span><br><span class="line">| Keep up <span class="keyword">the</span> great work!</span><br><span class="line"></span><br><span class="line">  |===============================                         |  <span class="number">55</span>%</span><br><span class="line"></span><br><span class="line">| It's important <span class="keyword">that</span> when using <span class="type">integer</span> vectors <span class="keyword">to</span> subset our</span><br><span class="line">| vector x, we stick <span class="keyword">with</span> <span class="keyword">the</span> <span class="keyword">set</span> <span class="keyword">of</span> indexes &#123;<span class="number">1</span>, <span class="number">2</span>, ..., <span class="number">40</span>&#125;</span><br><span class="line">| <span class="keyword">since</span> x only has <span class="number">40</span> elements. What happens <span class="keyword">if</span> we ask <span class="keyword">for</span> <span class="keyword">the</span></span><br><span class="line">| zeroth element <span class="keyword">of</span> x (i.e. x[<span class="number">0</span>])? Give <span class="keyword">it</span> a <span class="keyword">try</span>.</span><br><span class="line"></span><br><span class="line">&gt; x[<span class="number">0</span>]</span><br><span class="line">numeric(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">| You're <span class="keyword">the</span> best!</span><br><span class="line"></span><br><span class="line">  |================================                        |  <span class="number">58</span>%</span><br><span class="line"></span><br><span class="line">| As you might expect, we <span class="keyword">get</span> nothing useful. Unfortunately, R</span><br><span class="line">| doesn't prevent us <span class="keyword">from</span> doing this. What <span class="keyword">if</span> we ask <span class="keyword">for</span> <span class="keyword">the</span></span><br><span class="line">| <span class="number">3000</span>th element <span class="keyword">of</span> x? Try <span class="keyword">it</span> out.</span><br><span class="line"></span><br><span class="line">&gt; x[<span class="number">3000</span>]</span><br><span class="line">[<span class="number">1</span>] NA</span><br><span class="line"></span><br><span class="line">| Great job!</span><br><span class="line"></span><br><span class="line">  |==================================                      |  <span class="number">61</span>%</span><br><span class="line"></span><br><span class="line">| Again, nothing useful, <span class="keyword">but</span> R doesn't prevent us <span class="keyword">from</span> asking <span class="keyword">for</span></span><br><span class="line">| <span class="keyword">it</span>. This should be a cautionary tale. You should always make</span><br><span class="line">| sure <span class="keyword">that</span> what you are asking <span class="keyword">for</span> <span class="keyword">is</span> within <span class="keyword">the</span> bounds <span class="keyword">of</span> <span class="keyword">the</span></span><br><span class="line">| vector you're working <span class="keyword">with</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===================================                     |  <span class="number">63</span>%</span><br><span class="line"></span><br><span class="line">| What <span class="keyword">if</span> we're interested <span class="keyword">in</span> all elements <span class="keyword">of</span> x EXCEPT <span class="keyword">the</span> <span class="number">2</span>nd</span><br><span class="line">| <span class="keyword">and</span> <span class="number">10</span>th? It would be pretty tedious <span class="keyword">to</span> construct a vector</span><br><span class="line">| containing all numbers <span class="number">1</span> <span class="keyword">through</span> <span class="number">40</span> EXCEPT <span class="number">2</span> <span class="keyword">and</span> <span class="number">10.</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=====================================                   |  <span class="number">66</span>%</span><br><span class="line"></span><br><span class="line">| Luckily, R accepts negative <span class="type">integer</span> indexes. Whereas x[c(<span class="number">2</span>,</span><br><span class="line">| <span class="number">10</span>)] gives us ONLY <span class="keyword">the</span> <span class="number">2</span>nd <span class="keyword">and</span> <span class="number">10</span>th elements <span class="keyword">of</span> x, x[c(-<span class="number">2</span>,</span><br><span class="line">| -<span class="number">10</span>)] gives us all elements <span class="keyword">of</span> x EXCEPT <span class="keyword">for</span> <span class="keyword">the</span> <span class="number">2</span>nd <span class="keyword">and</span> <span class="number">10</span></span><br><span class="line">| elements.  Try x[c(-<span class="number">2</span>, -<span class="number">10</span>)] now <span class="keyword">to</span> see this.</span><br><span class="line"></span><br><span class="line">&gt; x[c(-<span class="number">2</span>,-<span class="number">10</span>)]</span><br><span class="line"> [<span class="number">1</span>]          NA  <span class="number">0.17390520</span>          NA -<span class="number">0.62466706</span>          NA</span><br><span class="line"> [<span class="number">6</span>] -<span class="number">2.57269671</span>          NA -<span class="number">0.44002462</span>  <span class="number">0.37101633</span>  <span class="number">0.65818630</span></span><br><span class="line">[<span class="number">11</span>]  <span class="number">1.03885003</span>  <span class="number">0.16175551</span>          NA -<span class="number">0.32999611</span>          NA</span><br><span class="line">[<span class="number">16</span>]          NA          NA  <span class="number">0.40024254</span>          NA  <span class="number">0.53018587</span></span><br><span class="line">[<span class="number">21</span>]          NA          NA          NA          NA          NA</span><br><span class="line">[<span class="number">26</span>]  <span class="number">0.28211580</span> -<span class="number">0.04009442</span>          NA  <span class="number">0.79493463</span>  <span class="number">0.60598426</span></span><br><span class="line">[<span class="number">31</span>]          NA -<span class="number">1.42021598</span>          NA  <span class="number">0.17550349</span>  <span class="number">0.39153186</span></span><br><span class="line">[<span class="number">36</span>]          NA  <span class="number">1.07989501</span>          NA</span><br><span class="line"></span><br><span class="line">| Excellent job!</span><br><span class="line"></span><br><span class="line">  |======================================                  |  <span class="number">68</span>%</span><br><span class="line"></span><br><span class="line">| A shorthand way <span class="keyword">of</span> specifying multiple negative numbers <span class="keyword">is</span> <span class="keyword">to</span></span><br><span class="line">| <span class="keyword">put</span> <span class="keyword">the</span> negative sign out <span class="keyword">in</span> <span class="keyword">front</span> <span class="keyword">of</span> <span class="keyword">the</span> vector <span class="keyword">of</span> positive</span><br><span class="line">| numbers. Type x[-c(<span class="number">2</span>, <span class="number">10</span>)] <span class="keyword">to</span> <span class="keyword">get</span> <span class="keyword">the</span> exact same <span class="constant">result</span>.</span><br><span class="line"></span><br><span class="line">&gt; x[-c(<span class="number">2</span>,<span class="number">10</span>)]</span><br><span class="line"> [<span class="number">1</span>]          NA  <span class="number">0.17390520</span>          NA -<span class="number">0.62466706</span>          NA</span><br><span class="line"> [<span class="number">6</span>] -<span class="number">2.57269671</span>          NA -<span class="number">0.44002462</span>  <span class="number">0.37101633</span>  <span class="number">0.65818630</span></span><br><span class="line">[<span class="number">11</span>]  <span class="number">1.03885003</span>  <span class="number">0.16175551</span>          NA -<span class="number">0.32999611</span>          NA</span><br><span class="line">[<span class="number">16</span>]          NA          NA  <span class="number">0.40024254</span>          NA  <span class="number">0.53018587</span></span><br><span class="line">[<span class="number">21</span>]          NA          NA          NA          NA          NA</span><br><span class="line">[<span class="number">26</span>]  <span class="number">0.28211580</span> -<span class="number">0.04009442</span>          NA  <span class="number">0.79493463</span>  <span class="number">0.60598426</span></span><br><span class="line">[<span class="number">31</span>]          NA -<span class="number">1.42021598</span>          NA  <span class="number">0.17550349</span>  <span class="number">0.39153186</span></span><br><span class="line">[<span class="number">36</span>]          NA  <span class="number">1.07989501</span>          NA</span><br><span class="line"></span><br><span class="line">| All <span class="keyword">that</span> hard work <span class="keyword">is</span> paying off!</span><br><span class="line"></span><br><span class="line">  |========================================                |  <span class="number">71</span>%</span><br><span class="line"></span><br><span class="line">| So far, we've covered three types <span class="keyword">of</span> index vectors <span class="comment">-- logical,</span></span><br><span class="line">| positive <span class="type">integer</span>, <span class="keyword">and</span> negative <span class="type">integer</span>. The only remaining type</span><br><span class="line">| requires us <span class="keyword">to</span> introduce <span class="keyword">the</span> concept <span class="keyword">of</span> 'named' elements.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=========================================               |  <span class="number">74</span>%</span><br><span class="line"></span><br><span class="line">| Create a numeric vector <span class="keyword">with</span> three named elements using vect &lt;-</span><br><span class="line">| c(foo = <span class="number">11</span>, bar = <span class="number">2</span>, norf = NA).</span><br><span class="line"></span><br><span class="line">&gt; vect&lt;-c(foo=<span class="number">11</span>,bar=<span class="number">2</span>,norf=NA)</span><br><span class="line"></span><br><span class="line">| Great job!</span><br><span class="line"></span><br><span class="line">  |===========================================             |  <span class="number">76</span>%</span><br><span class="line"></span><br><span class="line">| When we print vect <span class="keyword">to</span> <span class="keyword">the</span> console, you'll see <span class="keyword">that</span> each element</span><br><span class="line">| has a <span class="property">name</span>. Try <span class="keyword">it</span> out.</span><br><span class="line"></span><br><span class="line">&gt; vect</span><br><span class="line"> foo  bar norf </span><br><span class="line">  <span class="number">11</span>    <span class="number">2</span>   NA </span><br><span class="line"></span><br><span class="line">| You are amazing!</span><br><span class="line"></span><br><span class="line">  |============================================            |  <span class="number">79</span>%</span><br><span class="line"></span><br><span class="line">| We can also <span class="keyword">get</span> <span class="keyword">the</span> names <span class="keyword">of</span> vect <span class="keyword">by</span> passing vect <span class="keyword">as</span> an</span><br><span class="line">| argument <span class="keyword">to</span> <span class="keyword">the</span> names() function. Give <span class="keyword">that</span> a <span class="keyword">try</span>.</span><br><span class="line"></span><br><span class="line">&gt; names(vect)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"foo"</span>  <span class="string">"bar"</span>  <span class="string">"norf"</span></span><br><span class="line"></span><br><span class="line">| You are quite good <span class="keyword">my</span> friend!</span><br><span class="line"></span><br><span class="line">  |==============================================          |  <span class="number">82</span>%</span><br><span class="line"></span><br><span class="line">| Alternatively, we can create an unnamed vector vect2 <span class="keyword">with</span> c(<span class="number">11</span>,</span><br><span class="line">| <span class="number">2</span>, NA). Do <span class="keyword">that</span> now.</span><br><span class="line"></span><br><span class="line">&gt; vect2&lt;-c(<span class="number">11</span>,<span class="number">2</span>,NA)</span><br><span class="line"></span><br><span class="line">| That's <span class="keyword">the</span> answer I was looking <span class="keyword">for</span>.</span><br><span class="line"></span><br><span class="line">  |===============================================         |  <span class="number">84</span>%</span><br><span class="line"></span><br><span class="line">| Then, we can add <span class="keyword">the</span> `names` attribute <span class="keyword">to</span> vect2 <span class="keyword">after</span> <span class="keyword">the</span> fact</span><br><span class="line">| <span class="keyword">with</span> names(vect2) &lt;- c(<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"norf"</span>). Go ahead.</span><br><span class="line"></span><br><span class="line">&gt; names(vect2)&lt;-c(<span class="string">"foo"</span>,<span class="string">"bar"</span>,<span class="string">"norf"</span>)</span><br><span class="line"></span><br><span class="line">| You got <span class="keyword">it</span> right!</span><br><span class="line"></span><br><span class="line">  |=================================================       |  <span class="number">87</span>%</span><br><span class="line"></span><br><span class="line">| Now, let's check <span class="keyword">that</span> vect <span class="keyword">and</span> vect2 are <span class="keyword">the</span> same <span class="keyword">by</span> passing</span><br><span class="line">| them <span class="keyword">as</span> arguments <span class="keyword">to</span> <span class="keyword">the</span> identical() function.</span><br><span class="line"></span><br><span class="line">&gt; identical(vect,vect2)</span><br><span class="line">[<span class="number">1</span>] TRUE</span><br><span class="line"></span><br><span class="line">| Great job!</span><br><span class="line"></span><br><span class="line">  |==================================================      |  <span class="number">89</span>%</span><br><span class="line"></span><br><span class="line">| Indeed, vect <span class="keyword">and</span> vect2 are identical named vectors.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |====================================================    |  <span class="number">92</span>%</span><br><span class="line"></span><br><span class="line">| Now, <span class="keyword">back</span> <span class="keyword">to</span> <span class="keyword">the</span> matter <span class="keyword">of</span> subsetting a vector <span class="keyword">by</span> named</span><br><span class="line">| elements. Which <span class="keyword">of</span> <span class="keyword">the</span> following commands do you think would</span><br><span class="line">| give us <span class="keyword">the</span> <span class="keyword">second</span> element <span class="keyword">of</span> vect?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: vect[<span class="string">"bar"</span>]</span><br><span class="line"><span class="number">2</span>: vect[<span class="string">"2"</span>]</span><br><span class="line"><span class="number">3</span>: vect[bar]</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">| You are really <span class="function_start"><span class="keyword">on</span></span> a roll!</span><br><span class="line"></span><br><span class="line">  |=====================================================   |  <span class="number">95</span>%</span><br><span class="line"></span><br><span class="line">| Now, <span class="keyword">try</span> <span class="keyword">it</span> out.</span><br><span class="line"></span><br><span class="line">&gt; vect[<span class="string">"bar"</span>]</span><br><span class="line">bar </span><br><span class="line">  <span class="number">2</span> </span><br><span class="line"></span><br><span class="line">| All <span class="keyword">that</span> hard work <span class="keyword">is</span> paying off!</span><br><span class="line"></span><br><span class="line">  |======================================================= |  <span class="number">97</span>%</span><br><span class="line"></span><br><span class="line">| Likewise, we can specify a vector <span class="keyword">of</span> names <span class="keyword">with</span> vect[c(<span class="string">"foo"</span>,</span><br><span class="line">| <span class="string">"bar"</span>)]. Try <span class="keyword">it</span> out.</span><br><span class="line"></span><br><span class="line">&gt; vect[c(<span class="string">"foo"</span>,<span class="string">"bar"</span>)]</span><br><span class="line">foo bar </span><br><span class="line"> <span class="number">11</span>   <span class="number">2</span> </span><br><span class="line"></span><br><span class="line">| You are doing so well!</span><br><span class="line"></span><br><span class="line">  |========================================================| <span class="number">100</span>%</span><br><span class="line"></span><br><span class="line">| Now you know all four methods <span class="keyword">of</span> subsetting data <span class="keyword">from</span> vectors.</span><br><span class="line">| Different approaches are best <span class="keyword">in</span> different scenarios <span class="keyword">and</span> when</span><br><span class="line">| <span class="keyword">in</span> doubt, <span class="keyword">try</span> <span class="keyword">it</span> out!</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">| Are you currently enrolled <span class="keyword">in</span> <span class="keyword">the</span> Coursera course associated</span><br><span class="line">| <span class="keyword">with</span> this lesson?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: Yes</span><br><span class="line"><span class="number">2</span>: No</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">| You've reached <span class="keyword">the</span> <span class="keyword">end</span> <span class="keyword">of</span> this lesson! Returning <span class="keyword">to</span> <span class="keyword">the</span> main</span><br><span class="line">| menu...</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">| Please choose a co]]>
    </summary>
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[swirl学习之五——Missing Values]]></title>
    <link href="http://yoursite.com/2015/05/07/swirl%E5%AD%A6%E4%B9%A05/"/>
    <id>http://yoursite.com/2015/05/07/swirl学习5/</id>
    <published>2015-05-07T09:05:37.000Z</published>
    <updated>2015-05-07T11:57:03.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">| Please choose a course, <span class="keyword">or</span> type <span class="number">0</span> <span class="keyword">to</span> <span class="keyword">exit</span> swirl.</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: R Programming</span><br><span class="line"><span class="number">2</span>: <span class="keyword">Take</span> <span class="keyword">me</span> <span class="keyword">to</span> the swirl course repository!</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">| Please choose a lesson, <span class="keyword">or</span> type <span class="number">0</span> <span class="keyword">to</span> <span class="keyword">return</span> <span class="keyword">to</span> course menu.</span><br><span class="line"></span><br><span class="line"> <span class="number">1</span>: Basic Building Blocks      <span class="number">2</span>: Workspace <span class="keyword">and</span> Files     </span><br><span class="line"> <span class="number">3</span>: Sequences <span class="keyword">of</span> Numbers       <span class="number">4</span>: Vectors                 </span><br><span class="line"> <span class="number">5</span>: Missing Values             <span class="number">6</span>: Subsetting Vectors      </span><br><span class="line"> <span class="number">7</span>: Matrices <span class="keyword">and</span> Data Frames   <span class="number">8</span>: Logic                   </span><br><span class="line"> <span class="number">9</span>: Functions                 <span class="number">10</span>: lapply <span class="keyword">and</span> sapply       </span><br><span class="line"><span class="number">11</span>: vapply <span class="keyword">and</span> tapply         <span class="number">12</span>: Looking at Data         </span><br><span class="line"><span class="number">13</span>: Simulation                <span class="number">14</span>: Dates <span class="keyword">and</span> Times         </span><br><span class="line"><span class="number">15</span>: Base Graphics             </span><br><span class="line"></span><br><span class="line">Selection: <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  |                                                        |   <span class="number">0</span>%</span><br><span class="line"></span><br><span class="line">| Missing values play an important role <span class="keyword">in</span> statistics <span class="keyword">and</span> data</span><br><span class="line">| analysis. Often, missing values must <span class="keyword">not</span> be ignored, but rather</span><br><span class="line">| they should be carefully studied <span class="keyword">to</span> see <span class="keyword">if</span> there<span class="comment">'s an</span></span><br><span class="line">| underlying pattern <span class="keyword">or</span> cause <span class="keyword">for</span> their missingness.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===                                                     |   <span class="number">5</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">In</span> R, NA <span class="keyword">is</span> used <span class="keyword">to</span> represent any value that <span class="keyword">is</span> <span class="comment">'not available'</span></span><br><span class="line">| <span class="keyword">or</span> <span class="comment">'missing' (in the statistical sense). In this lesson, we'll</span></span><br><span class="line">| explore missing values further.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |======                                                  |  <span class="number">11</span>%</span><br><span class="line"></span><br><span class="line">| Any operation involving NA generally yields NA <span class="keyword">as</span> the result.</span><br><span class="line">| <span class="keyword">To</span> illustrate, <span class="keyword">let</span><span class="comment">'s create a vector c(44, NA, 5, NA) and</span></span><br><span class="line">| assign it <span class="keyword">to</span> a variable x.</span><br><span class="line"></span><br><span class="line">&gt; x&lt;-c(<span class="number">44</span>,NA,<span class="number">5</span>,NA)</span><br><span class="line"></span><br><span class="line">| Perseverance, that<span class="comment">'s the answer.</span></span><br><span class="line"></span><br><span class="line">  |=========                                               |  <span class="number">16</span>%</span><br><span class="line"></span><br><span class="line">| Now, <span class="keyword">let</span><span class="comment">'s multiply x by 3.</span></span><br><span class="line"></span><br><span class="line">&gt; x*<span class="number">3</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">132</span>  NA  <span class="number">15</span>  NA</span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s a job well done!</span></span><br><span class="line"></span><br><span class="line">  |============                                            |  <span class="number">21</span>%</span><br><span class="line"></span><br><span class="line">| Notice that the elements <span class="keyword">of</span> the resulting vector that</span><br><span class="line">| correspond <span class="keyword">with</span> the NA values <span class="keyword">in</span> x are also NA.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===============                                         |  <span class="number">26</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">To</span> make things a little more interesting, lets create a vector</span><br><span class="line">| containing <span class="number">1000</span> draws <span class="keyword">from</span> a standard normal distribution <span class="keyword">with</span></span><br><span class="line">| y &lt;- rnorm(<span class="number">1000</span>).</span><br><span class="line"></span><br><span class="line">&gt; y&lt;-rnorm(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s the answer I was looking for.</span></span><br><span class="line"></span><br><span class="line">  |==================                                      |  <span class="number">32</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Next</span>, <span class="keyword">let</span><span class="comment">'s create a vector containing 1000 NAs with z <span class="xmlDocTag">&lt;-</span><br><span class="line">| rep(NA, 1000).</span><br><span class="line"></span><br><span class="line">&gt;</span> z<span class="xmlDocTag">&lt;-rep(NA,1000)</span><br><span class="line"></span><br><span class="line">| You nailed it! Good job!</span><br><span class="line"></span><br><span class="line">  |=====================                                   |  37%</span><br><span class="line"></span><br><span class="line">| Finally, let's select 100 elements at random from these 2000</span><br><span class="line">| values (combining y and z) such that we don't know how many NAs</span><br><span class="line">| we'll wind up with or what positions they'll occupy in our</span><br><span class="line">| final vector -- my_data &lt;- sample(c(y, z), 100).</span><br><span class="line"></span><br><span class="line">&gt;</span> my_data<span class="xmlDocTag">&lt;-sample(c(y,z),100)</span><br><span class="line"></span><br><span class="line">| You are doing so well!</span><br><span class="line"></span><br><span class="line">  |========================                                |  42%</span><br><span class="line"></span><br><span class="line">| Let's first ask the question of where our NAs are located in</span><br><span class="line">| our data. The is.na() function tells us whether each element of</span><br><span class="line">| a vector is NA. Call is.na() on my_data and assign the result</span><br><span class="line">| to my_na.</span><br><span class="line"></span><br><span class="line">&gt;</span> my_na<span class="xmlDocTag">&lt;-is.na(my_data)</span><br><span class="line"></span><br><span class="line">| All that practice is paying off!</span><br><span class="line"></span><br><span class="line">  |===========================                             |  47%</span><br><span class="line"></span><br><span class="line">| Now, print my_na to see what you came up with.</span><br><span class="line"></span><br><span class="line">&gt;</span> my_na</span></span><br><span class="line">  [<span class="number">1</span>]  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span></span><br><span class="line"> [<span class="number">11</span>]  <span class="literal">TRUE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span></span><br><span class="line"> [<span class="number">21</span>] <span class="literal">FALSE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span></span><br><span class="line"> [<span class="number">31</span>]  <span class="literal">TRUE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span></span><br><span class="line"> [<span class="number">41</span>] <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span></span><br><span class="line"> [<span class="number">51</span>] <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span></span><br><span class="line"> [<span class="number">61</span>] <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span></span><br><span class="line"> [<span class="number">71</span>]  <span class="literal">TRUE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span></span><br><span class="line"> [<span class="number">81</span>] <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span></span><br><span class="line"> [<span class="number">91</span>] <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span></span><br><span class="line"></span><br><span class="line">| All that hard work <span class="keyword">is</span> paying <span class="keyword">off</span>!</span><br><span class="line"></span><br><span class="line">  |=============================                           |  <span class="number">53</span>%</span><br><span class="line"></span><br><span class="line">| Everywhere you see a <span class="literal">TRUE</span>, you know the corresponding element</span><br><span class="line">| <span class="keyword">of</span> my_data <span class="keyword">is</span> NA. Likewise, everywhere you see a <span class="literal">FALSE</span>, you</span><br><span class="line">| know the corresponding element <span class="keyword">of</span> my_data <span class="keyword">is</span> one <span class="keyword">of</span> our random</span><br><span class="line">| draws <span class="keyword">from</span> the standard normal distribution.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |================================                        |  <span class="number">58</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">In</span> our previous discussion <span class="keyword">of</span> logical operators, we introduced</span><br><span class="line">| the `==` <span class="keyword">operator</span> <span class="keyword">as</span> a method <span class="keyword">of</span> testing <span class="keyword">for</span> equality between</span><br><span class="line">| two objects. So, you might think the expression my_data == NA</span><br><span class="line">| yields the same results <span class="keyword">as</span> <span class="keyword">is</span>.na(). Give it a <span class="keyword">try</span>.</span><br><span class="line"></span><br><span class="line">&gt; my_data==NA</span><br><span class="line">  [<span class="number">1</span>] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA</span><br><span class="line"> [<span class="number">21</span>] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA</span><br><span class="line"> [<span class="number">41</span>] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA</span><br><span class="line"> [<span class="number">61</span>] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA</span><br><span class="line"> [<span class="number">81</span>] NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA</span><br><span class="line"></span><br><span class="line">| Keep up the great work!</span><br><span class="line"></span><br><span class="line">  |===================================                     |  <span class="number">63</span>%</span><br><span class="line"></span><br><span class="line">| The reason you got a vector <span class="keyword">of</span> all NAs <span class="keyword">is</span> that NA <span class="keyword">is</span> <span class="keyword">not</span> really</span><br><span class="line">| a value, but just a placeholder <span class="keyword">for</span> a quantity that <span class="keyword">is</span> <span class="keyword">not</span></span><br><span class="line">| available. Therefore the logical expression <span class="keyword">is</span> incomplete <span class="keyword">and</span> R</span><br><span class="line">| has no choice but <span class="keyword">to</span> <span class="keyword">return</span> a vector <span class="keyword">of</span> the same length <span class="keyword">as</span></span><br><span class="line">| my_data that contains all NAs.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |======================================                  |  <span class="number">68</span>%</span><br><span class="line"></span><br><span class="line">| Don<span class="comment">'t worry if that's a little confusing. The key takeaway is</span></span><br><span class="line">| <span class="keyword">to</span> be cautious <span class="keyword">when</span> <span class="keyword">using</span> logical expressions anytime NAs might</span><br><span class="line">| creep <span class="keyword">in</span>, since a <span class="built_in">single</span> NA value can derail the entire thing.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=========================================               |  <span class="number">74</span>%</span><br><span class="line"></span><br><span class="line">| So, back <span class="keyword">to</span> the task at hand. Now that we have a vector, my_na,</span><br><span class="line">| that has a <span class="literal">TRUE</span> <span class="keyword">for</span> every NA <span class="keyword">and</span> <span class="literal">FALSE</span> <span class="keyword">for</span> every numeric value,</span><br><span class="line">| we can compute the total number <span class="keyword">of</span> NAs <span class="keyword">in</span> our data.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |============================================            |  <span class="number">79</span>%</span><br><span class="line"></span><br><span class="line">| The trick <span class="keyword">is</span> <span class="keyword">to</span> recognize that underneath the surface, R</span><br><span class="line">| represents <span class="literal">TRUE</span> <span class="keyword">as</span> the number <span class="number">1</span> <span class="keyword">and</span> <span class="literal">FALSE</span> <span class="keyword">as</span> the number <span class="number">0.</span></span><br><span class="line">| Therefore, <span class="keyword">if</span> we <span class="keyword">take</span> the sum <span class="keyword">of</span> a bunch <span class="keyword">of</span> TRUEs <span class="keyword">and</span> FALSEs,</span><br><span class="line">| we <span class="keyword">get</span> the total number <span class="keyword">of</span> TRUEs.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===============================================         |  <span class="number">84</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Let</span><span class="comment">'s give that a try here. Call the sum() function on my_na to</span></span><br><span class="line">| count the total number <span class="keyword">of</span> TRUEs <span class="keyword">in</span> my_na, <span class="keyword">and</span> thus the total</span><br><span class="line">| number <span class="keyword">of</span> NAs <span class="keyword">in</span> my_data. Don<span class="comment">'t assign the result to a new</span></span><br><span class="line">| variable.</span><br><span class="line"></span><br><span class="line">&gt; sum(my_na)</span><br><span class="line">[<span class="number">1</span>] <span class="number">53</span></span><br><span class="line"></span><br><span class="line">| All that practice <span class="keyword">is</span> paying <span class="keyword">off</span>!</span><br><span class="line"></span><br><span class="line">  |==================================================      |  <span class="number">89</span>%</span><br><span class="line"></span><br><span class="line">| Pretty cool, huh? <span class="keyword">Finally</span>, <span class="keyword">let</span><span class="comment">'s take a look at the data to</span></span><br><span class="line">| convince ourselves that everything <span class="comment">'adds up'. Print my_data to</span></span><br><span class="line">| the console.</span><br><span class="line"></span><br><span class="line">&gt; my_data</span><br><span class="line">  [<span class="number">1</span>]           NA           NA           NA           NA</span><br><span class="line">  [<span class="number">5</span>]  <span class="number">0.124769189</span>           NA           NA  <span class="number">0.692392963</span></span><br><span class="line">  [<span class="number">9</span>] -<span class="number">1.746465523</span>           NA           NA -<span class="number">0.821663967</span></span><br><span class="line"> [<span class="number">13</span>]           NA -<span class="number">0.580694318</span> -<span class="number">1.511836462</span>  <span class="number">0.081071870</span></span><br><span class="line"> [<span class="number">17</span>]           NA           NA           NA  <span class="number">1.097226579</span></span><br><span class="line"> [<span class="number">21</span>] -<span class="number">3.126426132</span>           NA -<span class="number">1.199908058</span> -<span class="number">0.794525073</span></span><br><span class="line"> [<span class="number">25</span>]           NA -<span class="number">0.443946101</span>           NA           NA</span><br><span class="line"> [<span class="number">29</span>]           NA           NA           NA  <span class="number">0.742624944</span></span><br><span class="line"> [<span class="number">33</span>]           NA           NA -<span class="number">1.634124579</span>           NA</span><br><span class="line"> [<span class="number">37</span>] -<span class="number">0.850173971</span>  <span class="number">0.441734720</span>  <span class="number">0.513475081</span>           NA</span><br><span class="line"> [<span class="number">41</span>] -<span class="number">0.368936480</span> -<span class="number">1.357784834</span>           NA           NA</span><br><span class="line"> [<span class="number">45</span>]  <span class="number">0.007424283</span> -<span class="number">1.258690752</span>  <span class="number">0.779107391</span> -<span class="number">1.419960183</span></span><br><span class="line"> [<span class="number">49</span>]           NA -<span class="number">0.763940473</span>  <span class="number">0.450923280</span>           NA</span><br><span class="line"> [<span class="number">53</span>]           NA           NA           NA           NA</span><br><span class="line"> [<span class="number">57</span>]  <span class="number">0.925643135</span> -<span class="number">0.003863920</span>           NA           NA</span><br><span class="line"> [<span class="number">61</span>] -<span class="number">0.062849926</span> -<span class="number">1.557277905</span>           NA           NA</span><br><span class="line"> [<span class="number">65</span>]           NA           NA           NA           NA</span><br><span class="line"> [<span class="number">69</span>]           NA           NA           NA -<span class="number">0.284868951</span></span><br><span class="line"> [<span class="number">73</span>]           NA           NA  <span class="number">0.056676275</span>  <span class="number">0.240678898</span></span><br><span class="line"> [<span class="number">77</span>]           NA           NA -<span class="number">0.432834665</span>           NA</span><br><span class="line"> [<span class="number">81</span>]  <span class="number">0.784445940</span>           NA           NA -<span class="number">1.192080644</span></span><br><span class="line"> [<span class="number">85</span>]           NA  <span class="number">0.768473262</span> -<span class="number">0.170659651</span> -<span class="number">1.795948523</span></span><br><span class="line"> [<span class="number">89</span>]  <span class="number">1.249158629</span> -<span class="number">0.723159498</span> -<span class="number">0.460614065</span>  <span class="number">0.238104108</span></span><br><span class="line"> [<span class="number">93</span>] -<span class="number">1.025906852</span>           NA           NA           NA</span><br><span class="line"> [<span class="number">97</span>]  <span class="number">0.982965761</span> -<span class="number">0.084049625</span> -<span class="number">0.102720652</span>  <span class="number">0.552020816</span></span><br><span class="line"></span><br><span class="line">| You are really <span class="keyword">on</span> a roll!</span><br><span class="line"></span><br><span class="line">  |=====================================================   |  <span class="number">95</span>%</span><br><span class="line"></span><br><span class="line">| Now that we<span class="comment">'ve got NAs down pat, let's look at a second type of</span></span><br><span class="line">| missing value -- NaN, which stands <span class="keyword">for</span> <span class="comment">'not a number'. To</span></span><br><span class="line">| generate NaN, <span class="keyword">try</span> dividing (<span class="keyword">using</span> a forward slash) <span class="number">0</span> <span class="keyword">by</span> <span class="number">0</span> now.</span><br><span class="line"></span><br><span class="line">&gt; <span class="number">0</span>/<span class="number">0</span></span><br><span class="line">[<span class="number">1</span>] NaN</span><br><span class="line"></span><br><span class="line">| You are amazing!</span><br><span class="line"></span><br><span class="line">  |========================================================| <span class="number">100</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Let</span><span class="comment">'s do one more, just for fun. In R, Inf stands for infinity.</span></span><br><span class="line">| What happens <span class="keyword">if</span> you subtract Inf <span class="keyword">from</span> Inf?</span><br><span class="line"></span><br><span class="line">&gt; Inf-Inf</span><br><span class="line">[<span class="number">1</span>] NaN</span><br><span class="line"></span><br><span class="line">| You are amazing!</span><br><span class="line"></span><br><span class="line">| Are you currently enrolled <span class="keyword">in</span> the Coursera course associated</span><br><span class="line">| <span class="keyword">with</span> this lesson?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: Yes</span><br><span class="line"><span class="number">2</span>: No</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">| You<span class="comment">'ve reached the end of this lesson! Returning to the main</span></span><br><span class="line">| menu...</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">| Please choose a course, ]]>
    </summary>
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[swirl学习之四——Vectors]]></title>
    <link href="http://yoursite.com/2015/05/07/swirl%E5%AD%A6%E4%B9%A04/"/>
    <id>http://yoursite.com/2015/05/07/swirl学习4/</id>
    <published>2015-05-07T08:10:25.000Z</published>
    <updated>2015-05-07T08:15:42.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">| Please choose a course, <span class="keyword">or</span> type <span class="number">0</span> <span class="keyword">to</span> <span class="keyword">exit</span> swirl.</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: R Programming</span><br><span class="line"><span class="number">2</span>: Take <span class="keyword">me</span> <span class="keyword">to</span> <span class="keyword">the</span> swirl course repository!</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">| Please choose a lesson, <span class="keyword">or</span> type <span class="number">0</span> <span class="keyword">to</span> <span class="constant">return</span> <span class="keyword">to</span> course menu.</span><br><span class="line"></span><br><span class="line"> <span class="number">1</span>: Basic Building Blocks      <span class="number">2</span>: Workspace <span class="keyword">and</span> Files     </span><br><span class="line"> <span class="number">3</span>: Sequences <span class="keyword">of</span> Numbers       <span class="number">4</span>: Vectors                 </span><br><span class="line"> <span class="number">5</span>: Missing Values             <span class="number">6</span>: Subsetting Vectors      </span><br><span class="line"> <span class="number">7</span>: Matrices <span class="keyword">and</span> Data Frames   <span class="number">8</span>: Logic                   </span><br><span class="line"> <span class="number">9</span>: Functions                 <span class="number">10</span>: lapply <span class="keyword">and</span> sapply       </span><br><span class="line"><span class="number">11</span>: vapply <span class="keyword">and</span> tapply         <span class="number">12</span>: Looking <span class="keyword">at</span> Data         </span><br><span class="line"><span class="number">13</span>: Simulation                <span class="number">14</span>: Dates <span class="keyword">and</span> Times         </span><br><span class="line"><span class="number">15</span>: Base Graphics             </span><br><span class="line"></span><br><span class="line">Selection: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">  |                                                        |   <span class="number">0</span>%</span><br><span class="line"></span><br><span class="line">| The simplest <span class="keyword">and</span> most common data structure <span class="keyword">in</span> R <span class="keyword">is</span> <span class="keyword">the</span> vector.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==                                                      |   <span class="number">3</span>%</span><br><span class="line"></span><br><span class="line">| Vectors come <span class="keyword">in</span> two different flavors: atomic vectors <span class="keyword">and</span></span><br><span class="line">| lists. An atomic vector <span class="keyword">contains</span> exactly one data type, whereas</span><br><span class="line">| a <span class="type">list</span> may <span class="keyword">contain</span> multiple data types. We'll explore atomic</span><br><span class="line">| vectors further <span class="keyword">before</span> we <span class="keyword">get</span> <span class="keyword">to</span> lists.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===                                                     |   <span class="number">5</span>%</span><br><span class="line"></span><br><span class="line">| In previous lessons, we dealt entirely <span class="keyword">with</span> numeric vectors,</span><br><span class="line">| which are one type <span class="keyword">of</span> atomic vector. Other types <span class="keyword">of</span> atomic</span><br><span class="line">| vectors include logical, <span class="property">character</span>, <span class="type">integer</span>, <span class="keyword">and</span> complex. In</span><br><span class="line">| this lesson, we'll take a closer look <span class="keyword">at</span> logical <span class="keyword">and</span> <span class="property">character</span></span><br><span class="line">| vectors.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=====                                                   |   <span class="number">8</span>%</span><br><span class="line"></span><br><span class="line">| Logical vectors can <span class="keyword">contain</span> <span class="keyword">the</span> values TRUE, FALSE, <span class="keyword">and</span> NA (<span class="keyword">for</span></span><br><span class="line">| '<span class="keyword">not</span> available'). These values are generated <span class="keyword">as</span> <span class="keyword">the</span> <span class="constant">result</span> <span class="keyword">of</span></span><br><span class="line">| logical 'conditions'. Let's experiment <span class="keyword">with</span> <span class="keyword">some</span> simple</span><br><span class="line">| conditions.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |======                                                  |  <span class="number">11</span>%</span><br><span class="line"></span><br><span class="line">| First, create a numeric vector num_vect <span class="keyword">that</span> <span class="keyword">contains</span> <span class="keyword">the</span></span><br><span class="line">| values <span class="number">0.5</span>, <span class="number">55</span>, -<span class="number">10</span>, <span class="keyword">and</span> <span class="number">6.</span></span><br><span class="line"></span><br><span class="line">&gt; num_vect&lt;-c(<span class="number">0.5</span>,<span class="number">55</span>,-<span class="number">10</span>,<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">| Excellent work!</span><br><span class="line"></span><br><span class="line">  |========                                                |  <span class="number">14</span>%</span><br><span class="line"></span><br><span class="line">| Now, create a variable called tf <span class="keyword">that</span> gets <span class="keyword">the</span> <span class="constant">result</span> <span class="keyword">of</span></span><br><span class="line">| num_vect &lt; <span class="number">1</span>, which <span class="keyword">is</span> <span class="command">read</span> <span class="keyword">as</span> 'num_vect <span class="keyword">is</span> <span class="keyword">less than</span> <span class="number">1</span>'.</span><br><span class="line"></span><br><span class="line">&gt; tf&lt;-num_vect&lt;<span class="number">1</span></span><br><span class="line"></span><br><span class="line">| You're <span class="keyword">the</span> best!</span><br><span class="line"></span><br><span class="line">  |=========                                               |  <span class="number">16</span>%</span><br><span class="line"></span><br><span class="line">| What do you think tf will look like?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: a vector <span class="keyword">of</span> <span class="number">4</span> logical values</span><br><span class="line"><span class="number">2</span>: a single logical value</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">| You are amazing!</span><br><span class="line"></span><br><span class="line">  |===========                                             |  <span class="number">19</span>%</span><br><span class="line"></span><br><span class="line">| Print <span class="keyword">the</span> <span class="property">contents</span> <span class="keyword">of</span> tf now.</span><br><span class="line"></span><br><span class="line">&gt; tf</span><br><span class="line">[<span class="number">1</span>]  TRUE FALSE  TRUE FALSE</span><br><span class="line"></span><br><span class="line">| That's a job well done!</span><br><span class="line"></span><br><span class="line">  |============                                            |  <span class="number">22</span>%</span><br><span class="line"></span><br><span class="line">| The statement num_vect &lt; <span class="number">1</span> <span class="keyword">is</span> a condition <span class="keyword">and</span> tf tells us</span><br><span class="line">| whether each corresponding element <span class="keyword">of</span> our numeric vector</span><br><span class="line">| num_vect satisfies this condition.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==============                                          |  <span class="number">24</span>%</span><br><span class="line"></span><br><span class="line">| The <span class="keyword">first</span> element <span class="keyword">of</span> num_vect <span class="keyword">is</span> <span class="number">0.5</span>, which <span class="keyword">is</span> <span class="keyword">less than</span> <span class="number">1</span> <span class="keyword">and</span></span><br><span class="line">| therefore <span class="keyword">the</span> statement <span class="number">0.5</span> &lt; <span class="number">1</span> <span class="keyword">is</span> TRUE. The <span class="keyword">second</span> element <span class="keyword">of</span></span><br><span class="line">| num_vect <span class="keyword">is</span> <span class="number">55</span>, which <span class="keyword">is</span> <span class="keyword">greater than</span> <span class="number">1</span>, so <span class="keyword">the</span> statement <span class="number">55</span> &lt;</span><br><span class="line">| <span class="number">1</span> <span class="keyword">is</span> FALSE. The same logic applies <span class="keyword">for</span> <span class="keyword">the</span> <span class="keyword">third</span> <span class="keyword">and</span> <span class="keyword">fourth</span></span><br><span class="line">| elements.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===============                                         |  <span class="number">27</span>%</span><br><span class="line"></span><br><span class="line">| Let's <span class="keyword">try</span> another. Type num_vect &gt;= <span class="number">6</span> <span class="keyword">without</span> assigning <span class="keyword">the</span></span><br><span class="line">| <span class="constant">result</span> <span class="keyword">to</span> a new variable.</span><br><span class="line"></span><br><span class="line">&gt; num_vect&gt;=<span class="number">6</span></span><br><span class="line">[<span class="number">1</span>] FALSE  TRUE FALSE  TRUE</span><br><span class="line"></span><br><span class="line">| Nice work!</span><br><span class="line"></span><br><span class="line">  |=================                                       |  <span class="number">30</span>%</span><br><span class="line"></span><br><span class="line">| This <span class="property">time</span>, we are asking whether each individual element <span class="keyword">of</span></span><br><span class="line">| num_vect <span class="keyword">is</span> <span class="keyword">greater than</span> OR <span class="keyword">equal</span> <span class="keyword">to</span> <span class="number">6.</span> Since only <span class="number">55</span> <span class="keyword">and</span> <span class="number">6</span> are</span><br><span class="line">| <span class="keyword">greater than</span> <span class="keyword">or</span> <span class="keyword">equal</span> <span class="keyword">to</span> <span class="number">6</span>, <span class="keyword">the</span> <span class="keyword">second</span> <span class="keyword">and</span> <span class="keyword">fourth</span> elements <span class="keyword">of</span></span><br><span class="line">| <span class="keyword">the</span> <span class="constant">result</span> are TRUE <span class="keyword">and</span> <span class="keyword">the</span> <span class="keyword">first</span> <span class="keyword">and</span> <span class="keyword">third</span> elements are FALSE.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==================                                      |  <span class="number">32</span>%</span><br><span class="line"></span><br><span class="line">| The `&lt;` <span class="keyword">and</span> `&gt;=` symbols <span class="keyword">in</span> these examples are called 'logical</span><br><span class="line">| operators'. Other logical operators include `&gt;`, `&lt;=`, `==` <span class="keyword">for</span></span><br><span class="line">| exact equality, <span class="keyword">and</span> `!=` <span class="keyword">for</span> inequality.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |====================                                    |  <span class="number">35</span>%</span><br><span class="line"></span><br><span class="line">| If we have two logical expressions, A <span class="keyword">and</span> B, we can ask whether</span><br><span class="line">| <span class="keyword">at</span> least one <span class="keyword">is</span> TRUE <span class="keyword">with</span> A | B (logical '<span class="keyword">or</span>' a.k.a. 'union')</span><br><span class="line">| <span class="keyword">or</span> whether they are both TRUE <span class="keyword">with</span> A &amp; B (logical '<span class="keyword">and</span>' a.k.a.</span><br><span class="line">| 'intersection'). Lastly, !A <span class="keyword">is</span> <span class="keyword">the</span> negation <span class="keyword">of</span> A <span class="keyword">and</span> <span class="keyword">is</span> TRUE</span><br><span class="line">| when A <span class="keyword">is</span> FALSE <span class="keyword">and</span> vice versa.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=====================                                   |  <span class="number">38</span>%</span><br><span class="line"></span><br><span class="line">| It's a good idea <span class="keyword">to</span> spend <span class="keyword">some</span> <span class="property">time</span> playing <span class="keyword">around</span> <span class="keyword">with</span> various</span><br><span class="line">| combinations <span class="keyword">of</span> these logical operators <span class="keyword">until</span> you <span class="keyword">get</span></span><br><span class="line">| comfortable <span class="keyword">with</span> their use. We'll do a few examples here <span class="keyword">to</span> <span class="keyword">get</span></span><br><span class="line">| you started.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=======================                                 |  <span class="number">41</span>%</span><br><span class="line"></span><br><span class="line">| Try your best <span class="keyword">to</span> predict <span class="keyword">the</span> <span class="constant">result</span> <span class="keyword">of</span> each <span class="keyword">of</span> <span class="keyword">the</span> following</span><br><span class="line">| statements. You can use pencil <span class="keyword">and</span> paper <span class="keyword">to</span> work them out <span class="keyword">if</span></span><br><span class="line">| <span class="keyword">it</span>'s helpful. If you <span class="keyword">get</span> stuck, just guess <span class="keyword">and</span> you've got a <span class="number">50</span>%</span><br><span class="line">| chance <span class="keyword">of</span> getting <span class="keyword">the</span> right answer!</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |========================                                |  <span class="number">43</span>%</span><br><span class="line"></span><br><span class="line">| (<span class="number">3</span> &gt; <span class="number">5</span>) &amp; (<span class="number">4</span> == <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: FALSE</span><br><span class="line"><span class="number">2</span>: TRUE</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">| Keep working like <span class="keyword">that</span> <span class="keyword">and</span> you'll <span class="keyword">get</span> there!</span><br><span class="line"></span><br><span class="line">  |==========================                              |  <span class="number">46</span>%</span><br><span class="line"></span><br><span class="line">| (TRUE == TRUE) | (TRUE == FALSE)</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: FALSE</span><br><span class="line"><span class="number">2</span>: TRUE</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">| Perseverance, <span class="keyword">that</span>'s <span class="keyword">the</span> answer.</span><br><span class="line"></span><br><span class="line">  |===========================                             |  <span class="number">49</span>%</span><br><span class="line"></span><br><span class="line">| ((<span class="number">111</span> &gt;= <span class="number">111</span>) | !(TRUE)) &amp; ((<span class="number">4</span> + <span class="number">1</span>) == <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: FALSE</span><br><span class="line"><span class="number">2</span>: TRUE</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">| You got <span class="keyword">it</span> right!</span><br><span class="line"></span><br><span class="line">  |=============================                           |  <span class="number">51</span>%</span><br><span class="line"></span><br><span class="line">| Don't worry <span class="keyword">if</span> you found these <span class="keyword">to</span> be tricky. They're supposed</span><br><span class="line">| <span class="keyword">to</span> be. Working <span class="keyword">with</span> logical statements <span class="keyword">in</span> R takes practice, <span class="keyword">but</span></span><br><span class="line">| your efforts will be rewarded <span class="keyword">in</span> future lessons (e.g.</span><br><span class="line">| subsetting <span class="keyword">and</span> control structures).</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==============================                          |  <span class="number">54</span>%</span><br><span class="line"></span><br><span class="line">| Character vectors are also very common <span class="keyword">in</span> R. Double quotes are</span><br><span class="line">| used <span class="keyword">to</span> distinguish <span class="property">character</span> objects, <span class="keyword">as</span> <span class="keyword">in</span> <span class="keyword">the</span> following</span><br><span class="line">| example.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |================================                        |  <span class="number">57</span>%</span><br><span class="line"></span><br><span class="line">| Create a <span class="property">character</span> vector <span class="keyword">that</span> <span class="keyword">contains</span> <span class="keyword">the</span> following <span class="property">words</span>:</span><br><span class="line">| <span class="string">"My"</span>, <span class="string">"name"</span>, <span class="string">"is"</span>. Remember <span class="keyword">to</span> enclose each <span class="property">word</span> <span class="keyword">in</span> <span class="keyword">its</span> own</span><br><span class="line">| <span class="keyword">set</span> <span class="keyword">of</span> double quotes, so <span class="keyword">that</span> R knows they are <span class="property">character</span></span><br><span class="line">| strings. Store <span class="keyword">the</span> vector <span class="keyword">in</span> a variable called my_char.</span><br><span class="line"></span><br><span class="line">&gt; my_char&lt;-c(<span class="string">"My"</span>,<span class="string">"name"</span>,<span class="string">"is"</span>)</span><br><span class="line"></span><br><span class="line">| Keep up <span class="keyword">the</span> great work!</span><br><span class="line"></span><br><span class="line">  |=================================                       |  <span class="number">59</span>%</span><br><span class="line"></span><br><span class="line">| Print <span class="keyword">the</span> <span class="property">contents</span> <span class="keyword">of</span> my_char <span class="keyword">to</span> see what <span class="keyword">it</span> looks like.</span><br><span class="line"></span><br><span class="line">&gt; my_char</span><br><span class="line">[<span class="number">1</span>] <span class="string">"My"</span>   <span class="string">"name"</span> <span class="string">"is"</span>  </span><br><span class="line"></span><br><span class="line">| You got <span class="keyword">it</span>!</span><br><span class="line"></span><br><span class="line">  |===================================                     |  <span class="number">62</span>%</span><br><span class="line"></span><br><span class="line">| Right now, my_char <span class="keyword">is</span> a <span class="property">character</span> vector <span class="keyword">of</span> <span class="property">length</span> <span class="number">3.</span> Let's <span class="command">say</span></span><br><span class="line">| we want <span class="keyword">to</span> join <span class="keyword">the</span> elements <span class="keyword">of</span> my_char together <span class="keyword">into</span> one</span><br><span class="line">| continuous <span class="property">character</span> <span class="type">string</span> (i.e. a <span class="property">character</span> vector <span class="keyword">of</span> <span class="property">length</span></span><br><span class="line">| <span class="number">1</span>). We can do this using <span class="keyword">the</span> paste() function.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |====================================                    |  <span class="number">65</span>%</span><br><span class="line"></span><br><span class="line">| Type paste(my_char, collapse = <span class="string">" "</span>) now. Make sure there's a</span><br><span class="line">| <span class="constant">space</span> <span class="keyword">between</span> <span class="keyword">the</span> double quotes <span class="keyword">in</span> <span class="keyword">the</span> `collapse` argument.</span><br><span class="line">| You'll see why <span class="keyword">in</span> a <span class="keyword">second</span>.</span><br><span class="line"></span><br><span class="line">&gt; paste(my_char,collapse = <span class="string">" "</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"My name is"</span></span><br><span class="line"></span><br><span class="line">| Excellent work!</span><br><span class="line"></span><br><span class="line">  |======================================                  |  <span class="number">68</span>%</span><br><span class="line"></span><br><span class="line">| The `collapse` argument <span class="keyword">to</span> <span class="keyword">the</span> paste() function tells R <span class="keyword">that</span></span><br><span class="line">| when we join together <span class="keyword">the</span> elements <span class="keyword">of</span> <span class="keyword">the</span> my_char <span class="property">character</span></span><br><span class="line">| vector, we'd like <span class="keyword">to</span> separate them <span class="keyword">with</span> single spaces.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=======================================                 |  <span class="number">70</span>%</span><br><span class="line"></span><br><span class="line">| It seems <span class="keyword">that</span> we're missing something.... Ah, yes! Your <span class="property">name</span>!</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=========================================               |  <span class="number">73</span>%</span><br><span class="line"></span><br><span class="line">| To add (<span class="keyword">or</span> 'concatenate') your <span class="property">name</span> <span class="keyword">to</span> <span class="keyword">the</span> <span class="keyword">end</span> <span class="keyword">of</span> my_char, use</span><br><span class="line">| <span class="keyword">the</span> c() function like this: c(my_char, <span class="string">"your_name_here"</span>). Place</span><br><span class="line">| your <span class="property">name</span> <span class="keyword">in</span> double quotes <span class="keyword">where</span> I've <span class="keyword">put</span> <span class="string">"your_name_here"</span>. Try</span><br><span class="line">| <span class="keyword">it</span> now, storing <span class="keyword">the</span> <span class="constant">result</span> <span class="keyword">in</span> a new variable called my_name.</span><br><span class="line"></span><br><span class="line">&gt; my_name&lt;-c(my_char,<span class="string">"Peter"</span>)</span><br><span class="line"></span><br><span class="line">| You are doing so well!</span><br><span class="line"></span><br><span class="line">  |==========================================              |  <span class="number">76</span>%</span><br><span class="line"></span><br><span class="line">| Take a look <span class="keyword">at</span> <span class="keyword">the</span> <span class="property">contents</span> <span class="keyword">of</span> my_name.</span><br><span class="line"></span><br><span class="line">&gt; my_name</span><br><span class="line">[<span class="number">1</span>] <span class="string">"My"</span>    <span class="string">"name"</span>  <span class="string">"is"</span>    <span class="string">"Peter"</span></span><br><span class="line"></span><br><span class="line">| Your dedication <span class="keyword">is</span> inspiring!</span><br><span class="line"></span><br><span class="line">  |============================================            |  <span class="number">78</span>%</span><br><span class="line"></span><br><span class="line">| Now, use <span class="keyword">the</span> paste() function once more <span class="keyword">to</span> join <span class="keyword">the</span> <span class="property">words</span> <span class="keyword">in</span></span><br><span class="line">| my_name together <span class="keyword">into</span> a single <span class="property">character</span> <span class="type">string</span>. Don't forget</span><br><span class="line">| <span class="keyword">to</span> <span class="command">say</span> collapse = <span class="string">" "</span>!</span><br><span class="line"></span><br><span class="line">&gt; paste(my_name,collapse = <span class="string">" "</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"My name is Peter"</span></span><br><span class="line"></span><br><span class="line">| Great job!</span><br><span class="line"></span><br><span class="line">  |=============================================           |  <span class="number">81</span>%</span><br><span class="line"></span><br><span class="line">| In this example, we used <span class="keyword">the</span> paste() function <span class="keyword">to</span> collapse <span class="keyword">the</span></span><br><span class="line">| elements <span class="keyword">of</span> a single <span class="property">character</span> vector. paste() can also be used</span><br><span class="line">| <span class="keyword">to</span> join <span class="keyword">the</span> elements <span class="keyword">of</span> multiple <span class="property">character</span> vectors.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===============================================         |  <span class="number">84</span>%</span><br><span class="line"></span><br><span class="line">| In <span class="keyword">the</span> simplest case, we can join two <span class="property">character</span> vectors <span class="keyword">that</span></span><br><span class="line">| are each <span class="keyword">of</span> <span class="property">length</span> <span class="number">1</span> (i.e. join two <span class="property">words</span>). Try paste(<span class="string">"Hello"</span>,</span><br><span class="line">| <span class="string">"world!"</span>, sep = <span class="string">" "</span>), <span class="keyword">where</span> <span class="keyword">the</span> `sep` argument tells R <span class="keyword">that</span> we</span><br><span class="line">| want <span class="keyword">to</span> separate <span class="keyword">the</span> joined elements <span class="keyword">with</span> a single <span class="constant">space</span>.</span><br><span class="line"></span><br><span class="line">&gt; paste(<span class="string">"Hello"</span>,<span class="string">"world!"</span>,sep=<span class="string">" "</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"Hello world!"</span></span><br><span class="line"></span><br><span class="line">| Keep up <span class="keyword">the</span> great work!</span><br><span class="line"></span><br><span class="line">  |================================================        |  <span class="number">86</span>%</span><br><span class="line"></span><br><span class="line">| For a slightly more complicated example, we can join two</span><br><span class="line">| vectors, each <span class="keyword">of</span> <span class="property">length</span> <span class="number">3.</span> Use paste() <span class="keyword">to</span> join <span class="keyword">the</span> <span class="type">integer</span></span><br><span class="line">| vector <span class="number">1</span>:<span class="number">3</span> <span class="keyword">with</span> <span class="keyword">the</span> <span class="property">character</span> vector c(<span class="string">"X"</span>, <span class="string">"Y"</span>, <span class="string">"Z"</span>). This</span><br><span class="line">| <span class="property">time</span>, use sep = <span class="string">""</span> <span class="keyword">to</span> leave no <span class="constant">space</span> <span class="keyword">between</span> <span class="keyword">the</span> joined</span><br><span class="line">| elements.</span><br><span class="line"></span><br><span class="line">&gt; paste(<span class="number">1</span>:<span class="number">3</span>,c(<span class="string">"X"</span>,<span class="string">"Y"</span>,<span class="string">"Z"</span>),sep=<span class="string">""</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"1X"</span> <span class="string">"2Y"</span> <span class="string">"3Z"</span></span><br><span class="line"></span><br><span class="line">| You're <span class="keyword">the</span> best!</span><br><span class="line"></span><br><span class="line">  |==================================================      |  <span class="number">89</span>%</span><br><span class="line"></span><br><span class="line">| What do you think will happen <span class="keyword">if</span> our vectors are <span class="keyword">of</span> different</span><br><span class="line">| <span class="property">length</span>? (Hint: we talked <span class="keyword">about</span> this <span class="keyword">in</span> a previous lesson.)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===================================================     |  <span class="number">92</span>%</span><br><span class="line"></span><br><span class="line">| Vector recycling! Try paste(LETTERS, <span class="number">1</span>:<span class="number">4</span>, sep = <span class="string">"-"</span>), <span class="keyword">where</span></span><br><span class="line">| LETTERS <span class="keyword">is</span> a predefined variable <span class="keyword">in</span> R containing a <span class="property">character</span></span><br><span class="line">| vector <span class="keyword">of</span> all <span class="number">26</span> letters <span class="keyword">in</span> <span class="keyword">the</span> English alphabet.</span><br><span class="line"></span><br><span class="line">&gt; paste(LETTERS,<span class="number">1</span>:<span class="number">4</span>,sep=<span class="string">"-"</span>)</span><br><span class="line"> [<span class="number">1</span>] <span class="string">"A-1"</span> <span class="string">"B-2"</span> <span class="string">"C-3"</span> <span class="string">"D-4"</span> <span class="string">"E-1"</span> <span class="string">"F-2"</span> <span class="string">"G-3"</span> <span class="string">"H-4"</span> <span class="string">"I-1"</span> <span class="string">"J-2"</span></span><br><span class="line">[<span class="number">11</span>] <span class="string">"K-3"</span> <span class="string">"L-4"</span> <span class="string">"M-1"</span> <span class="string">"N-2"</span> <span class="string">"O-3"</span> <span class="string">"P-4"</span> <span class="string">"Q-1"</span> <span class="string">"R-2"</span> <span class="string">"S-3"</span> <span class="string">"T-4"</span></span><br><span class="line">[<span class="number">21</span>] <span class="string">"U-1"</span> <span class="string">"V-2"</span> <span class="string">"W-3"</span> <span class="string">"X-4"</span> <span class="string">"Y-1"</span> <span class="string">"Z-2"</span></span><br><span class="line"></span><br><span class="line">| Keep up <span class="keyword">the</span> great work!</span><br><span class="line"></span><br><span class="line">  |=====================================================   |  <span class="number">95</span>%</span><br><span class="line"></span><br><span class="line">| Since <span class="keyword">the</span> <span class="property">character</span> vector LETTERS <span class="keyword">is</span> longer than <span class="keyword">the</span> numeric</span><br><span class="line">| vector <span class="number">1</span>:<span class="number">4</span>, R simply recycles, <span class="keyword">or</span> repeats, <span class="number">1</span>:<span class="number">4</span> <span class="keyword">until</span> <span class="keyword">it</span> matches</span><br><span class="line">| <span class="keyword">the</span> <span class="property">length</span> <span class="keyword">of</span> LETTERS.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |======================================================  |  <span class="number">97</span>%</span><br><span class="line"></span><br><span class="line">| Also worth noting <span class="keyword">is</span> <span class="keyword">that</span> <span class="keyword">the</span> numeric vector <span class="number">1</span>:<span class="number">4</span> gets 'coerced'</span><br><span class="line">| <span class="keyword">into</span> a <span class="property">character</span> vector <span class="keyword">by</span> <span class="keyword">the</span> paste() function.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |========================================================| <span class="number">100</span>%</span><br><span class="line"></span><br><span class="line">| We'll discuss coercion <span class="keyword">in</span> another lesson, <span class="keyword">but</span> all <span class="keyword">it</span> really</span><br><span class="line">| means <span class="keyword">that</span> <span class="keyword">the</span> numbers <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="keyword">and</span> <span class="number">4</span> <span class="keyword">in</span> <span class="keyword">the</span> output <span class="keyword">above</span> are</span><br><span class="line">| no longer numbers <span class="keyword">to</span> R, <span class="keyword">but</span> rather <span class="property">characters</span> <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>,</span><br><span class="line">| <span class="keyword">and</span> <span class="string">"4"</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">| Are you currently enrolled <span class="keyword">in</span> <span class="keyword">the</span> Coursera course associated</span><br><span class="line">| <span class="keyword">with</span> this lesson?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: Yes</span><br><span class="line"><span class="number">2</span>: No</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">| You've reached <span class="keyword">the</span> <span class="keyword">end</span> <span class="keyword">of</span> this lesson! Returning <span class="keyword">to</span> <span class="keyword">the</span> main</span><br><span class="line">| menu...</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">| Please choose a co]]>
    </summary>
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[swirl学习之三——Sequences of Numbers]]></title>
    <link href="http://yoursite.com/2015/05/07/swirl%E5%AD%A6%E4%B9%A03/"/>
    <id>http://yoursite.com/2015/05/07/swirl学习3/</id>
    <published>2015-05-07T07:54:47.000Z</published>
    <updated>2015-05-07T08:01:18.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">| Please choose a course, <span class="keyword">or</span> type <span class="number">0</span> <span class="keyword">to</span> <span class="keyword">exit</span> swirl.</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: R Programming</span><br><span class="line"><span class="number">2</span>: <span class="keyword">Take</span> <span class="keyword">me</span> <span class="keyword">to</span> the swirl course repository!</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">| Please choose a lesson, <span class="keyword">or</span> type <span class="number">0</span> <span class="keyword">to</span> <span class="keyword">return</span> <span class="keyword">to</span> course menu.</span><br><span class="line"></span><br><span class="line"> <span class="number">1</span>: Basic Building Blocks      <span class="number">2</span>: Workspace <span class="keyword">and</span> Files     </span><br><span class="line"> <span class="number">3</span>: Sequences <span class="keyword">of</span> Numbers       <span class="number">4</span>: Vectors                 </span><br><span class="line"> <span class="number">5</span>: Missing Values             <span class="number">6</span>: Subsetting Vectors      </span><br><span class="line"> <span class="number">7</span>: Matrices <span class="keyword">and</span> Data Frames   <span class="number">8</span>: Logic                   </span><br><span class="line"> <span class="number">9</span>: Functions                 <span class="number">10</span>: lapply <span class="keyword">and</span> sapply       </span><br><span class="line"><span class="number">11</span>: vapply <span class="keyword">and</span> tapply         <span class="number">12</span>: Looking at Data         </span><br><span class="line"><span class="number">13</span>: Simulation                <span class="number">14</span>: Dates <span class="keyword">and</span> Times         </span><br><span class="line"><span class="number">15</span>: Base Graphics             </span><br><span class="line"></span><br><span class="line">Selection: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  |                                                        |   <span class="number">0</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">In</span> this lesson, you<span class="comment">'ll learn how to create sequences of numbers</span></span><br><span class="line">| <span class="keyword">in</span> R.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===                                                     |   <span class="number">5</span>%</span><br><span class="line"></span><br><span class="line">| The simplest way <span class="keyword">to</span> create a sequence <span class="keyword">of</span> numbers <span class="keyword">in</span> R <span class="keyword">is</span> <span class="keyword">by</span></span><br><span class="line">| <span class="keyword">using</span> the `:` <span class="keyword">operator</span>. Type <span class="number">1</span>:<span class="number">20</span> <span class="keyword">to</span> see how it works.</span><br><span class="line"></span><br><span class="line">&gt; <span class="number">1</span>:<span class="number">20</span></span><br><span class="line"> [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line">| Perseverance, that<span class="comment">'s the answer.</span></span><br><span class="line"></span><br><span class="line">  |=====                                                   |   <span class="number">9</span>%</span><br><span class="line"></span><br><span class="line">| That gave us every <span class="built_in">integer</span> between (<span class="keyword">and</span> including) <span class="number">1</span> <span class="keyword">and</span> <span class="number">20.</span> We</span><br><span class="line">| could also use it <span class="keyword">to</span> create a sequence <span class="keyword">of</span> real numbers. <span class="keyword">For</span></span><br><span class="line">| example, <span class="keyword">try</span> pi:<span class="number">10.</span></span><br><span class="line"></span><br><span class="line">&gt; pi:<span class="number">10</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">3.141593</span> <span class="number">4.141593</span> <span class="number">5.141593</span> <span class="number">6.141593</span> <span class="number">7.141593</span> <span class="number">8.141593</span> <span class="number">9.141593</span></span><br><span class="line"></span><br><span class="line">| Perseverance, that<span class="comment">'s the answer.</span></span><br><span class="line"></span><br><span class="line">  |========                                                |  <span class="number">14</span>%</span><br><span class="line"></span><br><span class="line">| The result <span class="keyword">is</span> a vector <span class="keyword">of</span> real numbers starting <span class="keyword">with</span> pi</span><br><span class="line">| (<span class="number">3.142</span>...) <span class="keyword">and</span> increasing <span class="keyword">in</span> increments <span class="keyword">of</span> <span class="number">1.</span> The upper limit</span><br><span class="line">| <span class="keyword">of</span> <span class="number">10</span> <span class="keyword">is</span> never reached, since the <span class="keyword">next</span> number <span class="keyword">in</span> our sequence</span><br><span class="line">| would be greater than <span class="number">10.</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==========                                              |  <span class="number">18</span>%</span><br><span class="line"></span><br><span class="line">| What happens <span class="keyword">if</span> we <span class="keyword">do</span> <span class="number">15</span>:<span class="number">1</span>? Give it a <span class="keyword">try</span> <span class="keyword">to</span> find out.</span><br><span class="line"></span><br><span class="line">&gt; <span class="number">15</span>:<span class="number">1</span></span><br><span class="line"> [<span class="number">1</span>] <span class="number">15</span> <span class="number">14</span> <span class="number">13</span> <span class="number">12</span> <span class="number">11</span> <span class="number">10</span>  <span class="number">9</span>  <span class="number">8</span>  <span class="number">7</span>  <span class="number">6</span>  <span class="number">5</span>  <span class="number">4</span>  <span class="number">3</span>  <span class="number">2</span>  <span class="number">1</span></span><br><span class="line"></span><br><span class="line">| Excellent job!</span><br><span class="line"></span><br><span class="line">  |=============                                           |  <span class="number">23</span>%</span><br><span class="line"></span><br><span class="line">| It counted backwards <span class="keyword">in</span> increments <span class="keyword">of</span> <span class="number">1</span>! It<span class="comment">'s unlikely we'd</span></span><br><span class="line">| want this behavior, but nonetheless it<span class="comment">'s good to know how it</span></span><br><span class="line">| could happen.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===============                                         |  <span class="number">27</span>%</span><br><span class="line"></span><br><span class="line">| Remember that <span class="keyword">if</span> you have questions about a particular R</span><br><span class="line">| <span class="keyword">function</span>, you can access its documentation <span class="keyword">with</span> a question mark</span><br><span class="line">| followed <span class="keyword">by</span> the <span class="keyword">function</span> name: ?function_name_here. However, <span class="keyword">in</span></span><br><span class="line">| the <span class="keyword">case</span> <span class="keyword">of</span> an <span class="keyword">operator</span> <span class="keyword">like</span> the colon used above, you must</span><br><span class="line">| enclose the symbol <span class="keyword">in</span> backticks <span class="keyword">like</span> this: ?`:`. (NOTE: The</span><br><span class="line">| backtick (`) <span class="keyword">key</span> <span class="keyword">is</span> generally located <span class="keyword">in</span> the top left corner <span class="keyword">of</span></span><br><span class="line">| a keyboard, above the Tab <span class="keyword">key</span>. <span class="keyword">If</span> you don<span class="comment">'t have a backtick</span></span><br><span class="line">| <span class="keyword">key</span>, you can use regular quotes.)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==================                                      |  <span class="number">32</span>%</span><br><span class="line"></span><br><span class="line">| Pull up the documentation <span class="keyword">for</span> `:` now.</span><br><span class="line"></span><br><span class="line">&gt; ?`:`</span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s a job well done!</span></span><br><span class="line"></span><br><span class="line">  |====================                                    |  <span class="number">36</span>%</span><br><span class="line"></span><br><span class="line">| Often, we<span class="comment">'ll desire more control over a sequence we're creating</span></span><br><span class="line">| than what the `:` <span class="keyword">operator</span> gives us. The seq() <span class="keyword">function</span> serves</span><br><span class="line">| this purpose.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=======================                                 |  <span class="number">41</span>%</span><br><span class="line"></span><br><span class="line">| The most basic use <span class="keyword">of</span> seq() does exactly the same thing <span class="keyword">as</span> the</span><br><span class="line">| `:` <span class="keyword">operator</span>. <span class="keyword">Try</span> seq(<span class="number">1</span>, <span class="number">20</span>) <span class="keyword">to</span> see this.</span><br><span class="line"></span><br><span class="line">&gt; seq(<span class="number">1</span>,<span class="number">20</span>)</span><br><span class="line"> [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s correct!</span></span><br><span class="line"></span><br><span class="line">  |=========================                               |  <span class="number">45</span>%</span><br><span class="line"></span><br><span class="line">| This gives us the same output <span class="keyword">as</span> <span class="number">1</span>:<span class="number">20.</span> However, <span class="keyword">let</span><span class="comment">'s say that</span></span><br><span class="line">| instead we want a vector <span class="keyword">of</span> numbers ranging <span class="keyword">from</span> <span class="number">0</span> <span class="keyword">to</span> <span class="number">10</span>,</span><br><span class="line">| incremented <span class="keyword">by</span> <span class="number">0.5</span>. seq(<span class="number">0</span>, <span class="number">10</span>, <span class="keyword">by</span>=<span class="number">0.5</span>) does just that. <span class="keyword">Try</span> it</span><br><span class="line">| out.</span><br><span class="line"></span><br><span class="line">&gt; seq(<span class="number">0</span>,<span class="number">10</span>,<span class="keyword">by</span>=<span class="number">0.5</span>)</span><br><span class="line"> [<span class="number">1</span>]  <span class="number">0.0</span>  <span class="number">0.5</span>  <span class="number">1.0</span>  <span class="number">1.5</span>  <span class="number">2.0</span>  <span class="number">2.5</span>  <span class="number">3.0</span>  <span class="number">3.5</span>  <span class="number">4.0</span>  <span class="number">4.5</span>  <span class="number">5.0</span>  <span class="number">5.5</span></span><br><span class="line">[<span class="number">13</span>]  <span class="number">6.0</span>  <span class="number">6.5</span>  <span class="number">7.0</span>  <span class="number">7.5</span>  <span class="number">8.0</span>  <span class="number">8.5</span>  <span class="number">9.0</span>  <span class="number">9.5</span> <span class="number">10.0</span></span><br><span class="line"></span><br><span class="line">| You are doing so well!</span><br><span class="line"></span><br><span class="line">  |============================                            |  <span class="number">50</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Or</span> maybe we don<span class="comment">'t care what the increment is and we just want a</span></span><br><span class="line">| sequence <span class="keyword">of</span> <span class="number">30</span> numbers between <span class="number">5</span> <span class="keyword">and</span> <span class="number">10.</span> seq(<span class="number">5</span>, <span class="number">10</span>, length=<span class="number">30</span>)</span><br><span class="line">| does the trick. Give it a shot now <span class="keyword">and</span> store the result <span class="keyword">in</span> a</span><br><span class="line">| <span class="keyword">new</span> variable called my_seq.</span><br><span class="line"></span><br><span class="line">&gt; my_seq&lt;-seq(<span class="number">5</span>,<span class="number">10</span>,length=<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">| You are quite good my <span class="keyword">friend</span>!</span><br><span class="line"></span><br><span class="line">  |===============================                         |  <span class="number">55</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">To</span> confirm that my_seq has length <span class="number">30</span>, we can use the length()</span><br><span class="line">| <span class="keyword">function</span>. <span class="keyword">Try</span> it now.</span><br><span class="line"></span><br><span class="line">&gt; length(my_seq)</span><br><span class="line">[<span class="number">1</span>] <span class="number">30</span></span><br><span class="line"></span><br><span class="line">| Perseverance, that<span class="comment">'s the answer.</span></span><br><span class="line"></span><br><span class="line">  |=================================                       |  <span class="number">59</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Let</span><span class="comment">'s pretend we don't know the length of my_seq, but we want</span></span><br><span class="line">| <span class="keyword">to</span> generate a sequence <span class="keyword">of</span> integers <span class="keyword">from</span> <span class="number">1</span> <span class="keyword">to</span> N, <span class="keyword">where</span> N</span><br><span class="line">| represents the length <span class="keyword">of</span> the my_seq vector. <span class="keyword">In</span> other words, we</span><br><span class="line">| want a <span class="keyword">new</span> vector (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, ...) that <span class="keyword">is</span> the same length <span class="keyword">as</span></span><br><span class="line">| my_seq.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |====================================                    |  <span class="number">64</span>%</span><br><span class="line"></span><br><span class="line">| There are several ways we could <span class="keyword">do</span> this. One possibility <span class="keyword">is</span> <span class="keyword">to</span></span><br><span class="line">| combine the `:` <span class="keyword">operator</span> <span class="keyword">and</span> the length() <span class="keyword">function</span> <span class="keyword">like</span> this:</span><br><span class="line">| <span class="number">1</span>:length(my_seq). Give that a <span class="keyword">try</span>.</span><br><span class="line"></span><br><span class="line">&gt; <span class="number">1</span>:length(my_seq)</span><br><span class="line"> [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span></span><br><span class="line">[<span class="number">21</span>] <span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span> <span class="number">25</span> <span class="number">26</span> <span class="number">27</span> <span class="number">28</span> <span class="number">29</span> <span class="number">30</span></span><br><span class="line"></span><br><span class="line">| You got it!</span><br><span class="line"></span><br><span class="line">  |======================================                  |  <span class="number">68</span>%</span><br><span class="line"></span><br><span class="line">| Another <span class="keyword">option</span> <span class="keyword">is</span> <span class="keyword">to</span> use seq(along.<span class="keyword">with</span> = my_seq). Give that a</span><br><span class="line">| <span class="keyword">try</span>.</span><br><span class="line"></span><br><span class="line">&gt; seq(along.<span class="keyword">with</span>=my_seq)</span><br><span class="line"> [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span></span><br><span class="line">[<span class="number">21</span>] <span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span> <span class="number">25</span> <span class="number">26</span> <span class="number">27</span> <span class="number">28</span> <span class="number">29</span> <span class="number">30</span></span><br><span class="line"></span><br><span class="line">| Keep working <span class="keyword">like</span> that <span class="keyword">and</span> you<span class="comment">'ll get there!</span></span><br><span class="line"></span><br><span class="line">  |=========================================               |  <span class="number">73</span>%</span><br><span class="line"></span><br><span class="line">| However, <span class="keyword">as</span> <span class="keyword">is</span> the <span class="keyword">case</span> <span class="keyword">with</span> many common tasks, R has a</span><br><span class="line">| separate built-<span class="keyword">in</span> <span class="keyword">function</span> <span class="keyword">for</span> this purpose called seq_along().</span><br><span class="line">| Type seq_along(my_seq) <span class="keyword">to</span> see it <span class="keyword">in</span> action.</span><br><span class="line"></span><br><span class="line">&gt; seq_along(my_seq)</span><br><span class="line"> [<span class="number">1</span>]  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span></span><br><span class="line">[<span class="number">21</span>] <span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span> <span class="number">25</span> <span class="number">26</span> <span class="number">27</span> <span class="number">28</span> <span class="number">29</span> <span class="number">30</span></span><br><span class="line"></span><br><span class="line">| You are doing so well!</span><br><span class="line"></span><br><span class="line">  |===========================================             |  <span class="number">77</span>%</span><br><span class="line"></span><br><span class="line">| There are often several approaches <span class="keyword">to</span> solving the same problem,</span><br><span class="line">| particularly <span class="keyword">in</span> R. Simple approaches that involve less typing</span><br><span class="line">| are generally best. It<span class="comment">'s also important for your code to be</span></span><br><span class="line">| readable, so that you <span class="keyword">and</span> others can figure out what<span class="comment">'s going on</span></span><br><span class="line">| without too much hassle.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==============================================          |  <span class="number">82</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">If</span> R has a built-<span class="keyword">in</span> <span class="keyword">function</span> <span class="keyword">for</span> a particular task, it<span class="comment">'s likely</span></span><br><span class="line">| that <span class="keyword">function</span> <span class="keyword">is</span> highly optimized <span class="keyword">for</span> that purpose <span class="keyword">and</span> <span class="keyword">is</span> your</span><br><span class="line">| best <span class="keyword">option</span>. <span class="keyword">As</span> you become a more advanced R programmer, you<span class="comment">'ll</span></span><br><span class="line">| design your own functions <span class="keyword">to</span> perform tasks <span class="keyword">when</span> there are no</span><br><span class="line">| better options. We<span class="comment">'ll explore writing your own functions in</span></span><br><span class="line">| future lessons.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |================================================        |  <span class="number">86</span>%</span><br><span class="line"></span><br><span class="line">| One more <span class="keyword">function</span> related <span class="keyword">to</span> creating sequences <span class="keyword">of</span> numbers <span class="keyword">is</span></span><br><span class="line">| rep(), which stands <span class="keyword">for</span> <span class="comment">'replicate'. Let's look at a few uses.</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===================================================     |  <span class="number">91</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">If</span> we<span class="comment">'re interested in creating a vector that contains 40</span></span><br><span class="line">| zeros, we can use rep(<span class="number">0</span>, times = <span class="number">40</span>). <span class="keyword">Try</span> it out.</span><br><span class="line"></span><br><span class="line">&gt; rep(<span class="number">0</span>,times=<span class="number">40</span>)</span><br><span class="line"> [<span class="number">1</span>] <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">[<span class="number">32</span>] <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">| Keep up the great work!</span><br><span class="line"></span><br><span class="line">  |=====================================================   |  <span class="number">95</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">If</span> instead we want our vector <span class="keyword">to</span> contain <span class="number">10</span> repetitions <span class="keyword">of</span> the</span><br><span class="line">| vector (<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>), we can <span class="keyword">do</span> rep(c(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>), times = <span class="number">10</span>). Go</span><br><span class="line">| ahead.</span><br><span class="line"></span><br><span class="line">&gt; rep(c(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>),times=<span class="number">10</span>)</span><br><span class="line"> [<span class="number">1</span>] <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">| Excellent job!</span><br><span class="line"></span><br><span class="line">  |========================================================| <span class="number">100</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Finally</span>, <span class="keyword">let</span><span class="comment">'s say that rather than repeating the vector (0, 1,</span></span><br><span class="line">| <span class="number">2</span>) over <span class="keyword">and</span> over again, we want our vector <span class="keyword">to</span> contain <span class="number">10</span> zeros,</span><br><span class="line">| <span class="keyword">then</span> <span class="number">10</span> ones, <span class="keyword">then</span> <span class="number">10</span> twos. We can <span class="keyword">do</span> this <span class="keyword">with</span> the `<span class="keyword">each</span>`</span><br><span class="line">| argument. <span class="keyword">Try</span> rep(c(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>), <span class="keyword">each</span> = <span class="number">10</span>).</span><br><span class="line"></span><br><span class="line">&gt; rep(c(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>),<span class="keyword">each</span>=<span class="number">10</span>)</span><br><span class="line"> [<span class="number">1</span>] <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">| Keep working <span class="keyword">like</span> that <span class="keyword">and</span> you<span class="comment">'ll get there!</span></span><br><span class="line"></span><br><span class="line">| Are you currently enrolled <span class="keyword">in</span> the Coursera course associated</span><br><span class="line">| <span class="keyword">with</span> this lesson?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: Yes</span><br><span class="line"><span class="number">2</span>: No</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">| You<span class="comment">'ve reached the end of this lesson! Returning to the main</span></span><br><span class="line">| menu...</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">| Please choose a course, ]]>
    </summary>
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[swirl学习之二——Workspace and Files]]></title>
    <link href="http://yoursite.com/2015/05/07/swirl%E5%AD%A6%E4%B9%A02/"/>
    <id>http://yoursite.com/2015/05/07/swirl学习2/</id>
    <published>2015-05-07T06:44:44.000Z</published>
    <updated>2015-05-07T16:51:41.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">| Please choose a course, <span class="keyword">or</span> <span class="keyword">type</span> <span class="number">0</span> <span class="keyword">to</span> <span class="keyword">exit</span> swirl.</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: R Programming</span><br><span class="line"><span class="number">2</span>: Take me <span class="keyword">to</span> the swirl course repository!</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">| Please choose a lesson, <span class="keyword">or</span> <span class="keyword">type</span> <span class="number">0</span> <span class="keyword">to</span> <span class="keyword">return</span> <span class="keyword">to</span> course menu.</span><br><span class="line"></span><br><span class="line"> <span class="number">1</span>: Basic Building Blocks      <span class="number">2</span>: Workspace <span class="keyword">and</span> Files        <span class="number">3</span>: Sequences <span class="keyword">of</span> Numbers    </span><br><span class="line"> <span class="number">4</span>: Vectors                    <span class="number">5</span>: Missing Values             <span class="number">6</span>: Subsetting Vectors      </span><br><span class="line"> <span class="number">7</span>: Matrices <span class="keyword">and</span> Data Frames   <span class="number">8</span>: Logic                      <span class="number">9</span>: Functions               </span><br><span class="line"><span class="number">10</span>: lapply <span class="keyword">and</span> sapply         <span class="number">11</span>: vapply <span class="keyword">and</span> tapply         <span class="number">12</span>: Looking at Data         </span><br><span class="line"><span class="number">13</span>: Simulation                <span class="number">14</span>: Dates <span class="keyword">and</span> Times           <span class="number">15</span>: Base Graphics           </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Selection: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  |                                                                                      |   <span class="number">0</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">In</span> this lesson, you<span class="attribute">'ll</span> learn how <span class="keyword">to</span> examine your local workspace <span class="keyword">in</span> R <span class="keyword">and</span> <span class="keyword">begin</span> <span class="keyword">to</span> explore</span><br><span class="line">| the relationship between your workspace <span class="keyword">and</span> the <span class="keyword">file</span> system <span class="keyword">of</span> your machine.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==                                                                                    |   <span class="number">2</span>%</span><br><span class="line"></span><br><span class="line">| Because different operating systems have different conventions <span class="keyword">with</span> regards <span class="keyword">to</span> things like</span><br><span class="line">| <span class="keyword">file</span> paths, the outputs <span class="keyword">of</span> these commands may vary across machines.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |====                                                                                  |   <span class="number">5</span>%</span><br><span class="line"></span><br><span class="line">| However it<span class="attribute">'s</span> important <span class="keyword">to</span> note that R provides a common API (a common set <span class="keyword">of</span> commands) <span class="keyword">for</span></span><br><span class="line">| interacting <span class="keyword">with</span> files, that way your code will work across different kinds <span class="keyword">of</span> computers.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |======                                                                                |   <span class="number">7</span>%</span><br><span class="line"></span><br><span class="line">| Let<span class="attribute">'s</span> jump right <span class="keyword">in</span> so you can get a feel <span class="keyword">for</span> how these special functions work!</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |========                                                                              |  <span class="number">10</span>%</span><br><span class="line"></span><br><span class="line">| Determine which directory your R session <span class="keyword">is</span> using as its current working directory using</span><br><span class="line">| getwd().</span><br><span class="line"></span><br><span class="line">&gt; getwd()</span><br><span class="line">[<span class="number">1</span>] <span class="string">"/Users/xiaomodepro/DataAnalysis"</span></span><br><span class="line"></span><br><span class="line">| Keep up the great work!</span><br><span class="line"></span><br><span class="line">  |==========                                                                            |  <span class="number">12</span>%</span><br><span class="line"></span><br><span class="line">| List <span class="keyword">all</span> the objects <span class="keyword">in</span> your local workspace using ls().</span><br><span class="line"></span><br><span class="line">&gt; ls()</span><br><span class="line"><span class="typename">character</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">| You are quite good my friend!</span><br><span class="line"></span><br><span class="line">  |=============                                                                         |  <span class="number">15</span>%</span><br><span class="line"></span><br><span class="line">| Some R commands are the same as their equivalents commands <span class="keyword">on</span> Linux <span class="keyword">or</span> <span class="keyword">on</span> a Mac. Both</span><br><span class="line">| Linux <span class="keyword">and</span> Mac operating systems are based <span class="keyword">on</span> an operating system called Unix. It<span class="attribute">'s</span> always</span><br><span class="line">| a good idea <span class="keyword">to</span> learn more about Unix!</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===============                                                                       |  <span class="number">17</span>%</span><br><span class="line"></span><br><span class="line">| Assign <span class="number">9</span> <span class="keyword">to</span> x using x &lt;- <span class="number">9</span>.</span><br><span class="line"></span><br><span class="line">&gt; x&lt;-<span class="number">9</span></span><br><span class="line"></span><br><span class="line">| You are really <span class="keyword">on</span> a roll!</span><br><span class="line"></span><br><span class="line">  |=================                                                                     |  <span class="number">20</span>%</span><br><span class="line"></span><br><span class="line">| Now take a look at objects that are <span class="keyword">in</span> your workspace using ls().</span><br><span class="line"></span><br><span class="line">&gt; ls()</span><br><span class="line">[<span class="number">1</span>] <span class="string">"x"</span></span><br><span class="line"></span><br><span class="line">| Keep working like that <span class="keyword">and</span> you<span class="attribute">'ll</span> get there!</span><br><span class="line"></span><br><span class="line">  |===================                                                                   |  <span class="number">22</span>%</span><br><span class="line"></span><br><span class="line">| List <span class="keyword">all</span> the files <span class="keyword">in</span> your working directory using list.files() <span class="keyword">or</span> dir().</span><br><span class="line"></span><br><span class="line">&gt; list.files()</span><br><span class="line"> [<span class="number">1</span>] <span class="string">"Anscombe.R"</span>                          <span class="string">"case_Anscombe.R"</span>                                      </span><br><span class="line"></span><br><span class="line">| Nice work!</span><br><span class="line"></span><br><span class="line">  |=====================                                                                 |  <span class="number">24</span>%</span><br><span class="line"></span><br><span class="line">| As we go through this lesson, you should be examining the help page <span class="keyword">for</span> each <span class="keyword">new</span> <span class="keyword">function</span>.</span><br><span class="line">| Check <span class="keyword">out</span> the help page <span class="keyword">for</span> list.files <span class="keyword">with</span> the command ?list.files.</span><br><span class="line"></span><br><span class="line">&gt; ?list.files</span><br><span class="line"></span><br><span class="line">| Keep working like that <span class="keyword">and</span> you<span class="attribute">'ll</span> get there!</span><br><span class="line"></span><br><span class="line">  |=======================                                                               |  <span class="number">27</span>%</span><br><span class="line"></span><br><span class="line">| One <span class="keyword">of</span> the most helpful parts <span class="keyword">of</span> any R help <span class="keyword">file</span> <span class="keyword">is</span> the See Also section. Read that</span><br><span class="line">| section <span class="keyword">for</span> list.files. Some <span class="keyword">of</span> these functions may be used <span class="keyword">in</span> later portions <span class="keyword">of</span> this</span><br><span class="line">| lesson.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=========================                                                             |  <span class="number">29</span>%</span><br><span class="line"></span><br><span class="line">| Using the args() <span class="keyword">function</span> <span class="keyword">on</span> a <span class="keyword">function</span> name <span class="keyword">is</span> also a handy way <span class="keyword">to</span> see what arguments a</span><br><span class="line">| <span class="keyword">function</span> can take.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===========================                                                           |  <span class="number">32</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Use</span> the args() <span class="keyword">function</span> <span class="keyword">to</span> determine the arguments <span class="keyword">to</span> list.files().</span><br><span class="line"></span><br><span class="line">&gt; args(list.files)</span><br><span class="line"><span class="keyword">function</span> (path = <span class="string">"."</span>, pattern = <span class="keyword">NULL</span>, <span class="keyword">all</span>.files = FALSE, full.names = FALSE, </span><br><span class="line">    recursive = FALSE, ignore.<span class="keyword">case</span> = FALSE, include.dirs = FALSE, </span><br><span class="line">    no.. = FALSE) </span><br><span class="line"><span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line">| You got it right!</span><br><span class="line"></span><br><span class="line">  |=============================                                                         |  <span class="number">34</span>%</span><br><span class="line"></span><br><span class="line">| Assign the value <span class="keyword">of</span> the current working directory <span class="keyword">to</span> a <span class="keyword">variable</span> called <span class="string">"old.dir"</span>.</span><br><span class="line"></span><br><span class="line">&gt; old.dir&lt;-getwd()</span><br><span class="line"></span><br><span class="line">| You<span class="attribute">'re</span> the best!</span><br><span class="line"></span><br><span class="line">  |===============================                                                       |  <span class="number">37</span>%</span><br><span class="line"></span><br><span class="line">| We will <span class="keyword">use</span> old.dir at the <span class="keyword">end</span> <span class="keyword">of</span> this lesson <span class="keyword">to</span> move back <span class="keyword">to</span> the place that we started. A</span><br><span class="line">| lot <span class="keyword">of</span> query functions like getwd() have the useful <span class="keyword">property</span> that they <span class="keyword">return</span> the answer</span><br><span class="line">| <span class="keyword">to</span> the question as a result <span class="keyword">of</span> the <span class="keyword">function</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==================================                                                    |  <span class="number">39</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Use</span> dir.create() <span class="keyword">to</span> create a directory <span class="keyword">in</span> the current working directory called <span class="string">"testdir"</span>.</span><br><span class="line"></span><br><span class="line">&gt; dir.create(<span class="string">"testdir"</span>)</span><br><span class="line"></span><br><span class="line">| Excellent job!</span><br><span class="line"></span><br><span class="line">  |====================================                                                  |  <span class="number">41</span>%</span><br><span class="line"></span><br><span class="line">| We will do <span class="keyword">all</span> our work <span class="keyword">in</span> this <span class="keyword">new</span> directory <span class="keyword">and</span> <span class="keyword">then</span> delete it <span class="keyword">after</span> we are done. This</span><br><span class="line">| <span class="keyword">is</span> the R analog <span class="keyword">to</span> <span class="string">"Take only pictures, leave only footprints."</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |======================================                                                |  <span class="number">44</span>%</span><br><span class="line"></span><br><span class="line">| Set your working directory <span class="keyword">to</span> <span class="string">"testdir"</span> <span class="keyword">with</span> the setwd() command.</span><br><span class="line"></span><br><span class="line">&gt; setwd(<span class="string">"testdir"</span>)</span><br><span class="line"></span><br><span class="line">| Excellent job!</span><br><span class="line"></span><br><span class="line">  |========================================                                              |  <span class="number">46</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">In</span> general, you will want your working directory <span class="keyword">to</span> be someplace sensible, perhaps created</span><br><span class="line">| <span class="keyword">for</span> the specific project that you are working <span class="keyword">on</span>. <span class="keyword">In</span> fact, organizing your work <span class="keyword">in</span> R</span><br><span class="line">| packages using RStudio <span class="keyword">is</span> an excellent option. Check <span class="keyword">out</span> RStudio at</span><br><span class="line">| http://www.rstudio.com/</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==========================================                                            |  <span class="number">49</span>%</span><br><span class="line"></span><br><span class="line">| Create a <span class="keyword">file</span> <span class="keyword">in</span> your working directory called <span class="string">"mytest.R"</span> using the <span class="keyword">file</span>.create()</span><br><span class="line">| <span class="keyword">function</span>.</span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">file</span>.create(<span class="string">"mytest.R"</span>)</span><br><span class="line">[<span class="number">1</span>] TRUE</span><br><span class="line"></span><br><span class="line">| You got it!</span><br><span class="line"></span><br><span class="line">  |============================================                                          |  <span class="number">51</span>%</span><br><span class="line"></span><br><span class="line">| This should be the only <span class="keyword">file</span> <span class="keyword">in</span> this newly created directory. Let<span class="attribute">'s</span> check this by listing</span><br><span class="line">| <span class="keyword">all</span> the files <span class="keyword">in</span> the current directory.</span><br><span class="line"></span><br><span class="line">&gt; list.files()</span><br><span class="line">[<span class="number">1</span>] <span class="string">"mytest.R"</span></span><br><span class="line"></span><br><span class="line">| Nice work!</span><br><span class="line"></span><br><span class="line">  |==============================================                                        |  <span class="number">54</span>%</span><br><span class="line"></span><br><span class="line">| Check <span class="keyword">to</span> see <span class="keyword">if</span> <span class="string">"mytest.R"</span> exists <span class="keyword">in</span> the working directory using the <span class="keyword">file</span>.exists()</span><br><span class="line">| <span class="keyword">function</span>.</span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">file</span>.exists(<span class="string">"mytest.R"</span>)</span><br><span class="line">[<span class="number">1</span>] TRUE</span><br><span class="line"></span><br><span class="line">| <span class="keyword">All</span> that hard work <span class="keyword">is</span> paying off!</span><br><span class="line"></span><br><span class="line">  |================================================                                      |  <span class="number">56</span>%</span><br><span class="line"></span><br><span class="line">| These sorts <span class="keyword">of</span> functions are excessive <span class="keyword">for</span> interactive <span class="keyword">use</span>. But, <span class="keyword">if</span> you are running a</span><br><span class="line">| program that loops through a series <span class="keyword">of</span> files <span class="keyword">and</span> does some processing <span class="keyword">on</span> each one, you</span><br><span class="line">| will want <span class="keyword">to</span> check <span class="keyword">to</span> see that each exists before you try <span class="keyword">to</span> <span class="keyword">process</span> it.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==================================================                                    |  <span class="number">59</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Access</span> information about the <span class="keyword">file</span> <span class="string">"mytest.R"</span> by using <span class="keyword">file</span>.info().</span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">file</span>.info(<span class="string">"mytest.R"</span>)</span><br><span class="line">         size isdir mode               mtime               ctime               atime uid gid</span><br><span class="line">mytest.R    <span class="number">0</span> FALSE  <span class="number">644</span> <span class="number">2015</span>-<span class="number">05</span>-<span class="number">08</span> <span class="number">00</span>:<span class="number">36</span>:<span class="number">33</span> <span class="number">2015</span>-<span class="number">05</span>-<span class="number">08</span> <span class="number">00</span>:<span class="number">36</span>:<span class="number">33</span> <span class="number">2015</span>-<span class="number">05</span>-<span class="number">08</span> <span class="number">00</span>:<span class="number">36</span>:<span class="number">33</span> <span class="number">501</span>  <span class="number">20</span></span><br><span class="line">             uname grname</span><br><span class="line">mytest.R xmuxiaomo  staff</span><br><span class="line"></span><br><span class="line">| That<span class="attribute">'s</span> the answer I was looking <span class="keyword">for</span>.</span><br><span class="line"></span><br><span class="line">  |====================================================                                  |  <span class="number">61</span>%</span><br><span class="line"></span><br><span class="line">| You can <span class="keyword">use</span> the $ operator <span class="comment">--- e.g., file.info("mytest.R")$mode --- to grab specific</span></span><br><span class="line">| items.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=======================================================                               |  <span class="number">63</span>%</span><br><span class="line"></span><br><span class="line">| Change the name <span class="keyword">of</span> the <span class="keyword">file</span> <span class="string">"mytest.R"</span> <span class="keyword">to</span> <span class="string">"mytest2.R"</span> by using <span class="keyword">file</span>.rename().</span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">file</span>.rename(<span class="string">"mytest.R"</span>,<span class="string">"mytest2.R"</span>)</span><br><span class="line">[<span class="number">1</span>] TRUE</span><br><span class="line"></span><br><span class="line">| You got it right!</span><br><span class="line"></span><br><span class="line">  |=========================================================                             |  <span class="number">66</span>%</span><br><span class="line"></span><br><span class="line">| Your operating system will provide simpler tools <span class="keyword">for</span> these sorts <span class="keyword">of</span> tasks, but having the</span><br><span class="line">| ability <span class="keyword">to</span> manipulate files programatically <span class="keyword">is</span> useful. You might now try <span class="keyword">to</span> delete</span><br><span class="line">| mytest.R using <span class="keyword">file</span>.remove(<span class="attribute">'mytest</span>.R'), but that won<span class="attribute">'t</span> work since mytest.R no longer</span><br><span class="line">| exists. You have already renamed it.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===========================================================                           |  <span class="number">68</span>%</span><br><span class="line"></span><br><span class="line">| Make a copy <span class="keyword">of</span> <span class="string">"mytest2.R"</span> called <span class="string">"mytest3.R"</span> using <span class="keyword">file</span>.copy().</span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">file</span>.copy(<span class="string">"mytest2.R"</span>,<span class="string">"mytest3.R"</span>)</span><br><span class="line">[<span class="number">1</span>] TRUE</span><br><span class="line"></span><br><span class="line">| That<span class="attribute">'s</span> the answer I was looking <span class="keyword">for</span>.</span><br><span class="line"></span><br><span class="line">  |=============================================================                         |  <span class="number">71</span>%</span><br><span class="line"></span><br><span class="line">| You now have two files <span class="keyword">in</span> the current directory. That may <span class="keyword">not</span> seem very interesting. But</span><br><span class="line">| what <span class="keyword">if</span> you were working <span class="keyword">with</span> dozens, <span class="keyword">or</span> millions, <span class="keyword">of</span> individual files? <span class="keyword">In</span> that <span class="keyword">case</span>,</span><br><span class="line">| being able <span class="keyword">to</span> programatically act <span class="keyword">on</span> many files would be absolutely necessary. Don<span class="attribute">'t</span></span><br><span class="line">| forget that you can, temporarily, leave the lesson by typing play() <span class="keyword">and</span> <span class="keyword">then</span> <span class="keyword">return</span> by</span><br><span class="line">| typing nxt().</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===============================================================                       |  <span class="number">73</span>%</span><br><span class="line"></span><br><span class="line">| Provide the relative path <span class="keyword">to</span> the <span class="keyword">file</span> <span class="string">"mytest3.R"</span> by using <span class="keyword">file</span>.path().</span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">file</span>.path(<span class="string">"mytest3.R"</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"mytest3.R"</span></span><br><span class="line"></span><br><span class="line">| Perseverance, that<span class="attribute">'s</span> the answer.</span><br><span class="line"></span><br><span class="line">  |=================================================================                     |  <span class="number">76</span>%</span><br><span class="line"></span><br><span class="line">| You can <span class="keyword">use</span> <span class="keyword">file</span>.path <span class="keyword">to</span> construct <span class="keyword">file</span> <span class="keyword">and</span> directory paths that are independent <span class="keyword">of</span> the</span><br><span class="line">| operating system your R code <span class="keyword">is</span> running <span class="keyword">on</span>. Pass <span class="attribute">'folder1</span>' <span class="keyword">and</span> <span class="attribute">'folder2</span>' as arguments <span class="keyword">to</span></span><br><span class="line">| <span class="keyword">file</span>.path <span class="keyword">to</span> make a platform-independent pathname.</span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">file</span>.path(<span class="string">"folder1"</span>,<span class="string">"folder2"</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"folder1/folder2"</span></span><br><span class="line"></span><br><span class="line">| <span class="keyword">All</span> that practice <span class="keyword">is</span> paying off!</span><br><span class="line"></span><br><span class="line">  |===================================================================                   |  <span class="number">78</span>%</span><br><span class="line"></span><br><span class="line">| Take a look at the documentation <span class="keyword">for</span> dir.create by entering ?dir.create . Notice the</span><br><span class="line">| <span class="attribute">'recursive</span>' argument. <span class="keyword">In</span> order <span class="keyword">to</span> create nested directories, <span class="attribute">'recursive</span>' must be set <span class="keyword">to</span></span><br><span class="line">| TRUE.</span><br><span class="line"></span><br><span class="line">&gt; ?dir.create</span><br><span class="line"></span><br><span class="line">| You are amazing!</span><br><span class="line"></span><br><span class="line">  |=====================================================================                 |  <span class="number">80</span>%</span><br><span class="line"></span><br><span class="line">| Create a directory <span class="keyword">in</span> the current working directory called <span class="string">"testdir2"</span> <span class="keyword">and</span> a subdirectory</span><br><span class="line">| <span class="keyword">for</span> it called <span class="string">"testdir3"</span>, <span class="keyword">all</span> <span class="keyword">in</span> one command by using dir.create() <span class="keyword">and</span> <span class="keyword">file</span>.path().</span><br><span class="line"></span><br><span class="line">&gt; dir.create(<span class="keyword">file</span>.path(<span class="string">"testdir2"</span>,<span class="string">"testdir3"</span>),recursive=TRUE)</span><br><span class="line"></span><br><span class="line">| Excellent job!</span><br><span class="line"></span><br><span class="line">  |=======================================================================               |  <span class="number">83</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">To</span> delete a directory you need <span class="keyword">to</span> <span class="keyword">use</span> the recursive = TRUE argument <span class="keyword">with</span> the <span class="keyword">function</span></span><br><span class="line">| unlink(). <span class="keyword">If</span> you don<span class="attribute">'t</span> <span class="keyword">use</span> recursive = TRUE, R <span class="keyword">is</span> concerned that you<span class="attribute">'re</span> unaware that</span><br><span class="line">| you<span class="attribute">'re</span> deleting a directory <span class="keyword">and</span> <span class="keyword">all</span> <span class="keyword">of</span> its contents. R reasons that, <span class="keyword">if</span> you don<span class="attribute">'t</span> specify</span><br><span class="line">| that recursive equals TRUE, you don<span class="attribute">'t</span> know that something <span class="keyword">is</span> <span class="keyword">in</span> the directory you<span class="attribute">'re</span></span><br><span class="line">| trying <span class="keyword">to</span> delete. R tries <span class="keyword">to</span> prevent you from making a mistake.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=========================================================================             |  <span class="number">85</span>%</span><br><span class="line"></span><br><span class="line">| Delete the <span class="string">"testdir2"</span> directory that you created by using unlink().</span><br><span class="line"></span><br><span class="line">&gt; unlink(<span class="string">"testdir2"</span>,recursive=TRUE)</span><br><span class="line"></span><br><span class="line">| You got it!</span><br><span class="line"></span><br><span class="line">  |============================================================================          |  <span class="number">88</span>%</span><br><span class="line"></span><br><span class="line">| Why <span class="keyword">is</span> this command named <span class="string">"unlink"</span> rather than something more sensible like <span class="string">"dir.delete"</span></span><br><span class="line">| <span class="keyword">or</span> <span class="string">"dir.remove"</span>? Mainly, history. unlink <span class="keyword">is</span> the traditional Unix command <span class="keyword">for</span> removing</span><br><span class="line">| directories.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==============================================================================        |  <span class="number">90</span>%</span><br><span class="line"></span><br><span class="line">| Go back <span class="keyword">to</span> your original working directory using setwd(). (Recall that we created the</span><br><span class="line">| <span class="keyword">variable</span> old.dir <span class="keyword">with</span> the full path <span class="keyword">for</span> the orginal working directory at the start <span class="keyword">of</span></span><br><span class="line">| these questions.)</span><br><span class="line"></span><br><span class="line">&gt; setwd(old.dir)</span><br><span class="line"></span><br><span class="line">| Keep up the great work!</span><br><span class="line"></span><br><span class="line">  |================================================================================      |  <span class="number">93</span>%</span><br><span class="line"></span><br><span class="line">| It <span class="keyword">is</span> often helpful <span class="keyword">to</span> save the settings that you had before you began an analysis <span class="keyword">and</span></span><br><span class="line">| <span class="keyword">then</span> go back <span class="keyword">to</span> them at the <span class="keyword">end</span>. This trick <span class="keyword">is</span> often used within functions; you save, say,</span><br><span class="line">| the par() settings that you started <span class="keyword">with</span>, mess around a bunch, <span class="keyword">and</span> <span class="keyword">then</span> set them back <span class="keyword">to</span></span><br><span class="line">| the original values at the <span class="keyword">end</span>. This isn<span class="attribute">'t</span> the same as what we have done here, but it</span><br><span class="line">| seems similar enough <span class="keyword">to</span> mention.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==================================================================================    |  <span class="number">95</span>%</span><br><span class="line"></span><br><span class="line">| Delete the <span class="attribute">'testdir</span>' directory that you just left (<span class="keyword">and</span> everything <span class="keyword">in</span> it)</span><br><span class="line"></span><br><span class="line">&gt; unlink(<span class="string">"testdir"</span>,recursive=TRUE)</span><br><span class="line"></span><br><span class="line">| That<span class="attribute">'s</span> a job well done!</span><br><span class="line"></span><br><span class="line">  |====================================================================================  |  <span class="number">98</span>%</span><br><span class="line"></span><br><span class="line">| Take nothing but results. Leave nothing but assumptions. That sounds like <span class="attribute">'Take</span> nothing</span><br><span class="line">| but pictures. Leave nothing but footprints.' But it makes no sense! Surely our readers can</span><br><span class="line">| come up <span class="keyword">with</span> a better motto . . .</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |======================================================================================| <span class="number">100</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">In</span> this lesson, you learned how <span class="keyword">to</span> examine your R workspace <span class="keyword">and</span> work <span class="keyword">with</span> the <span class="keyword">file</span> system</span><br><span class="line">| <span class="keyword">of</span> your machine from within R. Thanks <span class="keyword">for</span> playing!</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">| Are you currently enrolled <span class="keyword">in</span> the Coursera course associated <span class="keyword">with</span> this lesson?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: Yes</span><br><span class="line"><span class="number">2</span>: No</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">| You<span class="attribute">'ve</span> reached the <span class="keyword">end</span> <span class="keyword">of</span> this lesson! Returning <span class="keyword">to</span> the main menu...</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">| Please choose a course, <]]>
    </summary>
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[swirl学习之一——Basic Building Blocks]]></title>
    <link href="http://yoursite.com/2015/05/06/swirl%E5%AD%A6%E4%B9%A01/"/>
    <id>http://yoursite.com/2015/05/06/swirl学习1/</id>
    <published>2015-05-06T06:01:53.000Z</published>
    <updated>2015-05-07T14:04:39.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">| Please choose a course, <span class="keyword">or</span> type <span class="number">0</span> <span class="keyword">to</span> <span class="keyword">exit</span> swirl.</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: R Programming</span><br><span class="line"><span class="number">2</span>: Take <span class="keyword">me</span> <span class="keyword">to</span> <span class="keyword">the</span> swirl course repository!</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">| Please choose a lesson, <span class="keyword">or</span> type <span class="number">0</span> <span class="keyword">to</span> <span class="constant">return</span> <span class="keyword">to</span> course menu.</span><br><span class="line"></span><br><span class="line"> <span class="number">1</span>: Basic Building Blocks      <span class="number">2</span>: Workspace <span class="keyword">and</span> Files     </span><br><span class="line"> <span class="number">3</span>: Sequences <span class="keyword">of</span> Numbers       <span class="number">4</span>: Vectors                 </span><br><span class="line"> <span class="number">5</span>: Missing Values             <span class="number">6</span>: Subsetting Vectors      </span><br><span class="line"> <span class="number">7</span>: Matrices <span class="keyword">and</span> Data Frames   <span class="number">8</span>: Logic                   </span><br><span class="line"> <span class="number">9</span>: Functions                 <span class="number">10</span>: lapply <span class="keyword">and</span> sapply       </span><br><span class="line"><span class="number">11</span>: vapply <span class="keyword">and</span> tapply         <span class="number">12</span>: Looking <span class="keyword">at</span> Data         </span><br><span class="line"><span class="number">13</span>: Simulation                <span class="number">14</span>: Dates <span class="keyword">and</span> Times         </span><br><span class="line"><span class="number">15</span>: Base Graphics             </span><br><span class="line"></span><br><span class="line">Selection: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  |                                                        |   <span class="number">0</span>%</span><br><span class="line"></span><br><span class="line">| In this lesson, we will explore <span class="keyword">some</span> basic building blocks <span class="keyword">of</span></span><br><span class="line">| <span class="keyword">the</span> R programming language.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==                                                      |   <span class="number">3</span>%</span><br><span class="line"></span><br><span class="line">| If <span class="keyword">at</span> any point you'd like more information <span class="function_start"><span class="keyword">on</span></span> a particular</span><br><span class="line">| topic related <span class="keyword">to</span> R, you can type help.start() <span class="keyword">at</span> <span class="keyword">the</span> prompt,</span><br><span class="line">| which will open a menu <span class="keyword">of</span> resources (either within RStudio <span class="keyword">or</span></span><br><span class="line">| your default web browser, depending <span class="function_start"><span class="keyword">on</span></span> your setup).</span><br><span class="line">| Alternatively, a simple web search often yields <span class="keyword">the</span> answer</span><br><span class="line">| you're looking <span class="keyword">for</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===                                                     |   <span class="number">5</span>%</span><br><span class="line"></span><br><span class="line">| In <span class="keyword">its</span> simplest form, R can be used <span class="keyword">as</span> an interactive</span><br><span class="line">| calculator. Type <span class="number">5</span> + <span class="number">7</span> <span class="keyword">and</span> press Enter.</span><br><span class="line"></span><br><span class="line">&gt; <span class="number">5</span>+<span class="number">7</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">12</span></span><br><span class="line"></span><br><span class="line">| You are doing so well!</span><br><span class="line"></span><br><span class="line">  |=====                                                   |   <span class="number">8</span>%</span><br><span class="line"></span><br><span class="line">| R simply prints <span class="keyword">the</span> <span class="constant">result</span> <span class="keyword">of</span> <span class="number">12</span> <span class="keyword">by</span> default. However, R <span class="keyword">is</span> a</span><br><span class="line">| programming language <span class="keyword">and</span> often <span class="keyword">the</span> reason we use a programming</span><br><span class="line">| language <span class="keyword">as</span> opposed <span class="keyword">to</span> a calculator <span class="keyword">is</span> <span class="keyword">to</span> automate <span class="keyword">some</span> process</span><br><span class="line">| <span class="keyword">or</span> avoid unnecessary repetition.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |======                                                  |  <span class="number">11</span>%</span><br><span class="line"></span><br><span class="line">| In this case, we may want <span class="keyword">to</span> use our <span class="constant">result</span> <span class="keyword">from</span> <span class="keyword">above</span> <span class="keyword">in</span> a</span><br><span class="line">| <span class="keyword">second</span> calculation. Instead <span class="keyword">of</span> retyping <span class="number">5</span> + <span class="number">7</span> <span class="keyword">every</span> <span class="property">time</span> we</span><br><span class="line">| need <span class="keyword">it</span>, we can just create a new variable <span class="keyword">that</span> stores <span class="keyword">the</span></span><br><span class="line">| <span class="constant">result</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |========                                                |  <span class="number">14</span>%</span><br><span class="line"></span><br><span class="line">| The way you assign a value <span class="keyword">to</span> a variable <span class="keyword">in</span> R <span class="keyword">is</span> <span class="keyword">by</span> using <span class="keyword">the</span></span><br><span class="line">| assignment operator, which <span class="keyword">is</span> just a '<span class="keyword">less than</span>' symbol</span><br><span class="line">| followed <span class="keyword">by</span> a 'minus' sign. It looks like this: &lt;-</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=========                                               |  <span class="number">16</span>%</span><br><span class="line"></span><br><span class="line">| Think <span class="keyword">of</span> <span class="keyword">the</span> assignment operator <span class="keyword">as</span> an arrow. You are assigning</span><br><span class="line">| <span class="keyword">the</span> value <span class="function_start"><span class="keyword">on</span></span> <span class="keyword">the</span> right side <span class="keyword">of</span> <span class="keyword">the</span> arrow <span class="keyword">to</span> <span class="keyword">the</span> variable <span class="property">name</span></span><br><span class="line">| <span class="function_start"><span class="keyword">on</span></span> <span class="keyword">the</span> left side <span class="keyword">of</span> <span class="keyword">the</span> arrow.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===========                                             |  <span class="number">19</span>%</span><br><span class="line"></span><br><span class="line">| To assign <span class="keyword">the</span> <span class="constant">result</span> <span class="keyword">of</span> <span class="number">5</span> + <span class="number">7</span> <span class="keyword">to</span> a new variable called x, you</span><br><span class="line">| type x &lt;- <span class="number">5</span> + <span class="number">7.</span> This can be <span class="command">read</span> <span class="keyword">as</span> 'x gets <span class="number">5</span> plus <span class="number">7</span>'. Give <span class="keyword">it</span></span><br><span class="line">| a <span class="keyword">try</span> now.</span><br><span class="line"></span><br><span class="line">&gt; x&lt;-<span class="number">5</span>+<span class="number">7</span></span><br><span class="line"></span><br><span class="line">| That's correct!</span><br><span class="line"></span><br><span class="line">  |============                                            |  <span class="number">22</span>%</span><br><span class="line"></span><br><span class="line">| You'll notice <span class="keyword">that</span> R did <span class="keyword">not</span> print <span class="keyword">the</span> <span class="constant">result</span> <span class="keyword">of</span> <span class="number">12</span> this <span class="property">time</span>.</span><br><span class="line">| When you use <span class="keyword">the</span> assignment operator, R assumes <span class="keyword">that</span> you don't</span><br><span class="line">| want <span class="keyword">to</span> see <span class="keyword">the</span> <span class="constant">result</span> immediately, <span class="keyword">but</span> rather <span class="keyword">that</span> you intend</span><br><span class="line">| <span class="keyword">to</span> use <span class="keyword">the</span> <span class="constant">result</span> <span class="keyword">for</span> something <span class="keyword">else</span> later <span class="function_start"><span class="keyword">on</span>.</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==============                                          |  <span class="number">24</span>%</span><br><span class="line"></span><br><span class="line">| To view <span class="keyword">the</span> <span class="property">contents</span> <span class="keyword">of</span> <span class="keyword">the</span> variable x, just type x <span class="keyword">and</span> press</span><br><span class="line">| Enter. Try <span class="keyword">it</span> now.</span><br><span class="line"></span><br><span class="line">&gt; x</span><br><span class="line">[<span class="number">1</span>] <span class="number">12</span></span><br><span class="line"></span><br><span class="line">| That's correct!</span><br><span class="line"></span><br><span class="line">  |===============                                         |  <span class="number">27</span>%</span><br><span class="line"></span><br><span class="line">| Now, store <span class="keyword">the</span> <span class="constant">result</span> <span class="keyword">of</span> x - <span class="number">3</span> <span class="keyword">in</span> a new variable called y.</span><br><span class="line"></span><br><span class="line">&gt; y&lt;-x-<span class="number">3</span></span><br><span class="line"></span><br><span class="line">| Your dedication <span class="keyword">is</span> inspiring!</span><br><span class="line"></span><br><span class="line">  |=================                                       |  <span class="number">30</span>%</span><br><span class="line"></span><br><span class="line">| What <span class="keyword">is</span> <span class="keyword">the</span> value <span class="keyword">of</span> y? Type y <span class="keyword">to</span> find out.</span><br><span class="line"></span><br><span class="line">&gt; y</span><br><span class="line">[<span class="number">1</span>] <span class="number">9</span></span><br><span class="line"></span><br><span class="line">| All <span class="keyword">that</span> practice <span class="keyword">is</span> paying off!</span><br><span class="line"></span><br><span class="line">  |==================                                      |  <span class="number">32</span>%</span><br><span class="line"></span><br><span class="line">| Now, let's create a small collection <span class="keyword">of</span> numbers called a</span><br><span class="line">| vector. Any object <span class="keyword">that</span> <span class="keyword">contains</span> data <span class="keyword">is</span> called a data</span><br><span class="line">| structure <span class="keyword">and</span> numeric vectors are <span class="keyword">the</span> simplest type <span class="keyword">of</span> data</span><br><span class="line">| structure <span class="keyword">in</span> R. In fact, even a single <span class="type">number</span> <span class="keyword">is</span> considered a</span><br><span class="line">| vector <span class="keyword">of</span> <span class="property">length</span> one.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |====================                                    |  <span class="number">35</span>%</span><br><span class="line"></span><br><span class="line">| The easiest way <span class="keyword">to</span> create a vector <span class="keyword">is</span> <span class="keyword">with</span> <span class="keyword">the</span> c() function,</span><br><span class="line">| which stands <span class="keyword">for</span> 'concatenate' <span class="keyword">or</span> 'combine'. To create a vector</span><br><span class="line">| containing <span class="keyword">the</span> numbers <span class="number">1.1</span>, <span class="number">9</span>, <span class="keyword">and</span> <span class="number">3.14</span>, type c(<span class="number">1.1</span>, <span class="number">9</span>, <span class="number">3.14</span>).</span><br><span class="line">| Try <span class="keyword">it</span> now <span class="keyword">and</span> store <span class="keyword">the</span> <span class="constant">result</span> <span class="keyword">in</span> a variable called z.</span><br><span class="line"></span><br><span class="line">&gt; z&lt;-c(<span class="number">1.1</span>,<span class="number">9</span>,<span class="number">3.14</span>)</span><br><span class="line"></span><br><span class="line">| Excellent job!</span><br><span class="line"></span><br><span class="line">  |=====================                                   |  <span class="number">38</span>%</span><br><span class="line"></span><br><span class="line">| Anytime you have questions <span class="keyword">about</span> a particular function, you can</span><br><span class="line">| access R's built-<span class="keyword">in</span> help files via <span class="keyword">the</span> `?` command. For</span><br><span class="line">| example, <span class="keyword">if</span> you want more information <span class="function_start"><span class="keyword">on</span></span> <span class="keyword">the</span> c() function, type</span><br><span class="line">| ?c <span class="keyword">without</span> <span class="keyword">the</span> parentheses <span class="keyword">that</span> normally follow a function</span><br><span class="line">| <span class="property">name</span>. Give <span class="keyword">it</span> a <span class="keyword">try</span>.</span><br><span class="line"></span><br><span class="line">&gt; ?c</span><br><span class="line"></span><br><span class="line">| You are amazing!</span><br><span class="line"></span><br><span class="line">  |=======================                                 |  <span class="number">41</span>%</span><br><span class="line"></span><br><span class="line">| Type z <span class="keyword">to</span> view <span class="keyword">its</span> <span class="property">contents</span>. Notice <span class="keyword">that</span> there are no commas</span><br><span class="line">| separating <span class="keyword">the</span> values <span class="keyword">in</span> <span class="keyword">the</span> output.</span><br><span class="line"></span><br><span class="line">&gt; z</span><br><span class="line">[<span class="number">1</span>] <span class="number">1.10</span> <span class="number">9.00</span> <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line">| All <span class="keyword">that</span> hard work <span class="keyword">is</span> paying off!</span><br><span class="line"></span><br><span class="line">  |========================                                |  <span class="number">43</span>%</span><br><span class="line"></span><br><span class="line">| You can combine vectors <span class="keyword">to</span> make a new vector. Create a new</span><br><span class="line">| vector <span class="keyword">that</span> <span class="keyword">contains</span> z, <span class="number">555</span>, <span class="keyword">then</span> z again <span class="keyword">in</span> <span class="keyword">that</span> order. Don't</span><br><span class="line">| assign this vector <span class="keyword">to</span> a new variable, so <span class="keyword">that</span> we can just see</span><br><span class="line">| <span class="keyword">the</span> <span class="constant">result</span> immediately.</span><br><span class="line"></span><br><span class="line">&gt; c(z,<span class="number">555</span>,z)</span><br><span class="line">[<span class="number">1</span>]   <span class="number">1.10</span>   <span class="number">9.00</span>   <span class="number">3.14</span> <span class="number">555.00</span>   <span class="number">1.10</span>   <span class="number">9.00</span>   <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line">| You got <span class="keyword">it</span>!</span><br><span class="line"></span><br><span class="line">  |==========================                              |  <span class="number">46</span>%</span><br><span class="line"></span><br><span class="line">| Numeric vectors can be used <span class="keyword">in</span> arithmetic expressions. Type <span class="keyword">the</span></span><br><span class="line">| following <span class="keyword">to</span> see what happens: z * <span class="number">2</span> + <span class="number">100.</span></span><br><span class="line"></span><br><span class="line">&gt; z*<span class="number">2</span>+<span class="number">100</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">102.20</span> <span class="number">118.00</span> <span class="number">106.28</span></span><br><span class="line"></span><br><span class="line">| Nice work!</span><br><span class="line"></span><br><span class="line">  |===========================                             |  <span class="number">49</span>%</span><br><span class="line"></span><br><span class="line">| First, R multiplied each <span class="keyword">of</span> <span class="keyword">the</span> three elements <span class="keyword">in</span> z <span class="keyword">by</span> <span class="number">2.</span> Then</span><br><span class="line">| <span class="keyword">it</span> added <span class="number">100</span> <span class="keyword">to</span> each element <span class="keyword">to</span> <span class="keyword">get</span> <span class="keyword">the</span> <span class="constant">result</span> you see <span class="keyword">above</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=============================                           |  <span class="number">51</span>%</span><br><span class="line"></span><br><span class="line">| Other common arithmetic operators are `+`, `-`, `/`, <span class="keyword">and</span> `^`</span><br><span class="line">| (<span class="keyword">where</span> x^<span class="number">2</span> means 'x squared'). To take <span class="keyword">the</span> square root, use <span class="keyword">the</span></span><br><span class="line">| sqrt() function <span class="keyword">and</span> <span class="keyword">to</span> take <span class="keyword">the</span> absolute value, use <span class="keyword">the</span> abs()</span><br><span class="line">| function.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==============================                          |  <span class="number">54</span>%</span><br><span class="line"></span><br><span class="line">| Take <span class="keyword">the</span> square root <span class="keyword">of</span> z - <span class="number">1</span> <span class="keyword">and</span> assign <span class="keyword">it</span> <span class="keyword">to</span> a new variable</span><br><span class="line">| called my_sqrt.</span><br><span class="line"></span><br><span class="line">&gt; my_sqrt&lt;-sqrt(z-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">| You are quite good <span class="keyword">my</span> friend!</span><br><span class="line"></span><br><span class="line">  |================================                        |  <span class="number">57</span>%</span><br><span class="line"></span><br><span class="line">| Before we view <span class="keyword">the</span> <span class="property">contents</span> <span class="keyword">of</span> <span class="keyword">the</span> my_sqrt variable, what do</span><br><span class="line">| you think <span class="keyword">it</span> <span class="keyword">contains</span>?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: a vector <span class="keyword">of</span> <span class="property">length</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span>: a single <span class="type">number</span> (i.e a vector <span class="keyword">of</span> <span class="property">length</span> <span class="number">1</span>)</span><br><span class="line"><span class="number">3</span>: a vector <span class="keyword">of</span> <span class="property">length</span> <span class="number">0</span> (i.e. an empty vector)</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">| Keep up <span class="keyword">the</span> great work!</span><br><span class="line"></span><br><span class="line">  |=================================                       |  <span class="number">59</span>%</span><br><span class="line"></span><br><span class="line">| Print <span class="keyword">the</span> <span class="property">contents</span> <span class="keyword">of</span> my_sqrt.</span><br><span class="line"></span><br><span class="line">&gt; my_sqrt</span><br><span class="line">[<span class="number">1</span>] <span class="number">0.3162278</span> <span class="number">2.8284271</span> <span class="number">1.4628739</span></span><br><span class="line"></span><br><span class="line">| You are quite good <span class="keyword">my</span> friend!</span><br><span class="line"></span><br><span class="line">  |===================================                     |  <span class="number">62</span>%</span><br><span class="line"></span><br><span class="line">| As you may have guessed, R <span class="keyword">first</span> subtracted <span class="number">1</span> <span class="keyword">from</span> each element</span><br><span class="line">| <span class="keyword">of</span> z, <span class="keyword">then</span> took <span class="keyword">the</span> square root <span class="keyword">of</span> each element. This leaves</span><br><span class="line">| you <span class="keyword">with</span> a vector <span class="keyword">of</span> <span class="keyword">the</span> same <span class="property">length</span> <span class="keyword">as</span> <span class="keyword">the</span> original vector z.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |====================================                    |  <span class="number">65</span>%</span><br><span class="line"></span><br><span class="line">| Now, create a new variable called my_div <span class="keyword">that</span> gets <span class="keyword">the</span> value <span class="keyword">of</span></span><br><span class="line">| z divided <span class="keyword">by</span> my_sqrt.</span><br><span class="line"></span><br><span class="line">&gt; my_div&lt;-z/my_sqrt</span><br><span class="line"></span><br><span class="line">| Perseverance, <span class="keyword">that</span>'s <span class="keyword">the</span> answer.</span><br><span class="line"></span><br><span class="line">  |======================================                  |  <span class="number">68</span>%</span><br><span class="line"></span><br><span class="line">| Which statement do you think <span class="keyword">is</span> <span class="constant">true</span>?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: my_div <span class="keyword">is</span> undefined</span><br><span class="line"><span class="number">2</span>: The <span class="keyword">first</span> element <span class="keyword">of</span> my_div <span class="keyword">is</span> <span class="keyword">equal</span> <span class="keyword">to</span> <span class="keyword">the</span> <span class="keyword">first</span> element <span class="keyword">of</span> z divided <span class="keyword">by</span> <span class="keyword">the</span> <span class="keyword">first</span> element <span class="keyword">of</span> my_sqrt, <span class="keyword">and</span> so <span class="function_start"><span class="keyword">on</span>.</span>..</span><br><span class="line"><span class="number">3</span>: my_div <span class="keyword">is</span> a single <span class="type">number</span> (i.e a vector <span class="keyword">of</span> <span class="property">length</span> <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">| You got <span class="keyword">it</span> right!</span><br><span class="line"></span><br><span class="line">  |=======================================                 |  <span class="number">70</span>%</span><br><span class="line"></span><br><span class="line">| Go ahead <span class="keyword">and</span> print <span class="keyword">the</span> <span class="property">contents</span> <span class="keyword">of</span> my_div.</span><br><span class="line"></span><br><span class="line">&gt; my_div</span><br><span class="line">[<span class="number">1</span>] <span class="number">3.478505</span> <span class="number">3.181981</span> <span class="number">2.146460</span></span><br><span class="line"></span><br><span class="line">| Your dedication <span class="keyword">is</span> inspiring!</span><br><span class="line"></span><br><span class="line">  |=========================================               |  <span class="number">73</span>%</span><br><span class="line"></span><br><span class="line">| When <span class="keyword">given</span> two vectors <span class="keyword">of</span> <span class="keyword">the</span> same <span class="property">length</span>, R simply performs</span><br><span class="line">| <span class="keyword">the</span> specified arithmetic operation (`+`, `-`, `*`, etc.)</span><br><span class="line">| element-<span class="keyword">by</span>-element. If <span class="keyword">the</span> vectors are <span class="keyword">of</span> different lengths, R</span><br><span class="line">| 'recycles' <span class="keyword">the</span> shorter vector <span class="keyword">until</span> <span class="keyword">it</span> <span class="keyword">is</span> <span class="keyword">the</span> same <span class="property">length</span> <span class="keyword">as</span></span><br><span class="line">| <span class="keyword">the</span> longer vector.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==========================================              |  <span class="number">76</span>%</span><br><span class="line"></span><br><span class="line">| When we did z * <span class="number">2</span> + <span class="number">100</span> <span class="keyword">in</span> our earlier example, z was a vector</span><br><span class="line">| <span class="keyword">of</span> <span class="property">length</span> <span class="number">3</span>, <span class="keyword">but</span> technically <span class="number">2</span> <span class="keyword">and</span> <span class="number">100</span> are each vectors <span class="keyword">of</span></span><br><span class="line">| <span class="property">length</span> <span class="number">1.</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |============================================            |  <span class="number">78</span>%</span><br><span class="line"></span><br><span class="line">| Behind <span class="keyword">the</span> scenes, R <span class="keyword">is</span> 'recycling' <span class="keyword">the</span> <span class="number">2</span> <span class="keyword">to</span> make a vector <span class="keyword">of</span></span><br><span class="line">| <span class="number">2</span>s <span class="keyword">and</span> <span class="keyword">the</span> <span class="number">100</span> <span class="keyword">to</span> make a vector <span class="keyword">of</span> <span class="number">100</span>s. In other <span class="property">words</span>, when</span><br><span class="line">| you ask R <span class="keyword">to</span> compute z * <span class="number">2</span> + <span class="number">100</span>, what <span class="keyword">it</span> really computes <span class="keyword">is</span></span><br><span class="line">| this: z * c(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>) + c(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>).</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=============================================           |  <span class="number">81</span>%</span><br><span class="line"></span><br><span class="line">| To see another example <span class="keyword">of</span> how this vector 'recycling' works,</span><br><span class="line">| <span class="keyword">try</span> adding c(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="keyword">and</span> c(<span class="number">0</span>, <span class="number">10</span>). Don't worry <span class="keyword">about</span> saving</span><br><span class="line">| <span class="keyword">the</span> <span class="constant">result</span> <span class="keyword">in</span> a new variable.</span><br><span class="line"></span><br><span class="line">&gt; c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)+c(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">[<span class="number">1</span>]  <span class="number">1</span> <span class="number">12</span>  <span class="number">3</span> <span class="number">14</span></span><br><span class="line"></span><br><span class="line">| Great job!</span><br><span class="line"></span><br><span class="line">  |===============================================         |  <span class="number">84</span>%</span><br><span class="line"></span><br><span class="line">| If <span class="keyword">the</span> <span class="property">length</span> <span class="keyword">of</span> <span class="keyword">the</span> shorter vector <span class="keyword">does</span> <span class="keyword">not</span> divide evenly <span class="keyword">into</span></span><br><span class="line">| <span class="keyword">the</span> <span class="property">length</span> <span class="keyword">of</span> <span class="keyword">the</span> longer vector, R will still apply <span class="keyword">the</span></span><br><span class="line">| 'recycling' method, <span class="keyword">but</span> will throw a warning <span class="keyword">to</span> let you know</span><br><span class="line">| something fishy might be going <span class="function_start"><span class="keyword">on</span>.</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |================================================        |  <span class="number">86</span>%</span><br><span class="line"></span><br><span class="line">| Try c(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) + c(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>) <span class="keyword">for</span> an example.</span><br><span class="line"></span><br><span class="line">&gt; c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)+c(<span class="number">0</span>,<span class="number">10</span>,<span class="number">100</span>)</span><br><span class="line">[<span class="number">1</span>]   <span class="number">1</span>  <span class="number">12</span> <span class="number">103</span>   <span class="number">4</span></span><br><span class="line">Warning message:</span><br><span class="line">In c(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) + c(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>) :</span><br><span class="line">  longer object <span class="property">length</span> <span class="keyword">is</span> <span class="keyword">not</span> a multiple <span class="keyword">of</span> shorter object <span class="property">length</span></span><br><span class="line"></span><br><span class="line">| Nice work!</span><br><span class="line"></span><br><span class="line">  |==================================================      |  <span class="number">89</span>%</span><br><span class="line"></span><br><span class="line">| Before concluding this lesson, I'd like <span class="keyword">to</span> show you a couple <span class="keyword">of</span></span><br><span class="line">| <span class="property">time</span>-saving tricks.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===================================================     |  <span class="number">92</span>%</span><br><span class="line"></span><br><span class="line">| Earlier <span class="keyword">in</span> <span class="keyword">the</span> lesson, you computed z * <span class="number">2</span> + <span class="number">100.</span> Let's pretend</span><br><span class="line">| <span class="keyword">that</span> you made a mistake <span class="keyword">and</span> <span class="keyword">that</span> you meant <span class="keyword">to</span> add <span class="number">1000</span> instead</span><br><span class="line">| <span class="keyword">of</span> <span class="number">100.</span> You could either re-type <span class="keyword">the</span> expression, <span class="keyword">or</span>...</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=====================================================   |  <span class="number">95</span>%</span><br><span class="line"></span><br><span class="line">| In many programming environments, <span class="keyword">the</span> up arrow will cycle</span><br><span class="line">| <span class="keyword">through</span> previous commands. Try hitting <span class="keyword">the</span> up arrow <span class="function_start"><span class="keyword">on</span></span> your</span><br><span class="line">| keyboard <span class="keyword">until</span> you <span class="keyword">get</span> <span class="keyword">to</span> this command (z * <span class="number">2</span> + <span class="number">100</span>), <span class="keyword">then</span></span><br><span class="line">| change <span class="number">100</span> <span class="keyword">to</span> <span class="number">1000</span> <span class="keyword">and</span> hit Enter. If <span class="keyword">the</span> up arrow doesn't work</span><br><span class="line">| <span class="keyword">for</span> you, just type <span class="keyword">the</span> corrected command.</span><br><span class="line"></span><br><span class="line">&gt; z*<span class="number">2</span>+<span class="number">1000</span></span><br><span class="line">[<span class="number">1</span>] <span class="number">1002.20</span> <span class="number">1018.00</span> <span class="number">1006.28</span></span><br><span class="line"></span><br><span class="line">| All <span class="keyword">that</span> practice <span class="keyword">is</span> paying off!</span><br><span class="line"></span><br><span class="line">  |======================================================  |  <span class="number">97</span>%</span><br><span class="line"></span><br><span class="line">| Finally, let's pretend you'd like <span class="keyword">to</span> view <span class="keyword">the</span> <span class="property">contents</span> <span class="keyword">of</span> a</span><br><span class="line">| variable <span class="keyword">that</span> you created earlier, <span class="keyword">but</span> you can't seem <span class="keyword">to</span></span><br><span class="line">| remember <span class="keyword">if</span> you named <span class="keyword">it</span> my_div <span class="keyword">or</span> myDiv. You could <span class="keyword">try</span> both</span><br><span class="line">| <span class="keyword">and</span> see what works, <span class="keyword">or</span>...</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |========================================================| <span class="number">100</span>%</span><br><span class="line"></span><br><span class="line">| You can type <span class="keyword">the</span> <span class="keyword">first</span> two letters <span class="keyword">of</span> <span class="keyword">the</span> variable <span class="property">name</span>, <span class="keyword">then</span></span><br><span class="line">| hit <span class="keyword">the</span> Tab key (possibly more than once). Most programming</span><br><span class="line">| environments will provide a <span class="type">list</span> <span class="keyword">of</span> variables <span class="keyword">that</span> you've</span><br><span class="line">| created <span class="keyword">that</span> <span class="keyword">begin with</span> '<span class="keyword">my</span>'. This <span class="keyword">is</span> called auto-completion</span><br><span class="line">| <span class="keyword">and</span> can be quite handy when you have many variables <span class="keyword">in</span> your</span><br><span class="line">| workspace. Give <span class="keyword">it</span> a <span class="keyword">try</span>. (If auto-completion doesn't work <span class="keyword">for</span></span><br><span class="line">| you, just type my_div <span class="keyword">and</span> press Enter.)</span><br><span class="line"></span><br><span class="line">&gt; my_div</span><br><span class="line">[<span class="number">1</span>] <span class="number">3.478505</span> <span class="number">3.181981</span> <span class="number">2.146460</span></span><br><span class="line"></span><br><span class="line">| You are quite good <span class="keyword">my</span> friend!</span><br><span class="line"></span><br><span class="line">| Are you currently enrolled <span class="keyword">in</span> <span class="keyword">the</span> Coursera course associated</span><br><span class="line">| <span class="keyword">with</span> this lesson?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: Yes</span><br><span class="line"><span class="number">2</span>: No</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">| You've reached <span class="keyword">the</span> <span class="keyword">end</span> <span class="keyword">of</span> this lesson! Returning <span class="keyword">to</span> <span class="keyword">the</span> main</span><br><span class="line">| menu...</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">| Please choose a co]]>
    </summary>
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《这一生，至少当一次傻瓜》读书笔记]]></title>
    <link href="http://yoursite.com/2015/05/05/%E3%80%8A%E8%BF%99%E4%B8%80%E7%94%9F%EF%BC%8C%E8%87%B3%E5%B0%91%E5%BD%93%E4%B8%80%E6%AC%A1%E5%82%BB%E7%93%9C%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2015/05/05/《这一生，至少当一次傻瓜》读书笔记/</id>
    <published>2015-05-04T16:27:07.000Z</published>
    <updated>2015-05-05T02:45:47.000Z</updated>
    <content type="html"><![CDATA[<p>五一在家读完了这本书，收获了许许多多的感动，也明白了每个人都有不为人知的艰苦奋斗历程。推荐大家阅读这本书，我把书中对我自己感触深的地方摘抄下来。</p>
<p><strong>（一）</strong></p>
<p>“我告诉他当个傻瓜就好，做做看就会知道，没有比当傻瓜更简单的事了。既然想死，那就在死之前当一次傻瓜。身为有过相同念头的过来人，我领悟到了一点：为一件事疯狂，总有一天可以从中找到答案。”</p>
<p>木村这句话道尽了他的人生。</p>
<hr>
<p><strong>（二）</strong></p>
<p>想要不使用农药栽培苹果，简直就是痴人说梦。</p>
<p>任何苹果果农都会这么认为。</p>
<p>问题是，木村为什么会疯狂地迷上这个痴人之梦？</p>
<a id="more"></a>
<hr>
<p><strong>（三）</strong></p>
<p>一旦迷上某件事，就完全不见其他。</p>
<hr>
<p><strong>（四）</strong></p>
<p>木村十分高兴，家里的小客车一年也洗不了一次，拖拉机他却每天都会清洗。在田里干完活，傍晚回到家里，他就用千斤顶把拖拉机抬起来，洗掉轮胎上的泥巴，为车身打蜡。</p>
<hr>
<p><strong>（五）</strong></p>
<p>佛陀用“对生的执著是人生痛苦的根源”来表达相同的想法，这个世界一切皆空，人类却执著于这些“空”的事物，所以会感到痛苦。</p>
<p>……</p>
<p>大自然是一个可以自给自足的体系。</p>
<p>即使没有人类的协助，草木也可以枝叶茂盛、开花结果。</p>
<p>人类在这个体系中进行人为的活动，试图得到对自己有利的结果，这就是目前的农业。</p>
<p>……</p>
<p>人类种植的果树和大自然中的橘子树是两回事。</p>
<p><em>——摘自章节《改变一生的机缘》</em></p>
<hr>
<p><strong>（六）</strong></p>
<p>“我告诉自己，一定要用自己的力量把这座枯树山变回绿色果园。”</p>
<hr>
<p><strong>（七）</strong></p>
<p>有一天，木村在苹果园内难得说了丧气话：</p>
<p>“是不是该放弃了？”</p>
<p>美千子知道，他并不是真的这么想。于是，美千子告诉了女儿，让她们知道父亲也很痛苦，没想到长女的反应出乎她的意料。</p>
<p>向来文静的女儿怒气冲冲地说：</p>
<p>“我不同意！不然我们过这种穷日子到底是为什么？！”</p>
<p>父亲的梦想不知不觉中已经变成了女儿的梦想。</p>
<hr>
<p><strong>（八）</strong></p>
<p>“当时，我去求每一棵苹果树。他们日渐衰弱，恐怕连根都完蛋了，只要稍微推一下树干，树就开始摇晃。当时我就想，这样下去，树很快会枯掉。于是我走到每一棵苹果树前低头拜托，对苹果树说：‘对不起，让你们受苦了。你们不用开花，也不用结果，只求求你们不要枯掉。’我已经不知道自己该做什么，也没办法告诉家人这些事，只能像之前一样去果园工作。那时候真的是一筹莫展，只能求苹果树。其他果农看到我这副摸样，一定觉得我疯了。不过，现在回想起来，那时候的我最纯真。”</p>
<hr>
<p><strong>（九）</strong></p>
<p>经验和知识是人类不可或缺的。无论做任何事，都需要不断累积经验和知识，否则就会成为别人眼中的傻瓜。然而，挑战全新事物时，经验和知识却往往成为最大的障碍。</p>
<p>木村每次失败，就舍弃一个常识，经历一百次一千次失败后，他终于明白自己正在挑战一个经验和知识完全不起作用的世界。于是，他终于能以一颗纯洁的心正视苹果树。</p>
<p>从这层意义上来说，他达到的心境是一个里程碑。</p>
<hr>
<p><strong>（十）</strong></p>
<p>为什么会走到这一步？</p>
<p>起初只是一个不经意的念头。</p>
<p>远处有座高山，自己可以走到那山顶吗？因为这样一个念头开始登山。</p>
<p>当初他想如果体力不支，中途折返就好。</p>
<p>现在他发现不是体力的问题，越往上爬，山顶越遥远。</p>
<p>他爬了六年，终于明白，这座山实在太高了。</p>
<p>然而，当他不顾一切地往上爬时，这已经成了他生命的意义。他甚至觉得自己来到这个世界，就是为了攀登这座山。</p>
<p>栽培无农药苹果，就是自己的使命。</p>
<p>当他咬紧牙关全心投入时，如同被雷击般清楚地意识到，如果自己宣告放弃，以后绝对不会再有人挑战这个难题。一旦自己放弃，就代表人类放弃了这件事。</p>
<p>不知不觉中，木村只为了实现这个理想而活着。</p>
<p>梦想和木村之间画上了等号。</p>
<hr>
<p><strong>（十一）</strong></p>
<p>八月遭到解雇后，木村在闹市区的酒家找到了一份工作。</p>
<p>刚开始，他负责打扫厕所。各酒家打烊后，他去打扫脏厕所，赚取五百、一千元的报酬。虽然工作很辛苦，但他激励自己，这样就可以为家人买东西了。</p>
<hr>
<p><strong>（十二）</strong></p>
<p>“因为这事，我牙齿都没有了。他们只打断我一颗门牙，但我不想忘记这件事，告诉自己这颗掉落的牙齿是我为苹果而战的证据，就没有去补牙。当时我想，为了保护苹果树，我不惜被人殴打，不去补牙，才能让自己一辈子都不忘记这件事。没想到掉了一颗牙后，旁边的牙齿也开始松动。每次有牙齿松动，我就自己用铁钳拔掉，结果，满嘴的牙齿都掉光了。每当有人问我为什么没有牙齿，我就回答说：‘我用牙齿换来了苹果树的叶子。’”</p>
<hr>
<p><strong>（十三）</strong></p>
<p>“我在抓虫的时候，忽然想到，不知道它们长什么样？我从家带了放大镜，仔细观察手上害虫的长相。结果发现它十分可爱，一双圆圆的大眼睛目不转睛地看着我。一旦看见它的脸，就无法再痛恨它了。它明明是我必须痛恨的敌人，但因为我是傻瓜，不忍心杀死它，就又把它放回树叶上。明明是害虫，长相却很可爱。大自然实在太奇妙了。我又继续观察益虫的长相。益虫是帮忙吃掉害虫的好虫子，没想到，它们却很可怕。叶色草蛉简直就像电影里的怪兽。人类根据自己的需求把昆虫分为害虫和益虫，其实吃叶子的毛虫是食草动物，表情祥和；吃它们的益虫是食肉动物，面目狰狞。”</p>
<p>……</p>
<p>“看到这种情况，我真的很惊讶。昆虫到底生活在怎样的世界？到底是谁设计出这种方式？我感到不可思议，不得不惊叹大自然的玄妙。或许我这么说有点夸张，但之所以有地球，也许就是那些小虫子的功劳。”</p>
<hr>
<p><strong>（十四）</strong></p>
<p>木村已经好久没有在自己的果园中看到苹果树的花了。那是他撒大豆后的第三年、所有果园停止使用农药的第八年的春天。</p>
<p>果园里开了七朵苹果花。</p>
<p>这七朵花中，有两朵结了果。那两个苹果是那一年的全部收成。</p>
<p>在佛堂祭拜过苹果后，木村全家人一起分享。</p>
<p>两颗苹果好吃得令人惊讶。</p>
<p>木村从懂事前就开始吃苹果，却是有生以来第一次吃到这么好吃的苹果。</p>
<p>并不光是心理作用。整棵苹果树的养分都被两个苹果吸收了，当然没理由不好吃。</p>
<hr>
<p><strong>（十五）</strong></p>
<p>夫妻两人骑着小绵羊摩托车，行驶在产业道路的石子路上。丈夫骑车，妻子坐在后方，显然，他们违反了交通规则，但此刻根本无暇顾及这件事。他们急切地望向自家果园的方向，虽然还看不到。</p>
<p>快到果园时，丈夫却把摩托车停在路旁，沿着产业道路往上走。果园本是他们家的，但他们还是沿着相邻的果园战战兢兢地走近。当来到隔壁果园的仓库时，他们悄悄地躲在仓库背后，伸长脖子，好像来看榜单的考生。</p>
<p>眼前是白色的花，整片果园开满了白色的苹果花。</p>
<p>已经好几年没有开花的苹果树一下子全开花了。</p>
<p>人在真正感动的时刻会说不出话，会失去表情。他们愣在原地，一动也不动，说不出半句话。</p>
<p>初春，岩木山山麓的风还有些冷。不知道是否被冷风吹到的关系，丈夫和妻子的眼中都泛着泪光。</p>
<p>相隔九年，久违的苹果花被泪水模糊了。</p>
<p>……</p>
<p>“那一刻，真的是太高兴了。虽说是二十年前的事，但现在回想起来，仍然会忍不住流泪。”</p>
<p>……</p>
<p>“下午，我又一个人跑去看。一天下来不知道去看了几次。傍晚，我带着酒去果园庆祝，在每棵树的根部倒一点点酒，为它们斟酒，感谢它们开了花。嗯，我也喝了，啊哈哈哈！我喝的比较多。赏花的心情从来没有这么好过，我喝完酒，躺在苹果树下抬头看看苹果花，觉得它们实在太漂亮了。和樱花很像，但樱花是往下，对着赏花的人，苹果花往上，不在意人的想法，朝着天空，感觉有点自大。”</p>
<p>……</p>
<p>“人类能做的事很有限，大家都说，木村很努力，但努力的其实不是我，而是苹果树。这不是我在谦虚，是发自内心这么认为。因为无论人再怎么努力，都无法开出一朵苹果花，不管是手上还是脚上。也许大家觉得苹果开花是理所当然，这么想的人，表明他并没有真正理解自然。看到满园的苹果花，我深刻体会到这一点。这些苹果花不是我的功劳，主角不是人，而是苹果树。我之前不懂这个道理，一直以为是自己在种苹果，是自己在管理苹果树。事实上，我只是在协助苹果树。经历了一次又一次的失败后，我终于理解了这一点。我花了很长时间才走到这一步。”</p>
<p><em>——摘自章节《你的果园开花了！》</em></p>
<hr>
<p><strong>（十六）</strong></p>
<p>“协助大自然、分享大自然的恩惠，这才是农业，也是农业应有的态度。”</p>
<hr>
<p><strong>（十七）</strong></p>
<p>如果有人需要帮忙，木村愿意大力协助。虽然他历经了千辛万苦才探索出栽培苹果的方法，却愿意毫无保留地和所有人分享，他从来没有想把这些知识变成自己的专利。</p>
<hr>
<p><strong>（十八）</strong></p>
<p>随着文明过度发展，人类忘记了自己的根。网络非常方便，用手机随时可以连线世界各地，但如果不吃不喝，人就无法活下去。生态学家说，人类是植物的寄生虫，农业是人类生存的根。</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/6417ff8138417a5c8136270f6a9c5247.JPG" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>五一在家读完了这本书，收获了许许多多的感动，也明白了每个人都有不为人知的艰苦奋斗历程。推荐大家阅读这本书，我把书中对我自己感触深的地方摘抄下来。</p>
<p><strong>（一）</strong></p>
<p>“我告诉他当个傻瓜就好，做做看就会知道，没有比当傻瓜更简单的事了。既然想死，那就在死之前当一次傻瓜。身为有过相同念头的过来人，我领悟到了一点：为一件事疯狂，总有一天可以从中找到答案。”</p>
<p>木村这句话道尽了他的人生。</p>
<hr>
<p><strong>（二）</strong></p>
<p>想要不使用农药栽培苹果，简直就是痴人说梦。</p>
<p>任何苹果果农都会这么认为。</p>
<p>问题是，木村为什么会疯狂地迷上这个痴人之梦？</p>]]>
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="阅读" scheme="http://yoursite.com/tags/%E9%98%85%E8%AF%BB/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[倒退的旅行]]></title>
    <link href="http://yoursite.com/2015/05/01/%E5%80%92%E9%80%80%E7%9A%84%E6%97%85%E8%A1%8C/"/>
    <id>http://yoursite.com/2015/05/01/倒退的旅行/</id>
    <published>2015-05-01T08:55:16.000Z</published>
    <updated>2015-05-01T09:13:38.000Z</updated>
    <content type="html"><![CDATA[<p>（一）</p>
<p>我靠在座位上，仰头盯着车厢顶上淡黄色平行的两行灯，眼角的余光在不经意间，感受到两侧车窗外的一切物体都在向前迅速掠过。一切的岩石、树木、楼房、花草、电线塔，无一例外，都迅速向前、向前，消失不见。也许是前方有个黑洞，把这一切的物体都统统吞噬了吧。</p>
<hr>
<p>（二）</p>
<p>周围的窗户黑了下来，一道道光影划过，仿佛置身时光列车中，穿梭于跨越时空的隧道。</p>
<p>我一直在后退，快速地后退，沿着时光的脚印倒退，退回到我身后那片记忆中充满欢笑与爱的土地——故乡。</p>
<a id="more"></a>
<hr>
<p>（三）</p>
<p>我们一直都在前进，从小被教导要努力进取，凡事争先恐后、要夺个一二三名，勇往无前、永无止境地追寻人生的梦想。</p>
<p>可是，我们是否想过自己到底要去向何方？是不是大家都在赶路，我们就得气喘吁吁地逼迫自己前行，而无法逃脱这冷酷的寻底竞争？是不是我们犹豫后退、放弃这无尽的前行就会遭到千夫所指而被众人视为停滞不前、堕落萎靡？</p>
<hr>
<p>（四）</p>
<p>想起了《The Legend of 1900》里，钢琴师与众船员水手一一告别之后，转身走下甲板，他站在连结陆地与甲板的长梯上，望着无尽的大陆，犹豫许久，最终调头走回甲板。相比于永不回头地向前奔跑，我更钦佩他调头的勇气与心量。</p>
<hr>
<p>（五）</p>
<p>记得几年前的一个晚上，同学们站在从教室到寝室楼的路边仰头在看流星雨。</p>
<p>“哇我看到了一颗，在这里！”一个女生指着星空高声叫道。</p>
<p>“哇真的有，又有一颗流星！”</p>
<p>“这个方位真的有好几颗！”</p>
<p>……</p>
<p>当大家都朝着一个方向看流星雨而欢呼的时候，我望向相反的方向，低矮的天际一颗流星快速划过，没有听见快乐的呼喊声，但是我看到了，那一瞬间同样的美丽。</p>
<hr>
<p>（六）</p>
<p>两个星期前，总理来到厦大，老师和同学们欢呼雀跃地翘首以待，夹道迎接。我和周围的同学都纷纷举起手机，时刻准备拍照。总理从一栋楼出来，驱车前往下一个目的地，成群的学生便大规模迅速移动，跑步赶往下一个地点。</p>
<p>我没有继续追，和女友慢悠悠地从湖边走去食堂吃饭。这时，我看到湖边有一个悠闲眺望的人，她目不转睛地盯着平静湖面上悠闲的黑天鹅。这宁静的景象和周遭涌动的人群极不协调，剧烈的反差突然让我感悟到了些什么。</p>
<hr>
<p>（七）</p>
<p>半年前的一个晚上，建南大会堂里大约挤了近五千人，水泄不通。这里即将举行席慕蓉的讲座。我从后门挤进来，保安便关闭了大门，会堂里人山人海，大家挤得面红耳赤。我从口袋摸到手机，却没办法拿到眼前看一下时间，因为手压根就无法从众人的前胸后背间举上来。而且会堂里手机信号全无，安全问题让人堪忧。</p>
<p>当时的会堂俨然一座围城，外面的人挤破头想进来一睹大师风范，里面的人大汗淋漓想出都出不去。</p>
<p>这芸芸众生都有的一份执念，如何才能放下？</p>
<hr>
<p>（八）</p>
<p>我望向窗外，看到一片片田地，不自觉地想起了《插秧歌》中的几句词：“手把青秧插野田，低头便见水中天。六根清净方为道，退步原来是向前。”</p>
<hr>
<p>（九）</p>
<p>“姐姐，我们是几号座位？”</p>
<p>“你看，就是前面那个有小餐桌的倒着的那排座位。”</p>
<p>动车缓缓开动，我们倒退而行，窗外的景物向前移动。</p>
<p>生活的路程中，我们习惯了单程向前。而此刻的我想倒退，退回去看看，退到几多年前，退到老家楼顶的那个葡萄架下去。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>（一）</p>
<p>我靠在座位上，仰头盯着车厢顶上淡黄色平行的两行灯，眼角的余光在不经意间，感受到两侧车窗外的一切物体都在向前迅速掠过。一切的岩石、树木、楼房、花草、电线塔，无一例外，都迅速向前、向前，消失不见。也许是前方有个黑洞，把这一切的物体都统统吞噬了吧。</p>
<hr>
<p>（二）</p>
<p>周围的窗户黑了下来，一道道光影划过，仿佛置身时光列车中，穿梭于跨越时空的隧道。</p>
<p>我一直在后退，快速地后退，沿着时光的脚印倒退，退回到我身后那片记忆中充满欢笑与爱的土地——故乡。</p>]]>
    
    </summary>
    
      <category term="倒退" scheme="http://yoursite.com/tags/%E5%80%92%E9%80%80/"/>
    
      <category term="旅行" scheme="http://yoursite.com/tags/%E6%97%85%E8%A1%8C/"/>
    
      <category term="时间" scheme="http://yoursite.com/tags/%E6%97%B6%E9%97%B4/"/>
    
      <category term="个人随笔" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用心聆听你们的声音]]></title>
    <link href="http://yoursite.com/2015/04/30/%E7%94%A8%E5%BF%83%E8%81%86%E5%90%AC%E4%BD%A0%E4%BB%AC%E7%9A%84%E5%A3%B0%E9%9F%B3/"/>
    <id>http://yoursite.com/2015/04/30/用心聆听你们的声音/</id>
    <published>2015-04-30T10:38:34.000Z</published>
    <updated>2015-05-01T01:19:02.000Z</updated>
    <content type="html"><![CDATA[<p>今天上午，连续四节的《软件体系结构》实验课，从早上八点开始，一直持续到将近中午十二点，我担任这门课的助教。</p>
<p>实验的内容关于设计模式，题目有六道，在上个星期四布置，要求同学们在本周四（今天）前完成，并在实验课上由助教逐一检查。</p>
<p>由于我自己平时在这门课的理论课上也没有仔细听讲，多是去了把签到表发下去，然后就径自坐在教室后排看自己带的书，所以只好临时突击。昨天晚上和今天一早把六个设计模式看了一遍，并把题目和详解也看了一遍，当然，这么短的时间看下来，只是知其然而已。</p>
<a id="more"></a>
<p>我深知自己水平有限，不及实验室这许多大三的同学，于是检查他们的作业时便更加虚心聆听。他们中的大部分都完成得很认真和出色，从他们画的类图可以得知设计的思路，从他们的程序代码可以看出设计的细节，从他们的运行结果可以看出是否达到设计的目的。对了，最重要的是，从他们讲解自己的设计时那眉飞色舞的表情，可以看出他们的真诚和用心。</p>
<p>一个上午，同样的六道作业题，我要听几十个同学的思路，虽然它们大部分是接近的，可是我总能听出些细微的不同之处。因为人的大脑是很神奇的，如果是大家自己独立思考出来的东西，就不会有百分之百的相似。佛陀第五百次看到一朵花开时仍然保持着第一次看到花开时的快乐与欣喜。我常记着这个故事，对同学们的设计讲解，我听了一遍又一遍，虽不及佛陀的境界，但我努力做到在每一遍听的时候，都像第一次听时一样，保持热情、耐心、无知、好奇与兴趣。我听得饶有兴味，以至于有时一个同学滔滔不绝地和我讲了十几分钟。我喜欢这样的感觉，用心聆听他人的故事。我要做的就是耐心聆听，不插话，不打断，偶尔点头微笑，听他们把话说完，把意思和思想充分自由地表达出来。我感受到，他们讲得很开心，我也听得很开心。</p>
<p>这还让我想到一点，为什么说在公司里，员工永远不要觉得自己比老板聪明。因为老板每天会听到不仅仅是我们，还有单位其他各个员工的工作汇报和总结，他还要和许多其他公司的高层会晤。老板即便有时在细节方面可能不如员工，但不容置疑的是他的思路和眼界会比我们开阔许多。当然，这是扯了点题外话，并没有把我自己比作公司老板之意，只是刚好想到，便顺手记了下来。</p>
<p>思绪回到先前，上午四节课过去了，我走出实验楼，中午的阳光温暖但不炽烈。我突然觉得，确实应当好好珍惜这阳光灿烂的日子，能够在这样安静的校园里，静静学习，踏踏实实地过每一天，是一件多么幸福的事情。</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/da85e943990b845e5319a656988471f3.jpg" alt=""></p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/357c75fca88beab6926215c5341a0757.jpg" alt=""></p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/d8129a67f83c33c07518faed79802542.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天上午，连续四节的《软件体系结构》实验课，从早上八点开始，一直持续到将近中午十二点，我担任这门课的助教。</p>
<p>实验的内容关于设计模式，题目有六道，在上个星期四布置，要求同学们在本周四（今天）前完成，并在实验课上由助教逐一检查。</p>
<p>由于我自己平时在这门课的理论课上也没有仔细听讲，多是去了把签到表发下去，然后就径自坐在教室后排看自己带的书，所以只好临时突击。昨天晚上和今天一早把六个设计模式看了一遍，并把题目和详解也看了一遍，当然，这么短的时间看下来，只是知其然而已。</p>]]>
    
    </summary>
    
      <category term="幸福" scheme="http://yoursite.com/tags/%E5%B9%B8%E7%A6%8F/"/>
    
      <category term="看见" scheme="http://yoursite.com/tags/%E7%9C%8B%E8%A7%81/"/>
    
      <category term="个人随笔" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[摘抄小诗一首]]></title>
    <link href="http://yoursite.com/2015/04/29/%E6%91%98%E6%8A%84%E5%B0%8F%E8%AF%97%E4%B8%80%E9%A6%96/"/>
    <id>http://yoursite.com/2015/04/29/摘抄小诗一首/</id>
    <published>2015-04-29T04:26:21.000Z</published>
    <updated>2015-04-29T07:18:53.000Z</updated>
    <content type="html"><![CDATA[<p>别让我祈祷能在险恶中获得庇护，</p>
<p>而祈祷可以勇敢地面对险恶；</p>
<hr>
<p>别让我乞求痛苦止息，</p>
<p>而乞求我的心可以战胜痛苦；</p>
<hr>
<p>别让我在人生战场上盼望盟友，</p>
<p>而是发现自己的力量。</p>
<a id="more"></a>
<hr>
<p>别让我在不安和恐惧中渴望救助，</p>
<p>而祈愿我的坚韧可以赢取自由。</p>
<hr>
<p>请别让我做一个弱者，</p>
<p>只在成功中感觉到你的仁慈，</p>
<p>但请让我在失意时感到你双手紧握。</p>
<hr>
<p><em>（摘自泰戈尔《采果集》）</em></p>
<hr>
<p>Let me not pray to be sheltered from dangers</p>
<p>but to be fearless in facing them.</p>
<hr>
<p>Let me not beg for the stilling of my pain</p>
<p>but for the heart to conquer it.</p>
<hr>
<p>Let me not look for allies in life’s battlefield</p>
<p>but to my own strength.</p>
<hr>
<p>Let me not crave in anxious fear to be saved</p>
<p>but hope for the patience to win my freedom.</p>
<hr>
<p>Grant me that I may not be a coward,</p>
<p>feeling your mercy in my success alone;</p>
<p>but let me find the grasp of your hand in my failure.</p>
<hr>
<p><em>(excerpted from Rabindranath Tagore, “FRUIT-GATHERING”)</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>别让我祈祷能在险恶中获得庇护，</p>
<p>而祈祷可以勇敢地面对险恶；</p>
<hr>
<p>别让我乞求痛苦止息，</p>
<p>而乞求我的心可以战胜痛苦；</p>
<hr>
<p>别让我在人生战场上盼望盟友，</p>
<p>而是发现自己的力量。</p>]]>
    
    </summary>
    
      <category term="诗歌" scheme="http://yoursite.com/categories/%E8%AF%97%E6%AD%8C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[顶澳仔小广场卖豆花的老爷爷]]></title>
    <link href="http://yoursite.com/2015/04/28/%E9%A1%B6%E6%BE%B3%E4%BB%94%E5%B0%8F%E5%B9%BF%E5%9C%BA%E5%8D%96%E8%B1%86%E8%8A%B1%E7%9A%84%E8%80%81%E7%88%B7%E7%88%B7/"/>
    <id>http://yoursite.com/2015/04/28/顶澳仔小广场卖豆花的老爷爷/</id>
    <published>2015-04-28T15:17:43.000Z</published>
    <updated>2015-04-28T16:36:50.000Z</updated>
    <content type="html"><![CDATA[<p>下午六点多去顶澳仔小广场，接即将跳舞结束的梦梦。</p>
<p>傍晚的小广场，往来的行人络绎不绝。在灯火辉煌的街边小店和众人之中，我看到了一个坐在石墩上的老爷爷，他的背微微弓起，面前是一辆三轮车，拖斗里放着一桶做好的豆花，车上立着一个大牌子，写着“客家豆花”。</p>
<p>我看到有人来买豆花，老爷爷起身，背弓得很厉害，深深弯着腰，用纸杯打着豆花，加了点糖，盖好盖子，递给客人，那样子真是礼貌极了。</p>
<a id="more"></a>
<p>我开始以为他是驼背，后来发现当客人走远之后，老爷爷站直了身体，半晌，又坐回石墩上，等待下一个来买豆花的客人。</p>
<p>后来梦梦从瑜伽馆出来，说想喝一杯豆花，于是我们一人买了一杯。买的时候，我特地再观察了一遍，老爷爷还是一样的毕恭毕敬、动作熟练地打着豆花。不同只是，我这次站的角度和距离更靠近他，看得更加真切。</p>
<p>我看到的是卖豆花的老爷爷，是流落街头仍然在验证哥德巴赫猜想的陈景润，是即使双耳失聪仍然在钢琴旁创作的贝多芬。</p>
<p>今晚，我的脑中时不时就闪过老爷爷弯腰给客人打豆花的样子。我不知道，这是被生活重担压弯的腰，还是本着顾客至上而毕恭毕敬地弯腰。也许都有，也许都不是，毕竟我不是他，怎知他经历了怎样的经历，又有怎样的故事呢。</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/5db669838300bbf7ff79dadfb15a339b.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>下午六点多去顶澳仔小广场，接即将跳舞结束的梦梦。</p>
<p>傍晚的小广场，往来的行人络绎不绝。在灯火辉煌的街边小店和众人之中，我看到了一个坐在石墩上的老爷爷，他的背微微弓起，面前是一辆三轮车，拖斗里放着一桶做好的豆花，车上立着一个大牌子，写着“客家豆花”。</p>
<p>我看到有人来买豆花，老爷爷起身，背弓得很厉害，深深弯着腰，用纸杯打着豆花，加了点糖，盖好盖子，递给客人，那样子真是礼貌极了。</p>]]>
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="看见" scheme="http://yoursite.com/tags/%E7%9C%8B%E8%A7%81/"/>
    
      <category term="街头巷尾" scheme="http://yoursite.com/categories/%E8%A1%97%E5%A4%B4%E5%B7%B7%E5%B0%BE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[没有任何借口]]></title>
    <link href="http://yoursite.com/2015/04/26/%E6%B2%A1%E6%9C%89%E4%BB%BB%E4%BD%95%E5%80%9F%E5%8F%A3/"/>
    <id>http://yoursite.com/2015/04/26/没有任何借口/</id>
    <published>2015-04-26T15:46:12.000Z</published>
    <updated>2015-04-26T16:28:50.000Z</updated>
    <content type="html"><![CDATA[<p>我这个人有个坏毛病，有时候对待家人和女朋友，明明是没有关心和照顾到，却说着许许多多正当的理由。</p>
<p>生活和学习中的很多时候，我如果没做好一件事情，心里常会反思着一定是自己不够认真或者没有尽心尽力，而不会找其他的借口。和同学一起做某件事，当看到摊上麻烦事时大家相互推脱、把自己置身事外的样子时，我心里总会一声叹息，然后想着怎么把事情往好的方向调整，下一步要怎么做才是关键，互相推卸责任、把自己与事情撇清关系是不可取的，是没有责任心和缺乏担当的表现。</p>
<a id="more"></a>
<p>生活中我尚且能够反思自我，不找借口，却往往在和家人、和最亲最爱的人相处的有些当下，说着自己的理由和状况。我知道，即使这些理由和状况是真实的，它们却常会伤害到我最亲最爱的人的心。</p>
<p>从此以往，我对待亲情，当珍惜尽心，心存挂念，没有任何借口。对待爱情，当用心呵护，提醒幸福，没有任何借口。</p>
<p>此篇短文，是为反省书。</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/20326ae086cfde51b7a12b8af15cae74.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我这个人有个坏毛病，有时候对待家人和女朋友，明明是没有关心和照顾到，却说着许许多多正当的理由。</p>
<p>生活和学习中的很多时候，我如果没做好一件事情，心里常会反思着一定是自己不够认真或者没有尽心尽力，而不会找其他的借口。和同学一起做某件事，当看到摊上麻烦事时大家相互推脱、把自己置身事外的样子时，我心里总会一声叹息，然后想着怎么把事情往好的方向调整，下一步要怎么做才是关键，互相推卸责任、把自己与事情撇清关系是不可取的，是没有责任心和缺乏担当的表现。</p>]]>
    
    </summary>
    
      <category term="反思" scheme="http://yoursite.com/tags/%E5%8F%8D%E6%80%9D/"/>
    
      <category term="个人随笔" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[厦大院长推荐书目]]></title>
    <link href="http://yoursite.com/2015/04/25/%E5%8E%A6%E5%A4%A7%E9%99%A2%E9%95%BF%E6%8E%A8%E8%8D%90%E4%B9%A6%E7%9B%AE/"/>
    <id>http://yoursite.com/2015/04/25/厦大院长推荐书目/</id>
    <published>2015-04-25T15:08:06.000Z</published>
    <updated>2015-04-25T15:43:27.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://qiniupicbed.qiniudn.com/upload/afd45414a84f77b1de3f24a280e9962c.png" alt=""></p>
<a id="more"></a>
<p><img src="http://qiniupicbed.qiniudn.com/upload/bd4988bb5f3e54b35577c81572d29ceb.png" alt=""></p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/b6f6a91a2d541f6bf414ec4e09058523.png" alt=""></p>
<p><strong>古训：</strong></p>
<blockquote>
<ul>
<li><p>业精于勤，荒于嬉；行成于思，毁于随。——韩愈</p>
</li>
<li><p>读书破万卷，下笔如有神。——杜甫</p>
</li>
<li><p>立身以立学为先，立学以读书为本。——欧阳修</p>
</li>
<li><p>黑发不知勤学早，白首方悔读书迟。——颜真卿</p>
</li>
<li><p>发奋识遍天下字，立志读尽人间书。——苏轼</p>
</li>
<li><p>非淡泊无以明志，非宁静无以致远。——诸葛亮</p>
</li>
<li><p>非学无以广才，非志无以成学。——诸葛亮</p>
</li>
<li><p>书到用时方恨少，事非经过不知难。——陆游</p>
</li>
<li><p>问渠那得清如许，为有源头活水来。——朱熹</p>
</li>
<li><p>书痴者文必工，艺痴者技必良。——蒲松龄</p>
</li>
<li><p>千里之行，始于足下。——老子</p>
</li>
<li><p>路漫漫其修远兮，吾将上下而求索。——屈原</p>
</li>
<li><p>吾生也有涯，而知也无涯。——庄子</p>
</li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://qiniupicbed.qiniudn.com/upload/afd45414a84f77b1de3f24a280e9962c.png" alt=""></p>]]>
    
    </summary>
    
      <category term="阅读" scheme="http://yoursite.com/tags/%E9%98%85%E8%AF%BB/"/>
    
      <category term="美图" scheme="http://yoursite.com/categories/%E7%BE%8E%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《异类》读书笔记整理]]></title>
    <link href="http://yoursite.com/2015/04/24/%E3%80%8A%E5%BC%82%E7%B1%BB%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/"/>
    <id>http://yoursite.com/2015/04/24/《异类》读书笔记整理/</id>
    <published>2015-04-24T05:00:06.000Z</published>
    <updated>2015-04-25T15:20:24.000Z</updated>
    <content type="html"><![CDATA[<p>马尔科姆·格拉德威尔（Malcolm Gladwell）的这本《异类》，我当时买的时候，是因为这个书名与众不同。昨天快速读了一遍，之所以快速，是因为书中的内容并不是特别符合我现在的品味，有些是已经知道的，譬如马太效应和10000小时法则等，还有些是偏向励志类的故事。</p>
<p>不过每本书都有其可取和可学之处。我就把我感受深的几处内容整理一下，是为读后笔记。</p>
<p><em>注：其中标明“原文摘抄”的部分，即是从书中截取的段落文字；标明“原文整理”的部分，是我将原文内容进行整合，并适当加入了自己的语言来描述。</em></p>
<a id="more"></a>
<hr>
<h3 id="（一）罗塞托之谜">（一）罗塞托之谜</h3><p><strong>原文摘抄</strong></p>
<p>罗塞托瓦尔福尔托雷坐落在亚平宁山山脚，它是意大利福贾省的一个小城，位于首都罗马城的东南方向，距离罗马约100英里。小城环绕一个中心广场展开，这里有着典型的中世纪村庄风格。</p>
<p>……</p>
<p>虽然时间已经过去了50多年，但提到调研的发现，布鲁恩还是掩饰不住内心的激动，“这里没人自杀，没人酗酒，没人吸毒，犯罪率也很低。他们没有人领救济金。我们甚至没有发现任何人患上胃溃疡。生活在这里的人大多都是自然死亡，就这么简单。”</p>
<p>……</p>
<p>慢慢地，沃尔夫开始意识到，罗塞托的秘密不在于饮食，不在于运动，也不在于遗传基因和地理位置，而在于罗塞托社会自身。当沃尔夫和布鲁恩漫步在这个小镇的时候，他们终于明白了其中的奥秘。他们看到这里的人们如何走访亲友，如何在半路上停下来用意大利语拉家常，如何在院子里为家人做饭；他们了解到这里的不同姓氏如何拓展家族规模。这里有许多三代同堂的大家庭，长辈在家族中享有绝对权威。居民们都参加圣母圣衣堂的弥撒，教会在团结社会和安抚伤痛方面发挥重要作用。在这个人口不到两千的小镇上，竟然存在22个相互独立的社会团体。这里的人们崇尚平等理念，富人不会浮夸炫耀，整个社会都愿意帮助失败者走出困境。</p>
<p>在罗塞托人将意大利南部的本土文化移植到宾夕法尼亚州山区的过程中，他们建立起一种强大的社会结构，这使得他们免受现代社会的压力。罗塞托人之所以健康，是因为他们生活在一个自给自足的山区小镇。</p>
<p>“我记得第一次去罗塞托，看到祖孙三代共进晚餐，看到街边许多惬意的小面包店。那里的人们经常在街上散步，有空就会坐在门廊聊天。妇女们在制衣厂工作，而男人们则在采石场里劳动。”布鲁恩说，“这真是一幅和谐的图景。”</p>
<hr>
<h3 id="（二）发散性思维测试">（二）发散性思维测试</h3><p><strong>原文整理</strong></p>
<p>我们知道有许多智力测试题，这些选择题要求将可能性分类，排除其他可能性，并努力找到唯一答案，属于收敛性测试。让我感到眼前一亮的是，书中提到了发散性测试。</p>
<p>请看下面两件物品，尽可能多地写出它们的不同用途：</p>
<blockquote>
<p>1.砖块</p>
<p>2.毛毯</p>
</blockquote>
<p>这是一道所谓的“发散性思维测试”，它要求我们运用想象力，寻找尽量多的不同的可能性。这类测试中，不存在唯一答案，测试的目的是得出答案的数量和独特性，测试分析的不是我们的智力，而是创造力。</p>
<p>一个学生的答案如下：</p>
<blockquote>
<p>砖块：入室抢劫；测量井的深度；当武器；当钟摆；当雕刻胚子；砌墙；证明阿基米德定律；抽象雕塑作品；压舱物之类；榔头；门挡；鞋擦；打碎了铺路；楔子；砝码；垫桌子；纸镇；堵兔子洞。</p>
</blockquote>
<p>作为对照，我们看看另一个叫弗洛伦撒的学生的答案。哈德森介绍说弗洛伦撒是个申通，是它们学校智商最高的学生。他的答案如下：</p>
<blockquote>
<p>砖块：建造物体；投掷。</p>
</blockquote>
<p>弗洛伦撒的想象力到哪里去了？他仅仅指出砖块和毯子最普通、最常用的功能就没下文了。这说明，一个人他的智商可能不如别人高，但不意味着他缺少其他方面的长处，比如丰富多彩的想象力。</p>
<hr>
<h3 id="（三）不同场合的说话方式问题">（三）不同场合的说话方式问题</h3><p><strong>原文整理</strong></p>
<p>权力距离指数（Power Distance Index，缩写为PDI），指人们对待比自己更高等级阶层的态度，特别是指对权威的重视和尊重程度。</p>
<p>有的国家PDI很高，下级对上级说话就会十分委婉、客套，以表示尊敬。然而有些时候，是要严禁客套的，该用命令式的口吻就得用，容不得顾左右而言他，话语必须直指要害，否则后果可能不堪设想。</p>
<p>书中第七章，讲飞机失事问题，里面通过黑匣子的录音，可以听到机长和副机长之间的对话。其中就讲到1982年弗罗里达航空的一架客机在华盛顿失事，其间副机长曾3次告知机长，机翼上方有结冰现象。我们听一下当时的对话记录，就会发现里边全是委婉的暗示性语句。</p>
<blockquote>
<p><strong>副机长：</strong>看看机翼上挂的这些冰吧，啊，后边，就在那儿，看到了么？</p>
</blockquote>
<p>然后：</p>
<blockquote>
<p><strong>副机长：</strong>看后边那些冰柱，上边全是。</p>
</blockquote>
<p>再然后：</p>
<blockquote>
<p><strong>副机长：</strong>好家伙，这些冰除也除不掉的。这么多冰，感觉很不安全。</p>
</blockquote>
<p>最后，当他们获准降落的时候，副机长的语气上升了几个等级，由暗示到了建议：</p>
<blockquote>
<p><strong>副机长：</strong>既然现在坐着没事儿，让我们再检查一下机翼上方。</p>
<p><strong>机长：</strong>我想我们再等一会儿。</p>
</blockquote>
<p>飞机一头扎到波托马克河之前，副机长最后一次跟机长对话没有再使用暗示，也不是建议，更不是命令方式。其实那只是对事实的陈述，这次机长表示了同意。</p>
<blockquote>
<p><strong>副机长：</strong>拉瑞，我们在往下掉，拉瑞。</p>
<p><strong>机长：</strong>我知道。</p>
</blockquote>
<p>可见，有时候在特定情况下的说话方式会直接影响到事件的结果。为了安全地飞行，飞机应由经验较少的飞行员驾驶。因为这样就意味着，有更丰富经验的第二驾驶员（副机长）会在出现状况的时候大胆说出自己的见解。</p>
<hr>
<h3 id="（四）花22分钟去思考">（四）花22分钟去思考</h3><p><strong>原文整理</strong></p>
<p>多年以来，加州大学伯克利分校的数学教授舍恩菲尔德利用录像机拍摄了无数学生解决数学难题的过程。但是蕾妮的这段录像是舍恩菲尔德最推崇的，因为它完美展现了数学学习的秘密。从蕾妮开始学习程序使用，到她最后说“哈哈哈，这下我可明白了”中间一共过去了22分钟。这可是一段相当长的时间。“这是一道八年级数学斜率问题，”舍恩菲尔德说，“如果我让一个普通水平的八年级学生坐到蕾妮的位置上，我估计试不了几次他们就会说：‘我做不出来，给我解释一下吧。’”</p>
<p>在另一次调查问卷中，舍恩菲尔德问高年级学生，当面对一道难题做不出来放弃之前会花多少时间思考，他得到的答案从30秒到5分钟不等，平均2分钟。</p>
<p>但是蕾妮却一直坚持。她不断试验，虽然屡战屡败，但屡败屡战。她把自己的设想说出来，反复思索。她不断坚持，不愿放弃。一开始她就朦朦胧胧知道自己画线的方法有问题，但她一直坚持到彻底解决问题才肯罢休。</p>
<p>蕾妮不是数学天才，但舍恩菲尔德却从她身上发现了不一般的品性。</p>
<p>“她身上的某种意愿驱使她做这种努力，”舍恩菲尔德说，“她并不接受肤浅的解释，然后说一句‘是的，你说得对’就走开；她愿意更深入地理解，这一点异乎寻常。”他把录像退回到蕾妮发现斜率造成图形改变而露出一脸好奇的片段。</p>
<p>“看，”他说道，“她恍然大悟。许多学生对改变斜率造成图形变化无动于衷，而她却在思考：‘这跟我想的不太一样，我不太理解。但这一点一定很重要，我想找到答案。’当她最终找到答案的时候，她说：‘是的，这就对了。’”</p>
<p>舍恩菲尔德在大学教授“疑难解决”课程。这门课程设计的初衷，用他的话来说，就是帮助学生摆脱以前养成的不良学习习惯。“我选了一个难度适中的问题，”他说，“我告诉学生：‘我给你们不知一个为期两星期的课外考试。我知道你们会怎么做。第一个星期你们什么都不用做，等第二个星期才开始。但是现在我要提醒你们：如果你们只花一个星期，你们是解决不了这道题目的。你们中肯定也有人今天就动手解决，但很快会被困住。你们会来跟我说，这题目我做不出来。但那个时候我会告诉你们，坚持下去，到了第二个星期，自然会有意想不到的进展。’”</p>
<p>很多时候我们希望自己天生就擅长某一领域，然而只有一部分人有这种能力，另一部分人则没有。但对于舍恩菲尔德来说，态度比能力更重要。只要你有意愿，就能驾驭某一领域。这也正是舍恩菲尔德向学生传授的思想。<strong>成功就是坚持不懈，就是顽强不屈，就是别人花30秒钟就放弃的事你却花22分钟去思考的坚定信念。</strong></p>
<hr>
<p>好啦，这本书就阅读和记录到这里，继续读其他书去咯！^_^</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>马尔科姆·格拉德威尔（Malcolm Gladwell）的这本《异类》，我当时买的时候，是因为这个书名与众不同。昨天快速读了一遍，之所以快速，是因为书中的内容并不是特别符合我现在的品味，有些是已经知道的，譬如马太效应和10000小时法则等，还有些是偏向励志类的故事。</p>
<p>不过每本书都有其可取和可学之处。我就把我感受深的几处内容整理一下，是为读后笔记。</p>
<p><em>注：其中标明“原文摘抄”的部分，即是从书中截取的段落文字；标明“原文整理”的部分，是我将原文内容进行整合，并适当加入了自己的语言来描述。</em></p>]]>
    
    </summary>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[感悟在思维碰撞间迸发]]></title>
    <link href="http://yoursite.com/2015/04/23/%E6%84%9F%E6%82%9F%E5%9C%A8%E6%80%9D%E7%BB%B4%E7%A2%B0%E6%92%9E%E9%97%B4%E8%BF%B8%E5%8F%91/"/>
    <id>http://yoursite.com/2015/04/23/感悟在思维碰撞间迸发/</id>
    <published>2015-04-23T13:20:19.000Z</published>
    <updated>2015-04-23T15:21:16.000Z</updated>
    <content type="html"><![CDATA[<p>今晚刚刚听完讲座《跨界·对话——人性迷思》，是新闻传播学院的黄合水教授主讲。</p>
<p>黄教授的本科、硕士和博士都是学习心理学专业，他讲座中的许多观点是不错的。譬如他谈到人要活着、不死，就要满足三点：维衡，避害，度闲。这关联到人的三个需求：生理，安全，感动。这又对应地关联到第一、第二、第三产业。</p>
<p>此话怎讲？具体来说，人要活着，首先要维持自身的平衡，吃喝拉撒睡，还有性，这些是最基本的生理需求，要满足这个需求，我们就有了农业，要种植粮食来维持生命。其次是避害，人要活着就要有基本的安全保障，保证自己不被老虎吃掉，不被洪水冲走等等，那么就有了制造业，我们生产工具，来对抗动物，来抵抗洪水。最后，当生理需求和安全需求都满足的情况下，人每天除了睡觉吃饭之外，还有很多的空闲时间，要怎么度过这些空闲时间便成了一个问题，于是有了服务业，我们可以从事商业活动，可以运输东西，可以玩手机，可以跳广场舞等等，我们可以做各种各样的事情来打发空闲的时间，我们可以运用各种感官来感受世界，接收信息，观察事物，来获得感动，得到对世界的认知和体悟。</p>
<a id="more"></a>
<p>这让我们容易想到马斯洛的需求层次理论。他在理论中将人类的需求从低到高分为五层：生理上的需求，安全上的需求，情感和归属的需求，尊重的需求，自我实现的需求。那么黄教授所讲与马斯洛需求层次有何关系？</p>
<p>关系有如下几点：</p>
<ul>
<li><p>爱：帮助他人满足三大需要（生理，安全，感动）；</p>
</li>
<li><p>归属：共同满足三大需要；</p>
</li>
<li><p>尊重：确认相互帮助能力；</p>
</li>
<li><p>自我实现：不受生理和安全需要的束缚。</p>
</li>
</ul>
<p>举例来说，第一，爱就是帮助他人满足三大需要。比如母亲爱孩子，当孩子饿了的时候母亲就会喂他吃东西，当孩子遇到危险时母亲会挺身而出保护他，当孩子对某些玩具感兴趣时母亲会拿来给他玩。</p>
<p>第二，归属就是共同满足三大需要。人都是活在群体之中的，由起初的家庭，一家人生活在一起，到后来的和社会上他人建立起的群体，比如军人加入了部队，战友之间在危难时相互帮助，有粮食大家一起吃，这建立起的深厚情谊是坚不可摧的。这就是人的归属感。</p>
<p>第三，尊重就是确认相互帮助能力。我们能给别人提供力所能及的帮助，他人也有能在某个时候给我们以特定帮助的能力，这样人与人之间就产生了尊重。</p>
<p>第四，自我实现是在不受生理和安全需要束缚的情况下会显现出来的。即我们在空闲的时候，可以朝着自己感兴趣的方向，做自己想做的事，读自己想读的书，感受自己希望感受到世界的角度，把时间花在修炼自我、提升自我的境界上。</p>
<p>黄教授还讲到，我们看到的追逐金钱的企业家，崇尚权力的政治家，名声鹊起的科学家和艺术家，内心博爱的慈善家，其实都好像是一棵大树的叶子，而其根、本仍可以归结到生理、安全和感动上来。</p>
<p>后来的提问互动环节，有两个同学的问题提得很好，可是我对黄教授的回答不敢恭维，也许是人言言殊吧，每个人都可以有自己的观点和想法，并保留自己的意见。其中一个同学和黄教授的对话中说到，一个人是不是真的能够出于纯粹地做出善行。黄教授认为这在现实生活中是基本不存在的，一个人付出的时候，总是怀有某种期待的，希望下次自己处于同样情境的时候也能得到对方或者他人同样的回报。而提问的学生认为，人是可以在有些时候纯粹付出的。比如看到自己的家人溺水了，即使自己不会游泳，也很可能在当下不作思考、立即跳入水中救人，而黄教授认为现实生活中，不会游泳的人基本是不可能跳入水中去救人的，只有会游泳的人才会跳下去。</p>
<p>黄教授的这个观点以及之后对几个问题的说法，当时引起了我内心极大的抵触和不悦，我甚至差点拎包起身走人。按照以往，我很可能就这么做了，可是这次，我没有。我安静地坐着，仿佛有另一个自己悬在身后的空间里注视着座椅上的自己。座位上的我，外表平静，内心却有两股力量在较劲。一股力量在说：“这样的观点我绝对不能接受，我的理解已经超越了他，没必要再听下去了，走吧。”另一股力量在说：“安静下来，听人家把话说完，也许听完会有不一样的看法。试着去包容，每个人的观点不同，当相互抵触的时候，多一些耐心和置换角度的理解，去聆听，去感受是什么让你这样暴躁无法容忍。”</p>
<p>以往，我通常都没有感受到那微弱的后一种力量，而是在前一股力量的怂恿下，急急起身，匆匆离去，还偶尔伴随摇头和叹息。而这一次，我感到后一股力量明显强大起来，镇压住了内心的狂躁不安，让我平静地听取逆耳之言、相左之见。</p>
<p>我觉得，这是我今晚听这个讲座最大的收获，这是我的一次成长。我清楚地意识到，我不可能同意他人所有的观点，我要学会在抗拒别人观点的时候，去包容，在听到符合自己心意的观点时，辩证再思考。我要学着听取众家之言，博采众长。</p>
<p>如果我没有听今晚的讲座，没有这样的思维碰撞、观点对冲和自我觉察，我可能会把时间用来看书或者做其他事情，那么我就不大可能会有这样的感悟和收获，虽然我可能会因此得到其他的收获。机会成本这个东西，不提也罢，生活是单程旅行，总在计较得失，怕是忽视了许多沿途的风景。“The journey is reward.” 我喜欢这句话，实实在在，活在当下。</p>
<p>末了，不得不提到，今晚的主持人是很有才的，他说的几句话和提出的几个问题倒是让我颇感意味深长，值得思索：</p>
<blockquote>
<ul>
<li><p>人什么时候感到孤独？从传播学角度看，当一个人想传播却没有传播对象的时候，往往感到孤独。</p>
</li>
<li><p>人不是害怕死亡，是害怕死亡感<em>（黄教授的死亡观）</em>；正如女生不是希望安全，而是要安全感。</p>
</li>
<li><p>你开着一列火车，此时必定要发生侧翻，前方左侧有三个人，右侧有五个人，你觉得该往哪边翻？为了保住五个人的性命，压死左侧的三个人吗？如果左边的三个人是院士，右边的五个人是农民，你该往哪边翻？左边的三个人是能解决人类生活中的世界性问题的科学家，右边五个是妇女儿童，该往哪边翻？左边三个是身家过亿的商界大亨，右边五个是普普通通的人，该往哪边翻？</p>
</li>
</ul>
</blockquote>
<p>最后这个问题，让我想起曾经看过的哈佛大学公开课《公正，该如何是好？》，里面的第一节课也有谈及类似问题，值得思索考究。上面的中间一句话，嗯，我觉得是时候看看那本摆在桌上落满灰尘的《耶鲁大学公开课：死亡》了！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今晚刚刚听完讲座《跨界·对话——人性迷思》，是新闻传播学院的黄合水教授主讲。</p>
<p>黄教授的本科、硕士和博士都是学习心理学专业，他讲座中的许多观点是不错的。譬如他谈到人要活着、不死，就要满足三点：维衡，避害，度闲。这关联到人的三个需求：生理，安全，感动。这又对应地关联到第一、第二、第三产业。</p>
<p>此话怎讲？具体来说，人要活着，首先要维持自身的平衡，吃喝拉撒睡，还有性，这些是最基本的生理需求，要满足这个需求，我们就有了农业，要种植粮食来维持生命。其次是避害，人要活着就要有基本的安全保障，保证自己不被老虎吃掉，不被洪水冲走等等，那么就有了制造业，我们生产工具，来对抗动物，来抵抗洪水。最后，当生理需求和安全需求都满足的情况下，人每天除了睡觉吃饭之外，还有很多的空闲时间，要怎么度过这些空闲时间便成了一个问题，于是有了服务业，我们可以从事商业活动，可以运输东西，可以玩手机，可以跳广场舞等等，我们可以做各种各样的事情来打发空闲的时间，我们可以运用各种感官来感受世界，接收信息，观察事物，来获得感动，得到对世界的认知和体悟。</p>]]>
    
    </summary>
    
      <category term="反思" scheme="http://yoursite.com/tags/%E5%8F%8D%E6%80%9D/"/>
    
      <category term="个人随笔" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[倚窗晨读]]></title>
    <link href="http://yoursite.com/2015/04/22/%E5%80%9A%E7%AA%97%E6%99%A8%E8%AF%BB/"/>
    <id>http://yoursite.com/2015/04/22/倚窗晨读/</id>
    <published>2015-04-22T03:13:02.000Z</published>
    <updated>2015-04-22T04:20:42.000Z</updated>
    <content type="html"><![CDATA[<p>今早八点多来到本部图书馆，看到图书馆门口有张大海报，具体内容不记得了，上面“世界读书日”几个醒目的大字让我印象深刻。</p>
<p>打开电脑查了一下，“世界读书日”全称“世界图书与版权日”，又称“世界图书日”，最初的创意来自于国际出版商协会。1995年正式确定每年4月23日为“世界图书与版权日”，设立目的是推动更多的人去阅读和写作。希望散居在世界各地的人，无论是年老还是年轻，无论是贫穷还是富裕，无论是患病还是健康，都能享受阅读的乐趣，都能尊重和感谢为人类文明做出过巨大贡献的文学、文化、科学、思想大师们，都能保护知识的产权。每年的这一天，世界100多个国家都会举办各种各样的庆祝和图书宣传活动。</p>
<a id="more"></a>
<p>虽然明天才是世界读书日，不过学校里关于读书日的活动和宣传已颇为丰富多彩，气氛俨然氤氲在校园的每棵静谧的大树下。</p>
<p>来到图书馆，恰巧靠窗的过道有位子，于是我和女友便坐下来自习。早晨的天气很好，窗外绿树成荫，阵阵微风夹杂着青草的芳香拂面而来，不带一点浮躁的气息。</p>
<p>在这样安静舒适的氛围之下，最惬意的事就是打上一壶热开水放在手边，静下心来阅读了。</p>
<p>每一本书都值得阅读，对于经典的书籍，要慢读，研读，精读，细品，反复读，多思考，并用心做好笔记。对于科普励志类的书可以快读，泛读，略读，有选择地读，择善而从，并能从中悟出一二。</p>
<p>读了一会儿书，我闭上眼睛，用心聆听周围的声音。鸟叫声，湖面的喷泉声，笔在纸上写字的声音，窗外人的脚步声和交谈声，水杯放在桌面的声音，手指敲击键盘的声音，课桌被触碰的声音，座椅挪动的声音，同学轻轻的咳嗽声，翻书声，自行车声，欢笑声，喝水时水流过喉咙的声音，建南大会堂阁楼上古老的钟声，开门声，汽车轮胎轧过地面的声音，还有我的心跳声……这一切的声音，仿佛被大自然无形的手指挥着，奏出充满生命力的华彩乐章，在耳畔绵延不绝地萦绕，盘旋。</p>
<p>看书看累了，我便看看窗外，看看文庆庭下乘凉的游客，看看被喷泉激荡的湖面，看看绿意融融的青草地，看看风中摇摆的大树，看看充满历史印记的老建筑，看看石雕旁飞舞的蝴蝶，看看草地中的石板路，还有在阳光下休息的路灯……这大自然的画卷就在眼前舒展，缓慢的，遥远的，多美。</p>
<p>我不禁从心底里生出感叹：能在这样的校园里心无旁骛地安静阅读，是多么幸福和值得珍惜的事情。</p>
<p>在春风和煦的日子里，我肆意遨游书海，沉浸于阅读之中，但愿长醉不复醒！</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/7ec44a6d409ace17a8f7b375ffee4e06.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今早八点多来到本部图书馆，看到图书馆门口有张大海报，具体内容不记得了，上面“世界读书日”几个醒目的大字让我印象深刻。</p>
<p>打开电脑查了一下，“世界读书日”全称“世界图书与版权日”，又称“世界图书日”，最初的创意来自于国际出版商协会。1995年正式确定每年4月23日为“世界图书与版权日”，设立目的是推动更多的人去阅读和写作。希望散居在世界各地的人，无论是年老还是年轻，无论是贫穷还是富裕，无论是患病还是健康，都能享受阅读的乐趣，都能尊重和感谢为人类文明做出过巨大贡献的文学、文化、科学、思想大师们，都能保护知识的产权。每年的这一天，世界100多个国家都会举办各种各样的庆祝和图书宣传活动。</p>]]>
    
    </summary>
    
      <category term="阅读" scheme="http://yoursite.com/tags/%E9%98%85%E8%AF%BB/"/>
    
      <category term="个人随笔" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[和家人一起过个周末]]></title>
    <link href="http://yoursite.com/2015/04/21/%E5%92%8C%E5%AE%B6%E4%BA%BA%E4%B8%80%E8%B5%B7%E8%BF%87%E4%B8%AA%E5%91%A8%E6%9C%AB/"/>
    <id>http://yoursite.com/2015/04/21/和家人一起过个周末/</id>
    <published>2015-04-21T01:31:05.000Z</published>
    <updated>2015-04-21T02:44:35.000Z</updated>
    <content type="html"><![CDATA[<p>这周末，姐姐拍婚纱照了。</p>
<p>印象里的姐姐还是很小的时候的样子，转眼间，就在海边拍婚纱照了，真的好快，转眼之间。</p>
<p>爸妈这周末也来了，像往常一样，坐动车来。我们一起过了周末，像以前过过的无数个周末那样，简单平淡，又充满温馨。</p>
<p>小时候觉得时间很长，很久，周末过得肆无忌惮，总觉得生活会这样一直下去，没有尽头。现在才发现，一家人一起过一个周末是多么难得。</p>
<a id="more"></a>
<p>福鼎和厦门并没有隔得很远，却也是动车需要三个多小时车程才能跨越的距离。爸妈每次来，多是周五下午或者傍晚时候抵厦，周六完整呆上一天，然后周日下午又匆匆返回。很偶然的，买不上周日的票，只好买周一上午的票返回福鼎。</p>
<p>这次爸妈就是周一上午返回，爸爸因为能迟一点回去，多跟我和姐姐呆一个晚上而高兴了许久。看着爸爸激动和开心的样子，我的心里不禁酸了一下。</p>
<p>是从什么时候开始，一家人呆在一起都已经变成了如此遥遥无期的事情，成为了奢侈的幸福？</p>
<p>是从什么时候开始，我习惯在送别家人和挚友的时候，会站在原地向他们挥手，一直目送，直到他们消失在直路的转角？</p>
<p>是从什么时候开始，常把“不忙”挂在嘴边的我，却总是没有下定决心买一张回家的动车票，回到家去看看，去看看爸妈，看看冰箱里还有没有新鲜的水果蔬菜，看看餐桌的菜罩下是不是摆着妈妈电话里常说的“美味佳肴”而不是永远吃不完的隔天的饭菜，看看鱼缸里的鱼儿有没有欢快地游动，看看家门口的那几盆树是否已添了新绿？</p>
<p>成长，也许就意味着分离，虽然我不愿意承认，可它却是事实。一年又一年，一年中能和父母家人呆上多久呢。</p>
<p>时不时就会回忆，会想起童年的往事。打到“往事”这两个字时，我停顿了一下，的确是往事了，回不去的往事。</p>
<p>生活的列车匆匆向前，从哪里驶来，又要开向何方？我不知道，它只是一刻不停地在向前开去，开进历史的长河里，开过时间的光影中，开向无尽的未知去。</p>
<p>这周末，我和我的家人呆在一起。</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/d5498d832859970be15d5666757aa539.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这周末，姐姐拍婚纱照了。</p>
<p>印象里的姐姐还是很小的时候的样子，转眼间，就在海边拍婚纱照了，真的好快，转眼之间。</p>
<p>爸妈这周末也来了，像往常一样，坐动车来。我们一起过了周末，像以前过过的无数个周末那样，简单平淡，又充满温馨。</p>
<p>小时候觉得时间很长，很久，周末过得肆无忌惮，总觉得生活会这样一直下去，没有尽头。现在才发现，一家人一起过一个周末是多么难得。</p>]]>
    
    </summary>
    
      <category term="幸福" scheme="http://yoursite.com/tags/%E5%B9%B8%E7%A6%8F/"/>
    
      <category term="时间" scheme="http://yoursite.com/tags/%E6%97%B6%E9%97%B4/"/>
    
      <category term="个人随笔" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>