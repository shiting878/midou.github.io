<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[小默的博客]]></title>
  <subtitle><![CDATA[用自由自在的态度，过随遇而安的生活。]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-05-25T14:48:56.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[xmuxiaomo]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[设计模式学习（七）——外观模式]]></title>
    <link href="http://yoursite.com/2015/05/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A07%E2%80%94%E2%80%94%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/05/25/设计模式学习7——外观模式/</id>
    <published>2015-05-25T10:07:31.000Z</published>
    <updated>2015-05-25T14:48:56.000Z</updated>
    <content type="html"><![CDATA[<h1 id="外观模式定义">外观模式定义</h1><p><strong>外观模式（Facade Pattern）</strong>提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用。</p>
<p>外观模式允许我们让客户和子系统之间避免紧耦合，它遵守<strong>“最少知识”原则</strong>。这个原则希望我们在设计中，不要让太多的类耦合在一起，免得修改系统中一部分，会影响到其他部分。如果许多类之间相互依赖，那么这个系统就会变成一个易碎的系统，它需要花许多成本维护，也会因为太复杂而不容易被其他人了解。</p>
<p>外观模式对客户屏蔽子系统组件，减少了客户处理的对象数目，使得子系统使用起来更加容易。</p>
<a id="more"></a>
<hr>
<h1 id="外观模式结构图">外观模式结构图</h1><p><img src="http://qiniupicbed.qiniudn.com/upload/477ecc9f62bddfee706f34d8f1cc156a.png" alt=""></p>
<p>图中：</p>
<ul>
<li><p>Facade表示外观角色，客户端可以调用这个方法，此角色知道相关的（一个或多个）子系统的功能和责任，在正常情况下，将所有从客户端发来的请求委派到相应的子系统去，传递给相应的子系统对象处理；</p>
</li>
<li><p>Subsystem表示子系统角色，一个系统可以同时有一个或多个子系统，每一个子系统都不是一个单独的类，而是一个类的集合，它实现子系统的功能，每一个子系统都可以被客户端直接调用，或者被外观角色调用，它处理由外观类传过来的任务，子系统并不知道外观的存在，对于子系统而言，外观仅仅是另外一个客户端而已。</p>
</li>
</ul>
<hr>
<h1 id="外观模式实例——文件加密">外观模式实例——文件加密</h1><h2 id="实例说明">实例说明</h2><p>某系统需要提供一个文件加密模块，加密流程包括三个操作，分别是读取源文件、加密、保存加密之后的文件。读取文件和保存文件使用流来实现，这三个操作相对独立，其业务代码封装在三个不同的类中。现在需要提供一个统一的加密外观类，用户可以直接使用该加密外观类完成文件的读取、加密和保存三个操作，而不需要与每一个类进行交互，使用外观模式设计该加密模块，要求编程模拟实现。</p>
<h2 id="实例类图">实例类图</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/81555404163c6cba1afb86018dfe4971.png" alt=""></p>
<p>实例类图中与外观模式结构图对应的类主要有：</p>
<ul>
<li><p>EncryptFacade充当外观类；</p>
</li>
<li><p>FileReader、CipherMachine和FileWriter充当子系统类。</p>
</li>
</ul>
<h2 id="实例代码">实例代码</h2><p>EncryptFacade.java:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加密外观类：外观类</span></span><br><span class="line"><span class="keyword">class</span> EncryptFacade</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> FileReader reader;</span><br><span class="line">	<span class="keyword">private</span> CipherMachine cipher;</span><br><span class="line">	<span class="keyword">private</span> FileWriter writer;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> EncryptFacade()</span><br><span class="line">	&#123;</span><br><span class="line">		reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">		cipher = <span class="keyword">new</span> CipherMachine();</span><br><span class="line">		writer = <span class="keyword">new</span> FileWriter();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">void</span> fileEncrypt(<span class="built_in">String</span> fileNameSrc, <span class="built_in">String</span> fileNameDes)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">String</span> plainStr = reader.read(fileNameSrc);</span><br><span class="line">		<span class="built_in">String</span> encryptStr = cipher.encrypt(plainStr);</span><br><span class="line">		writer.write(encryptStr,fileNameDes);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>FileReader.java:</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件读取类：子系统类</span></span><br><span class="line"><span class="keyword">class</span> FileReader</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> String <span class="keyword">read</span>(String fileNameSrc)</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.<span class="keyword">println</span>(<span class="string">"读取文件，获取明文。"</span>);</span><br><span class="line">		StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			FileInputStream inFS=<span class="keyword">new</span> FileInputStream(fileNameSrc);		</span><br><span class="line">			<span class="keyword">int</span> data;</span><br><span class="line">    		<span class="keyword">while</span>((data=inFS.<span class="keyword">read</span>())!=-<span class="number">1</span>)</span><br><span class="line">    		&#123;</span><br><span class="line">    			sb = sb.<span class="keyword">append</span>((<span class="keyword">char</span>)data);</span><br><span class="line">    		&#125;</span><br><span class="line">     		inFS.close();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(FileNotFoundException e)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.<span class="keyword">println</span>(<span class="string">"文件不存在！"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(IOException e)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.<span class="keyword">println</span>(<span class="string">"文件操作错误！"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> sb.toString();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CipherMachine.java:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数据加密类：子系统类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CipherMachine</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	public <span class="built_in">String</span> encrypt(<span class="built_in">String</span> plainText)</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.println(<span class="string">"数据加密，将明文转换为密文。"</span>);</span><br><span class="line">		<span class="built_in">String</span> es=<span class="string">""</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;plainText.length();i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">String</span> c=<span class="built_in">String</span>.valueOf(plainText.charAt(i)%<span class="number">7</span>);</span><br><span class="line">			es+=c;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> es;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>FileWriter.java:</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件保存类：子系统类</span></span><br><span class="line"><span class="keyword">class</span> FileWriter</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">write</span>(String encryptStr,String fileNameDes)</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.<span class="keyword">println</span>(<span class="string">"保存密文，写入文件。"</span>);</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">     		FileOutputStream outFS = <span class="keyword">new</span> FileOutputStream(fileNameDes);</span><br><span class="line">      		outFS.<span class="keyword">write</span>(encryptStr.getBytes());</span><br><span class="line">      		outFS.close();</span><br><span class="line">		&#125;	</span><br><span class="line">		<span class="keyword">catch</span>(FileNotFoundException e)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.<span class="keyword">println</span>(<span class="string">"文件不存在！"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span>(IOException e)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.<span class="keyword">println</span>(<span class="string">"文件操作错误！"</span>);</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Client.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端测试类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		EncryptFacade ef = <span class="keyword">new</span> EncryptFacade();</span><br><span class="line">		ef.fileEncrypt(<span class="string">"src/src.txt"</span>,<span class="string">"src/des.txt"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果">运行结果</h2><p>Console输出：<br><img src="http://qiniupicbed.qiniudn.com/upload/15b9318ec3baedd094fb09409fba19ba.png" alt=""></p>
<p>src.txt和des.txt文件中的内容为：<br><img src="http://qiniupicbed.qiniudn.com/upload/4e26aa425ca0f4238b3c18a0dd62ab73.png" alt=""></p>
<h2 id="附加描述">附加描述</h2><p>在本实例中，对src文件夹下的文件src.txt中的数据进行加密，该文件的内容为“Hello world!”，加密之后将密文保存到src文件夹下的另一个文件des.txt中，程序运行后保存在文件中的密文为“233364062325”。在加密类CipherMachine中，采用求模运算对明文进行加密，将明文中的每一个字符除以一个整数（本例中为7，可以由用户自行设置）后取余数作为密文。</p>
<hr>
<h1 id="后话">后话</h1><p>Facade模式的思想简单，但是用处甚广。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="外观模式定义">外观模式定义</h1><p><strong>外观模式（Facade Pattern）</strong>提供了一个统一的接口，用来访问子系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用。</p>
<p>外观模式允许我们让客户和子系统之间避免紧耦合，它遵守<strong>“最少知识”原则</strong>。这个原则希望我们在设计中，不要让太多的类耦合在一起，免得修改系统中一部分，会影响到其他部分。如果许多类之间相互依赖，那么这个系统就会变成一个易碎的系统，它需要花许多成本维护，也会因为太复杂而不容易被其他人了解。</p>
<p>外观模式对客户屏蔽子系统组件，减少了客户处理的对象数目，使得子系统使用起来更加容易。</p>]]>
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式学习（六）——组合模式]]></title>
    <link href="http://yoursite.com/2015/05/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A06%E2%80%94%E2%80%94%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/05/25/设计模式学习6——组合模式/</id>
    <published>2015-05-25T09:07:22.000Z</published>
    <updated>2015-05-25T09:48:09.000Z</updated>
    <content type="html"><![CDATA[<h1 id="组合模式定义">组合模式定义</h1><p><strong>组合模式（Composite Pattern）</strong>通过组合多个对象形成树型结构，以表示“整体-部分”的结构层次。组合模型对单个对象（即叶子对象）和组合对象（即容器对象）的使用具有一致性。换句话说，在大多数情况下，我们可以忽略对象组合和个别对象之间的差别。</p>
<p>组合结构内的任意对象称为<strong>组件</strong>，组件可以是组合，也可以是叶子节点。</p>
<a id="more"></a>
<p>在使用组合模式时，通常要在透明性和安全性之间折衷。</p>
<hr>
<h1 id="组合模式结构图">组合模式结构图</h1><p><img src="http://qiniupicbed.qiniudn.com/upload/32fa9192443db3a5d567d9618ba1152c.png" alt=""></p>
<p>图中：</p>
<ul>
<li><p>Component表示抽象构件，它可以是接口或抽象类，为叶子构件和容器构件对象声明接口，在该角色中可以包含所有子类共有行为的声明和实现，在抽象构件中还定义了访问及管理子构件的方法，如增加子构件、删除子构件、获取子构件等；</p>
</li>
<li><p>Leaf表示叶子构件，在组合中表示叶子节点对象，它没有子节点，它实现抽象构件接口声明的基本行为；</p>
</li>
<li><p>Composite表示容器构件，它定义包含子节点（可以是叶子节点或容器节点）的构件的行为，并存储子节点（叶子节点或容器节点），它实现抽象构件接口中定义的操作叶子构件的行为；</p>
</li>
<li><p>Client表示客户类，它通过Component接口控制组合构件中的对象。</p>
</li>
</ul>
<hr>
<h1 id="组合模式实例——杀毒软件">组合模式实例——杀毒软件</h1><h2 id="实例说明">实例说明</h2><p>使用组合模式设计一个杀毒软件（AntiVirus）的框架，该软件既可以对某个文件夹（Folder）杀毒，也可以对某个指定的文件（File）进行杀毒，文件种类包括文本文件TextFile、图片文件ImageFile、视频文件VideoFile。绘制类图并编程模拟实现。</p>
<h2 id="实例类图">实例类图</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/deb92145c3fb0fc430aa2fd2da93fdb2.png" alt=""></p>
<p>实例类图中与组合模式结构图对应的类主要有：</p>
<ul>
<li><p>AbstractFile充当抽象构件类；</p>
</li>
<li><p>TextFile、ImageFile和VideoFile充当叶子构件类；</p>
</li>
<li><p>Folder充当容器构件类。</p>
</li>
</ul>
<h2 id="实例代码">实例代码</h2><p>AbstractFile.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象文件类：抽象构件</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AbstractFile</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(AbstractFile element)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(AbstractFile element)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>TextFile.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文本文件类：叶子构件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">TextFile</span> <span class="title">extends</span> <span class="title">AbstractFile</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> String fileName;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TextFile</span><span class="params">(String fileName)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.fileName=fileName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(AbstractFile element)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">	   System.<span class="keyword">out</span>.println(<span class="string">"对不起，不支持该方法！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(AbstractFile element)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"对不起，不支持该方法！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"浏览文本文件："</span> + fileName);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ImageFile.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图片文件类：叶子构件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">ImageFile</span> <span class="title">extends</span> <span class="title">AbstractFile</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> String fileName;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ImageFile</span><span class="params">(String fileName)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.fileName=fileName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(AbstractFile element)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">	   System.<span class="keyword">out</span>.println(<span class="string">"对不起，不支持该方法！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(AbstractFile element)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"对不起，不支持该方法！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"浏览图片文件："</span> + fileName);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>VideoFile.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//视频文件类：叶子构件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">VideoFile</span> <span class="title">extends</span> <span class="title">AbstractFile</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> String fileName;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">VideoFile</span><span class="params">(String fileName)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.fileName=fileName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(AbstractFile element)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">	   System.<span class="keyword">out</span>.println(<span class="string">"对不起，不支持该方法！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(AbstractFile element)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"对不起，不支持该方法！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"浏览视频文件："</span> + fileName);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Folder.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件夹类：容器构件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Folder</span> <span class="keyword">extends</span> <span class="title">AbstractFile</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> ArrayList fileList=<span class="keyword">new</span> ArrayList();</span><br><span class="line">	<span class="keyword">private</span> String fileName;	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Folder</span><span class="params">(String fileName)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.fileName=fileName;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(AbstractFile element)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">	   fileList.add(element);	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(AbstractFile element)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		fileList.remove(element);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"文件夹 - "</span> + fileName + <span class="string">" - 包含如下资料："</span>);</span><br><span class="line">		<span class="keyword">for</span>(Object obj : fileList)</span><br><span class="line">		&#123;</span><br><span class="line">			((AbstractFile)obj).display();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Client.java:</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端测试类</span></span><br><span class="line">class Client</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span> args[])</span><br><span class="line">	&#123;</span><br><span class="line">		AbstractFile file1,file2,file3,file4,file5,folder1,folder2,folder3;</span><br><span class="line">		file1 = <span class="keyword">new</span> ImageFile(<span class="string">"房子.gif"</span>);</span><br><span class="line">		file2 = <span class="keyword">new</span> ImageFile(<span class="string">"美女.jpg"</span>);</span><br><span class="line">		file3 = <span class="keyword">new</span> TextFile(<span class="string">"设计模式.txt"</span>);</span><br><span class="line">		file4 = <span class="keyword">new</span> TextFile(<span class="string">"Java程序设计.doc"</span>);</span><br><span class="line">		file5 = <span class="keyword">new</span> VideoFile(<span class="string">"非诚勿扰.rmvb"</span>);</span><br><span class="line">		folder1 = <span class="keyword">new</span> Folder(<span class="string">"最新图片"</span>);</span><br><span class="line">		folder1.<span class="built_in">add</span>(file1);</span><br><span class="line">		folder1.<span class="built_in">add</span>(file2);</span><br><span class="line">		folder2 = <span class="keyword">new</span> Folder(<span class="string">"学习资料"</span>);</span><br><span class="line">		folder2.<span class="built_in">add</span>(file3);</span><br><span class="line">		folder2.<span class="built_in">add</span>(file4);</span><br><span class="line">		folder3 = <span class="keyword">new</span> Folder(<span class="string">"个人资料"</span>);</span><br><span class="line">		folder3.<span class="built_in">add</span>(file5);</span><br><span class="line">		folder3.<span class="built_in">add</span>(folder1);</span><br><span class="line">		folder3.<span class="built_in">add</span>(folder2);	</span><br><span class="line">		folder3.display();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果">运行结果</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/ef37e617d7acee6a772468862802500c.png" alt=""></p>
<h2 id="附加描述">附加描述</h2><p>本实例使用了透明组合模式，在抽象构件类中定义了所有方法，包括用于管理子构件的方法，如add()方法和remove()方法，因此在TextFile等叶子构件类中实现这些方法时必须进行相应的异常处理或错误提示。在容器构件Folder的display()方法中递归调用其成员对象的display()方法，从而实现对整个树型结构的遍历。</p>
<hr>
<h1 id="后话">后话</h1><p>组合模式的思想就是利用树型结构来管理构件，和我们熟悉的文件夹下面有文件夹或文件的存储方式一致，理解起来也不困难。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="组合模式定义">组合模式定义</h1><p><strong>组合模式（Composite Pattern）</strong>通过组合多个对象形成树型结构，以表示“整体-部分”的结构层次。组合模型对单个对象（即叶子对象）和组合对象（即容器对象）的使用具有一致性。换句话说，在大多数情况下，我们可以忽略对象组合和个别对象之间的差别。</p>
<p>组合结构内的任意对象称为<strong>组件</strong>，组件可以是组合，也可以是叶子节点。</p>]]>
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式学习（五）——备忘录模式]]></title>
    <link href="http://yoursite.com/2015/05/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A05%E2%80%94%E2%80%94%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/05/25/设计模式学习5——备忘录模式/</id>
    <published>2015-05-25T08:07:05.000Z</published>
    <updated>2015-05-25T09:04:31.000Z</updated>
    <content type="html"><![CDATA[<h1 id="备忘录模式定义">备忘录模式定义</h1><p><strong>备忘录模式（Memento Pattern）</strong>确保在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。</p>
<p>备忘录模式有两个目标：</p>
<ul>
<li><p>储存系统关键对象的重要状态；</p>
</li>
<li><p>维护关键对象的封装。</p>
</li>
</ul>
<a id="more"></a>
<p>单一职责原则告诉我们，设计时不要把保持状态的工作和关键对象混在一起。这个专门掌握状态的对象，就称为备忘录。</p>
<p>备忘录模式提供了一种状态恢复的实现机制，使得用户可以方便地回到一个特定的历史步骤，当新的状态无效或者存在问题时，可以使用存储起来的备忘录将状态复原，当前很多软件都提供了Undo（撤销）操作功能，就使用了备忘录模式。</p>
<hr>
<h1 id="备忘录模式结构图">备忘录模式结构图</h1><p><img src="http://qiniupicbed.qiniudn.com/upload/d49f44f1e7b65f79511d397a2da301d9.png" alt=""></p>
<p>图中：</p>
<ul>
<li><p>Originator表示原发器，它创建备忘录并存储其当前内部状态，还可使用备忘录来恢复内部状态；</p>
</li>
<li><p>Memento表示备忘录，它存储原发器的内部状态，并根据原发器来决定保存哪些内部状态，同时它还通过一些机制来防止原发器以外的其他对象访问备忘录，理想情况是只允许原发器访问本备忘录的内部状态；</p>
</li>
<li><p>Caretaker表示负责人，它负责保存好备忘录，但不能对备忘录的内容进行操作或检查。</p>
</li>
</ul>
<hr>
<h1 id="备忘录模式实例——游戏恢复点设置">备忘录模式实例——游戏恢复点设置</h1><h2 id="实例说明">实例说明</h2><p>某模拟战争游戏为了给玩家提供更好的用户体验，在游戏过程中可以设置一个恢复点，记录当前游戏场景，如果在后续游戏中玩家角色“不幸牺牲”，可以返回到先前场景，从所设恢复点开始重新游戏。现使用备忘录模式设计该功能，绘制类图并编程实现。</p>
<h2 id="实例类图">实例类图</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/a02a058eddc8416f6d1519674990ebd7.png" alt=""></p>
<p>实例类图中与备忘录模式结构图对应的类主要有：</p>
<ul>
<li><p>GameScene充当原发器角色，它是待保存历史状态的类；</p>
</li>
<li><p>SceneMemento充当备忘录角色，它存储了GameScene的历史状态；</p>
</li>
<li><p>Caretaker充当负责人角色，它用于管理备忘录。</p>
</li>
</ul>
<h2 id="实例代码">实例代码</h2><p>GameScene.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">package memo;</span><br><span class="line"></span><br><span class="line"><span class="comment">//游戏场景类：原发器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GameScene</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> String scene;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> lifeValue;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScene</span><span class="params">(String scene)</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.scene = scene; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLifeValue</span><span class="params">(<span class="keyword">int</span> lifeValue)</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.lifeValue = lifeValue; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getScene</span><span class="params">()</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>.scene); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLifeValue</span><span class="params">()</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>.lifeValue); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restore</span><span class="params">(SceneMemento m)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.scene = m.getScene();</span><br><span class="line">		<span class="keyword">this</span>.lifeValue = m.getLifeValue();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> SceneMemento <span class="title">save</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> SceneMemento(<span class="keyword">this</span>.scene,<span class="keyword">this</span>.lifeValue);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.print(<span class="string">"当前游戏场景为："</span> + <span class="keyword">this</span>.scene + <span class="string">"，"</span>);</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"您还有"</span> + <span class="keyword">this</span>.lifeValue + <span class="string">"条命！"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SceneMemento.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> memo;</span><br><span class="line"></span><br><span class="line"><span class="comment">//场景备忘录：备忘录</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SceneMemento</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String scene;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> lifeValue;</span><br><span class="line">	SceneMemento(String scene,<span class="keyword">int</span> lifeValue)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>.scene = scene;</span><br><span class="line">		<span class="keyword">this</span>.lifeValue = lifeValue;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setScene</span><span class="params">(String scene)</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.scene = scene; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setLifeValue</span><span class="params">(<span class="keyword">int</span> lifeValue)</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.lifeValue = lifeValue; </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">String <span class="title">getScene</span><span class="params">()</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>.scene); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getLifeValue</span><span class="params">()</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>.lifeValue); </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Caretaker.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> user;</span><br><span class="line"><span class="keyword">import</span> memo.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//负责人</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> SceneMemento memento;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> SceneMemento <span class="title">getSceneMemento</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.memento;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSceneMemento</span><span class="params">(SceneMemento memento)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.memento = memento;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Client.java:</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">package user;</span><br><span class="line">import memo.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端测试类</span></span><br><span class="line"><span class="keyword">class</span> Client</span><br><span class="line">&#123;</span><br><span class="line">	public static void main(String <span class="keyword">args</span>[])</span><br><span class="line">	&#123;</span><br><span class="line">		GameScene scene = new GameScene();</span><br><span class="line">		Caretaker <span class="keyword">ct</span> = new Caretaker();</span><br><span class="line">		scene.setScene(<span class="string">"无名湖"</span>);</span><br><span class="line">		scene.setLifeValue(3);</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"原始状态："</span>);</span><br><span class="line">		scene.<span class="keyword">display</span>();</span><br><span class="line">		<span class="keyword">ct</span>.setSceneMemento(scene.<span class="keyword">save</span>());</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"--------------------------------"</span>);</span><br><span class="line">		</span><br><span class="line">		scene.setScene(<span class="string">"魔鬼洞"</span>);</span><br><span class="line">		scene.setLifeValue(0);</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"牺牲状态："</span>);</span><br><span class="line">		scene.<span class="keyword">display</span>();</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"--------------------------------"</span>);</span><br><span class="line">		</span><br><span class="line">		scene.<span class="keyword">restore</span>(<span class="keyword">ct</span>.getSceneMemento());</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"恢复到原始状态："</span>);</span><br><span class="line">		scene.<span class="keyword">display</span>();</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"--------------------------------"</span>);		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果">运行结果</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/641404e3e75b04ce6d11bf673bfd9e21.png" alt=""></p>
<h2 id="附加描述">附加描述</h2><p>在本实例中，原发器GameScene在调用save()方法后将产生一个备忘录对象，该备忘录对象将保存在Caretaker中，原发器需要恢复状态时再将其从Caretaker中取出，可以通过调用restore()方法来获取存储在备忘录中的状态信息。</p>
<p>在真实开发中，除了原发器可以创建备忘录并给备忘录赋值外，其他对象不应该直接调用备忘录中的方法，也不能创建备忘录。在Java语言中，通常将Memento类与Originator类定义在同一个package包中来实现封装，可使用默认访问标识符来定义Memento类，使其包内可见，只有Originator类可以对它进行访问，限制其他类对Memento的访问。</p>
<hr>
<h1 id="后话">后话</h1><p>以前老是不知道public、protected、private和包到底有什么用，通过备忘录模式的学习，对此有了一些理解。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="备忘录模式定义">备忘录模式定义</h1><p><strong>备忘录模式（Memento Pattern）</strong>确保在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。</p>
<p>备忘录模式有两个目标：</p>
<ul>
<li><p>储存系统关键对象的重要状态；</p>
</li>
<li><p>维护关键对象的封装。</p>
</li>
</ul>]]>
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式学习（四）——解释器模式]]></title>
    <link href="http://yoursite.com/2015/05/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A04%E2%80%94%E2%80%94%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/05/25/设计模式学习4——解释器模式/</id>
    <published>2015-05-25T06:06:46.000Z</published>
    <updated>2015-05-25T08:01:19.000Z</updated>
    <content type="html"><![CDATA[<h1 id="解释器模式定义">解释器模式定义</h1><p><strong>解释器模式（Interpreter Pattern）</strong>描述了如何为语言定义一个文法，如何在该语言中表示一个句子，以及如何解释这些句子。这里的语言意思是使用规定格式和语法的代码。</p>
<p>简单说来，解释器模式用来为语言创建解释器。</p>
<a id="more"></a>
<p>如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子，这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题，而且当文法简单、效率不是关键问题的时候效果最好。</p>
<p>解释器模式将一个语法规则表示成一个类，便于实现。而且，因为语法由许多类表示，所以我们可以轻易地改变和扩展此语言。</p>
<hr>
<h1 id="解释器模式结构图">解释器模式结构图</h1><p><img src="http://qiniupicbed.qiniudn.com/upload/50604a3a78b166a7b7e375a9aaa6574f.png" alt=""></p>
<p>图中：</p>
<ul>
<li><p>AbstractExpression表示抽象表达式，它声明一个抽象的解释操作，该接口为抽象语法树上所有的节点所共享；</p>
</li>
<li><p>TerminalExpression表示终结符表达式，它实现与文法中的终结符相关联的解释操作，语言中每一个句子的每个终结符都属于该类的一个实例；</p>
</li>
<li><p>NonterminalExpression表示非终结符表达式，它实现了文法中的非终结符的解释操作，在解释过程中一般需要应用递归的方式对句子进行处理；</p>
</li>
<li><p>Context表示上下文（环境），它包含了解释器之外一些其他的全局信息；</p>
</li>
<li><p>Client表示客户端，它用于构建表示该文法定义的语言中的一个特定的句子的抽象语法树，该语法树由终结符表达式（叶子节点）和非终结符表达式（中间节点）组成，并且Client负责调用解释操作。</p>
</li>
</ul>
<hr>
<h1 id="解释器模式实例——机器人控制程序">解释器模式实例——机器人控制程序</h1><h2 id="实例说明">实例说明</h2><p>某机器人控制程序包含一些简单的英文指令，其文法规则如下：</p>
<p>expression : : = direction action distance | composite</p>
<p>composite : : = expression ‘and’ expression</p>
<p>direction : : = ‘up’ | ‘down’ | ‘left’ | ‘right’</p>
<p>action : : = ‘move’ | ‘run’</p>
<p>distance : : = an integer //一个整数值</p>
<p>如输入：up move 5，则输出“向上移动5个单位”；输入：down run 10 and left move 20，则输出“向下快速移动10个单位再向左移动20个单位”。</p>
<p>现使用解释器模式来设计该程序并模拟实现。</p>
<h2 id="实例类图">实例类图</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/bd754e3904335e3f9973218f08f1878e.png" alt=""></p>
<p>实例类图中与解释器模式结构图对应的类主要有：</p>
<ul>
<li><p>AbstractNode充当抽象表达式角色；</p>
</li>
<li><p>DirectionNode、ActionNode和DistanceNode充当终结符表达式角色；</p>
</li>
<li><p>AndNode和SentenceNode充当非终结符表达式角色；</p>
</li>
<li><p><em>InstructionHandler为指令处理类，充当工具类角色。</em></p>
</li>
</ul>
<h2 id="实例代码">实例代码</h2><p>AbstractNode.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象表达式</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AbstractNode</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">interpret</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>DirectionNode.java:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方向解释：终结符表达式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DirectionNode</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AbstractNode</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">String</span> direction;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">DirectionNode</span>(<span class="type">String</span> direction)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>.direction = direction;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">String</span> interpret()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(direction.equalsIgnoreCase(<span class="string">"up"</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"向上"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(direction.equalsIgnoreCase(<span class="string">"down"</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"向下"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(direction.equalsIgnoreCase(<span class="string">"left"</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"向左"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(direction.equalsIgnoreCase(<span class="string">"right"</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"向右"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"无效指令"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ActionNode.java:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//动作解释：终结符表达式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ActionNode</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AbstractNode</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">String</span> action;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">ActionNode</span>(<span class="type">String</span> action)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>.action = action;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">String</span> interpret()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(action.equalsIgnoreCase(<span class="string">"move"</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"移动"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(action.equalsIgnoreCase(<span class="string">"run"</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"快速移动"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"无效指令"</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>DistanceNode.java:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//距离解释：终结符表达式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DistanceNode</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AbstractNode</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">String</span> distance;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">DistanceNode</span>(<span class="type">String</span> distance)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>.distance = distance;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public <span class="type">String</span> interpret()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.distance;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>AndNode.java:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//And解释：非终结符表达式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AndNode</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AbstractNode</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">AbstractNode</span> left;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">AbstractNode</span> right;</span><br><span class="line">	public <span class="type">AndNode</span>(<span class="type">AbstractNode</span> left,<span class="type">AbstractNode</span> right)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>.left = left;</span><br><span class="line">		<span class="keyword">this</span>.right = right;</span><br><span class="line">	&#125;</span><br><span class="line">	public <span class="type">String</span> interpret()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> left.interpret() + <span class="string">"再"</span> + right.interpret();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SentenceNode.java:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//简单句子解释：非终结符表达式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SentenceNode</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AbstractNode</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">AbstractNode</span> direction;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">AbstractNode</span> action;</span><br><span class="line">	<span class="keyword">private</span> <span class="type">AbstractNode</span> distance;</span><br><span class="line">	public <span class="type">SentenceNode</span>(<span class="type">AbstractNode</span> direction,<span class="type">AbstractNode</span> action,<span class="type">AbstractNode</span> distance)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>.direction = direction;</span><br><span class="line">		<span class="keyword">this</span>.action = action;</span><br><span class="line">		<span class="keyword">this</span>.distance = distance;</span><br><span class="line">	&#125;</span><br><span class="line">	public <span class="type">String</span> interpret()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> direction.interpret() + action.interpret() + distance.interpret();</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>InstructionHandler.java:</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指令处理类：工具类</span></span><br><span class="line">class InstructionHandler</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> AbstractNode node;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> handle(<span class="keyword">String</span> instruction)</span><br><span class="line">    &#123;</span><br><span class="line">    	AbstractNode left=<span class="keyword">null</span>,right=<span class="keyword">null</span>;</span><br><span class="line">    	AbstractNode direction=<span class="keyword">null</span>,action=<span class="keyword">null</span>,distance=<span class="keyword">null</span>;</span><br><span class="line">    	Stack stack=<span class="keyword">new</span> Stack(); </span><br><span class="line">    	<span class="keyword">String</span>[] words=instruction.<span class="built_in">split</span>(<span class="string">" "</span>); <span class="comment">//以空格分隔字符串</span></span><br><span class="line">    	<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;words.length;i++)</span><br><span class="line">    	&#123;</span><br><span class="line">    		<span class="keyword">if</span>(words[i].equalsIgnoreCase(<span class="string">"and"</span>))</span><br><span class="line">    		&#123;</span><br><span class="line">    			left=(AbstractNode)stack.pop();</span><br><span class="line">    		    <span class="keyword">String</span> word1=words[++i];</span><br><span class="line">    		    direction=<span class="keyword">new</span> DirectionNode(word1);</span><br><span class="line">    		    <span class="keyword">String</span> word2=words[++i];</span><br><span class="line">    		    action=<span class="keyword">new</span> ActionNode(word2);</span><br><span class="line">    		    <span class="keyword">String</span> word3=words[++i];</span><br><span class="line">    		    distance=<span class="keyword">new</span> DistanceNode(word3);</span><br><span class="line">    		    right=<span class="keyword">new</span> SentenceNode(direction,action,distance);</span><br><span class="line">    			stack.push(<span class="keyword">new</span> AndNode(left,right));</span><br><span class="line">    		&#125;</span><br><span class="line">    		<span class="keyword">else</span> </span><br><span class="line">    		&#123;	</span><br><span class="line">    		    <span class="keyword">String</span> word1=words[i];</span><br><span class="line">    		    direction=<span class="keyword">new</span> DirectionNode(word1);</span><br><span class="line">    		    <span class="keyword">String</span> word2=words[++i];</span><br><span class="line">    		    action=<span class="keyword">new</span> ActionNode(word2);</span><br><span class="line">    		    <span class="keyword">String</span> word3=words[++i];</span><br><span class="line">    		    distance=<span class="keyword">new</span> DistanceNode(word3);</span><br><span class="line">    		    left=<span class="keyword">new</span> SentenceNode(direction,action,distance);</span><br><span class="line">    		    stack.push(left);</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">this</span>.node=(AbstractNode)stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">String</span> output()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">String</span> result = node.interpret();</span><br><span class="line">		<span class="keyword">return</span> result;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Client.java:</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端测试类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		String instruction = <span class="string">"up move 5 and down run 10 and left move 5"</span>;</span><br><span class="line">		InstructionHandler <span class="keyword">handler</span> = <span class="keyword">new</span> InstructionHandler();</span><br><span class="line">		<span class="keyword">handler</span>.handle(instruction);</span><br><span class="line">		String outString;</span><br><span class="line">		outString = <span class="keyword">handler</span>.output();</span><br><span class="line">		System.out.println(outString);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果">运行结果</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/f639f1952ffb7491d290b91aab630f53.png" alt=""></p>
<h2 id="附加描述">附加描述</h2><p>在本实例中，我们将一个DirectionNode（方向节点）、一个ActionNode（动作节点）和一个DistanceNode（距离节点）组成一个SentenceNode（句子节点）。句子节点再通过and连接在一起，形成更加复杂的结构。本实例的工具类InstructionHandler用于对输入指令进行处理，将输入指令分割为字符串数组，将第1个、第2个和第3个单词组合成一个句子，并存入栈中；如果发现有单词and，则先将原先栈中所存句子取出来作为and的左表达式，再将and后的第1个、第2个和第3个单词组合成一个句子作为and的右表达式，然后将组合而成的AndNode节点存入栈中。以此类推，直到整个指令解析结束。</p>
<p>我们可以通过抽象语法树来表示解析过程，如指令 down run 10 and left move 20 对应的抽象语法树如下图所示。</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/32b7a151d69084f84d7ebaafb25c3f00.png" alt=""></p>
<hr>
<h1 id="后话">后话</h1><p>通过学习解释器模式，让我对树结构的用法有了进一步的理解。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="解释器模式定义">解释器模式定义</h1><p><strong>解释器模式（Interpreter Pattern）</strong>描述了如何为语言定义一个文法，如何在该语言中表示一个句子，以及如何解释这些句子。这里的语言意思是使用规定格式和语法的代码。</p>
<p>简单说来，解释器模式用来为语言创建解释器。</p>]]>
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式学习（九）——职责链模式]]></title>
    <link href="http://yoursite.com/2015/05/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A09%E2%80%94%E2%80%94%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/05/25/设计模式学习9——职责链模式/</id>
    <published>2015-05-24T16:07:52.000Z</published>
    <updated>2015-05-24T16:11:08.000Z</updated>
    <content type="html"><![CDATA[<h1 id="XX模式定义">XX模式定义</h1><p><strong>XX模式（XX Pattern）</strong></p>
<a id="more"></a>
<hr>
<h1 id="XX模式结构图">XX模式结构图</h1><p><img src="" alt=""></p>
<p>图中：</p>
<ul>
<li><p>Context表示环境类，；</p>
</li>
<li><p>Strategy表示抽象策略类，；</p>
</li>
<li><p>。</p>
</li>
</ul>
<hr>
<h1 id="XX模式实例——XXX">XX模式实例——XXX</h1><h2 id="实例说明">实例说明</h2><h2 id="实例类图">实例类图</h2><p><img src="" alt=""></p>
<p>实例类图中与策略模式结构图对应的类主要有：</p>
<ul>
<li><p>；</p>
</li>
<li><p>；</p>
</li>
<li><p>。</p>
</li>
</ul>
<h2 id="实例代码">实例代码</h2><h2 id="运行结果">运行结果</h2><p><img src="" alt=""></p>
<h2 id="附加描述">附加描述</h2><p>在本实例中，。</p>
<hr>
<h1 id="后话">后话</h1><p>。</p>
<hr>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="XX模式定义">XX模式定义</h1><p><strong>XX模式（XX Pattern）</strong></p>]]>
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式学习（八）——代理模式]]></title>
    <link href="http://yoursite.com/2015/05/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A08%E2%80%94%E2%80%94%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/05/25/设计模式学习8——代理模式/</id>
    <published>2015-05-24T16:07:41.000Z</published>
    <updated>2015-05-24T16:10:49.000Z</updated>
    <content type="html"><![CDATA[<h1 id="XX模式定义">XX模式定义</h1><p><strong>XX模式（XX Pattern）</strong></p>
<a id="more"></a>
<hr>
<h1 id="XX模式结构图">XX模式结构图</h1><p><img src="" alt=""></p>
<p>图中：</p>
<ul>
<li><p>Context表示环境类，；</p>
</li>
<li><p>Strategy表示抽象策略类，；</p>
</li>
<li><p>。</p>
</li>
</ul>
<hr>
<h1 id="XX模式实例——XXX">XX模式实例——XXX</h1><h2 id="实例说明">实例说明</h2><h2 id="实例类图">实例类图</h2><p><img src="" alt=""></p>
<p>实例类图中与策略模式结构图对应的类主要有：</p>
<ul>
<li><p>；</p>
</li>
<li><p>；</p>
</li>
<li><p>。</p>
</li>
</ul>
<h2 id="实例代码">实例代码</h2><h2 id="运行结果">运行结果</h2><p><img src="" alt=""></p>
<h2 id="附加描述">附加描述</h2><p>在本实例中，。</p>
<hr>
<h1 id="后话">后话</h1><p>。</p>
<hr>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="XX模式定义">XX模式定义</h1><p><strong>XX模式（XX Pattern）</strong></p>]]>
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式学习（三）——访问者模式]]></title>
    <link href="http://yoursite.com/2015/05/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A03%E2%80%94%E2%80%94%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/05/25/设计模式学习3——访问者模式/</id>
    <published>2015-05-24T16:00:22.000Z</published>
    <updated>2015-05-25T06:52:38.000Z</updated>
    <content type="html"><![CDATA[<h1 id="访问者模式定义及优缺点">访问者模式定义及优缺点</h1><p><strong>访问者模式（Visitor Pattern）</strong>用于表示一个作用于某对象结构中的各元素的操作，它使得用户可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p>
<p>访问者模式使得对对象的操作变得更为灵活，它将数据结构和作用于结构上的操作之间的耦合解脱开，使得增加一个新的访问者类变得很方便。</p>
<h2 id="访问者模式的优点：">访问者模式的优点：</h2><ul>
<li>允许你对组合结构加入新的操作，而无需改变结构本身；</li>
</ul>
<a id="more"></a>
<ul>
<li><p>想要加入新的操作，相对容易；</p>
</li>
<li><p>访问者所进行的操作，其代码是集中在一起的。</p>
</li>
</ul>
<h2 id="访问者模式的缺点：">访问者模式的缺点：</h2><ul>
<li><p>当采用访问者模式时，会打破组合类的封装；</p>
</li>
<li><p>因为游走的功能牵涉其中，所以对组合结构的改变就更加困难。</p>
</li>
</ul>
<hr>
<h1 id="访问者模式结构图">访问者模式结构图</h1><p><img src="http://qiniupicbed.qiniudn.com/upload/f638e8d18ce4f63197a3d6ca2a4fe90b.png" alt=""></p>
<p>图中：</p>
<ul>
<li><p>Visitor表示抽象访问者，它为对象结构类中每一个ConcreteElement的类声明一个Visit操作，通过这个操作的名称或方法签名（方法的参数和返回类型）可识别传出Visit请求给访问者的类，这就使得访问者可以确定正要被访问的元素的具体类，访问者就可以直接通过该元素的特定接口（Element）访问到它；</p>
</li>
<li><p>ConcreteVisitor表示具体访问者，它实现了每个由抽象访问者声明的操作，每一个操作用于访问对象结构中一种类型的元素；</p>
</li>
<li><p>Element表示抽象元素，在其中声明一个accept()操作，它以一个抽象访问者作为参数；</p>
</li>
<li><p>ConcreteElement表示具体元素，它实现了accept()操作，在accept()中调用访问者的访问方法以便完成对一个元素的操作；</p>
</li>
<li><p>ObjectStructure表示对象结构，它提供一个高层的接口以允许访问者访问它的元素，可以是一个组合模式或是一个集合，如一个列表或一个无序集合，可结合迭代器模式枚举其中的元素。</p>
</li>
</ul>
<hr>
<h1 id="访问者模式实例——奖励审批">访问者模式实例——奖励审批</h1><h2 id="实例说明">实例说明</h2><p>某高校奖励审批系统可以实现教师奖励和学生奖励的审批（AwardCheck），如果教师发表论文数超过10篇或者学生论文超过2篇可以评选科研奖，如果教师教学反馈分大于等于90分或者学生平均成绩大于等于90分可以评选成绩优秀奖，使用访问者模式设计该系统，以判断候选人集合中的教师或学生是否符合某种获奖要求。</p>
<h2 id="实例类图">实例类图</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/cec1958ca8107d0fe61efccd159dd074.png" alt=""></p>
<p>实例类图中与访问者模式结构图对应的类主要有：</p>
<ul>
<li><p>AwardCheck充当抽象访问者角色；</p>
</li>
<li><p>ScientificAwardCheck和ExcellenceAwardCheck充当具体访问者角色；</p>
</li>
<li><p>Person充当抽象元素角色；</p>
</li>
<li><p>Teacher和Student充当具体元素角色；</p>
</li>
<li><p>CandidateList充当对象结构角色。</p>
</li>
</ul>
<h2 id="实例代码">实例代码</h2><p>AwardCheck.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象奖励审批类：抽象访问者类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">AwardCheck</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Teacher teacher)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(Student student)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ScientificAwardCheck.java:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//科研奖审批类：具体访问者类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScientificAwardCheck</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AwardCheck</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	public void visit(<span class="type">Teacher</span> teacher)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(teacher.getPaperAmount()&gt;=<span class="number">10</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">System</span>.out.println(teacher.getName() + <span class="string">"可评选教师科研奖！"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	public void visit(<span class="type">Student</span> student)	</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(student.getPaperAmount()&gt;=<span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">System</span>.out.println(student.getName() + <span class="string">"可评选学生科研奖！"</span>);</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ExcellenceAwardCheck.java:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//成绩优秀奖审批类：具体访问者类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExcellenceAwardCheck</span> <span class="keyword"><span class="keyword">extends</span></span> <span class="title">AwardCheck</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	public void visit(<span class="type">Teacher</span> teacher)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(teacher.getFeedbackScore()&gt;=<span class="number">90</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">System</span>.out.println(teacher.getName() + <span class="string">"可评选教师成绩优秀奖！"</span>);</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line">	public void visit(<span class="type">Student</span> student)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(student.getScore()&gt;=<span class="number">90</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">System</span>.out.println(student.getName() + <span class="string">"可评选学生成绩优秀奖！"</span>);</span><br><span class="line">		&#125;			</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Person.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//申请人类：抽象元素类</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title">Person</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(AwardCheck check)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Teacher.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//教师类：具体元素类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">implements</span> <span class="title">Person</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> paperAmount;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> feedbackScore;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name; </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPaperAmount</span><span class="params">(<span class="keyword">int</span> paperAmount)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.paperAmount = paperAmount; </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFeedbackScore</span><span class="params">(<span class="keyword">double</span> feedbackScore)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.feedbackScore = feedbackScore; </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>.name); </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPaperAmount</span><span class="params">()</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>.paperAmount); </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getFeedbackScore</span><span class="params">()</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>.feedbackScore); </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(AwardCheck check)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		check.visit(<span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Student.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生类：具体元素类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Person</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> paperAmount;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name; </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPaperAmount</span><span class="params">(<span class="keyword">int</span> paperAmount)</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.paperAmount = paperAmount; </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScore</span><span class="params">(<span class="keyword">double</span> score)</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.score = score; </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>.name); </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPaperAmount</span><span class="params">()</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>.paperAmount); </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getScore</span><span class="params">()</span> </span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="keyword">this</span>.score); </span><br><span class="line">	&#125;	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(AwardCheck check)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		check.visit(<span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CandidateList.java:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//候选人集合类：对象结构</span></span><br><span class="line"><span class="keyword">class</span> CandidateList</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> ArrayList&lt;Person&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPerson</span><span class="params">(Person person)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">list</span>.add(person);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removePerson</span><span class="params">(Person person)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="built_in">list</span>.remove(person);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(AwardCheck check)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		Iterator i = <span class="built_in">list</span>.iterator();</span><br><span class="line">		<span class="keyword">while</span>(i.hasNext())</span><br><span class="line">		&#123;</span><br><span class="line">			((Person)i.next()).accept(check);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Client.java:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端测试类</span></span><br><span class="line"><span class="keyword">class</span> Client</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		CandidateList <span class="built_in">list</span> = <span class="keyword">new</span> CandidateList();</span><br><span class="line">		AwardCheck sac,eac;</span><br><span class="line">		Teacher teacher = <span class="keyword">new</span> Teacher();</span><br><span class="line">		Student student = <span class="keyword">new</span> Student();</span><br><span class="line">		teacher.setName(<span class="string">"李雷"</span>);</span><br><span class="line">		teacher.setPaperAmount(<span class="number">15</span>);</span><br><span class="line">		teacher.setFeedbackScore(<span class="number">92</span>);</span><br><span class="line">		student.setName(<span class="string">"韩梅梅"</span>);</span><br><span class="line">		student.setPaperAmount(<span class="number">2</span>);</span><br><span class="line">		student.setScore(<span class="number">85</span>);</span><br><span class="line">		<span class="built_in">list</span>.addPerson(teacher);</span><br><span class="line">		<span class="built_in">list</span>.addPerson(student);</span><br><span class="line">		sac = <span class="keyword">new</span> ScientificAwardCheck();</span><br><span class="line">		<span class="built_in">list</span>.accept(sac);</span><br><span class="line">		System.out.println(<span class="string">"-------------------------"</span>);</span><br><span class="line">		eac = <span class="keyword">new</span> ExcellenceAwardCheck();</span><br><span class="line">		<span class="built_in">list</span>.accept(eac);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果">运行结果</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/a9d3cd7c219811ff0a8bef9d60d060ba.png" alt=""></p>
<h2 id="附加描述">附加描述</h2><p>在本实例中，CandidateList类中定义了一个ArrayList类型的集合对象，用于存储待审核的学生和教师信息，在其accept()方法中通过参数传入一个访问者对象，该访问者对象将遍历审核存储在集合中的学生对象和教师对象，取出存储在元素对象中的论文数量和平均成绩，判断是否符合科研奖和成绩优秀奖的评选条件，再输出相应的判断结果。</p>
<hr>
<h1 id="后话">后话</h1><p>看书学习这个设计模式时，有的话看了一遍两遍，根本就不明白是要表达什么意思，整段整段的专用术语晦涩难懂。可是再坚持看几遍，就会恍然大悟，如梦初醒。这真是验证了那句名言——“书读百遍，其义自现。”</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="访问者模式定义及优缺点">访问者模式定义及优缺点</h1><p><strong>访问者模式（Visitor Pattern）</strong>用于表示一个作用于某对象结构中的各元素的操作，它使得用户可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p>
<p>访问者模式使得对对象的操作变得更为灵活，它将数据结构和作用于结构上的操作之间的耦合解脱开，使得增加一个新的访问者类变得很方便。</p>
<h2 id="访问者模式的优点：">访问者模式的优点：</h2><ul>
<li>允许你对组合结构加入新的操作，而无需改变结构本身；</li>
</ul>]]>
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式学习（二）——策略模式]]></title>
    <link href="http://yoursite.com/2015/05/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A02%E2%80%94%E2%80%94%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/05/24/设计模式学习2——策略模式/</id>
    <published>2015-05-24T14:53:09.000Z</published>
    <updated>2015-05-24T15:52:31.000Z</updated>
    <content type="html"><![CDATA[<h1 id="策略模式定义">策略模式定义</h1><p><strong>策略模式（Strategy Pattern）</strong>中定义一系列算法，并将每一个算法封装起来，使它们可以相互替换，策略模式让算法独立于使用它的客户而变化。</p>
<p>有许多算法可以实现同一功能，比如存在多种搜索算法、排序算法等。如果将这些算法硬编码在程序中，则会导致系统变得庞大而难以维护，在增加新的算法或改变现有算法时也将变得十分困难。为了解决类似问题，可以定义一些独立的类来封装不同的算法，每一个封装算法的类成为<strong>策略</strong>。</p>
<a id="more"></a>
<p>策略模式把算法的责任和算法本身分割开，委派给不同的对象管理。策略模式使用起来很方便，如需要提供一个灵活的网站搜索工具，可以有多种搜索策略，并且还会在以后根据实际情况增加新的搜索方式，就可以使用策略模式，创建一个搜索管理器用于和外部环境代码交互，在外部代码中针对抽象层编程，从而使得新的搜索方式出现时外部代码无需做任何改变，同时使得搜索算法的重用变得更为灵活。</p>
<hr>
<h1 id="策略模式结构图">策略模式结构图</h1><p><img src="http://qiniupicbed.qiniudn.com/upload/02b84892ab605bcac6b4e13379d23514.png" alt=""></p>
<p>图中：</p>
<ul>
<li><p>Context表示环境类，它通过ConcreteStrategy对象配置其执行环境，并维护一个对Strategy的引用实例，可以定义一个接口供Strategy存取其数据；</p>
</li>
<li><p>Strategy表示抽象策略类，它定义一个公共的接口给所有支持的算法，Context可以使用这个接口调用ConcreteStrategy定义的算法；</p>
</li>
<li><p>ConcreteStrategyA和ConcreteStrategyB表示具体策略类，它们实现Strategy接口定义的算法。</p>
</li>
</ul>
<hr>
<h1 id="策略模式实例——电影票打折">策略模式实例——电影票打折</h1><h2 id="实例说明">实例说明</h2><p>某电影院售票系统为不同类型的用户提供了不同的打折方式（Discount），学生凭学生证可享受8折优惠（StudentDiscount），儿童可享受减免10元的优惠（ChildrenDiscount），VIP用户除享受半价优惠外还可以进行积分（VIPDiscount）。使用策略模式设计该系统，结合场景绘制相应的类图并编码实现。</p>
<h2 id="实例类图">实例类图</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/1280a7eb67bf6efcc4fc15899c6f8e0d.png" alt=""></p>
<p>实例类图中与策略模式结构图对应的类主要有：</p>
<ul>
<li><p>MovieTicket为环境类；</p>
</li>
<li><p>Discount为抽象策略类；</p>
</li>
<li><p>StudentDiscount、ChildrenDiscount和VIPDiscount为具体策略类。</p>
</li>
</ul>
<h2 id="实例代码">实例代码</h2><p>MovieTicket.java:</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">//电影票类：环境类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieTicket</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">	<span class="keyword">private</span> Discount discount;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.price = price;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setDiscount</span><span class="params">(Discount discount)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.discount = discount;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">return</span> discount.<span class="title">calculate</span><span class="params">(<span class="keyword">this</span>.price)</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Discount.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//折扣类：抽象策略类</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title">Discount</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">double</span> price)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>StudentDiscount.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生折扣类：具体策略类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentDiscount</span> <span class="keyword">implements</span> <span class="title">Discount</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">double</span> price)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.out.print(<span class="string">"学生--&gt;"</span>);</span><br><span class="line">		<span class="keyword">return</span> price * <span class="number">0.8</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ChildrenDiscount.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//儿童折扣类：具体策略类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildrenDiscount</span> <span class="keyword">implements</span> <span class="title">Discount</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">double</span> price)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.out.print(<span class="string">"儿童--&gt;"</span>);</span><br><span class="line">		<span class="keyword">return</span> price - <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>VIPDiscount.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//VIP用户折扣类：具体策略类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">VIPDiscount</span> <span class="title">implements</span> <span class="title">Discount</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">calculate</span><span class="params">(<span class="keyword">double</span> price)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.print(<span class="string">"VIP用户--&gt;"</span>);</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"增加积分！"</span>);</span><br><span class="line">		<span class="keyword">return</span> price * <span class="number">0.5</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Client.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端测试类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Client</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">double</span> price = <span class="number">50.00</span>;</span><br><span class="line">		MovieTicket mt = <span class="keyword">new</span> MovieTicket();</span><br><span class="line">		mt.setPrice(price);</span><br><span class="line">		<span class="keyword">double</span> currentPrice;</span><br><span class="line">		</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"电影票原价为："</span> + price + <span class="string">"元"</span>);</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"---------------------------------"</span>);</span><br><span class="line">			</span><br><span class="line">		Discount obj;</span><br><span class="line">		obj = <span class="keyword">new</span> StudentDiscount();  <span class="comment">//可通过配置文件实现</span></span><br><span class="line">		mt.setDiscount(obj);</span><br><span class="line">		currentPrice = mt.getPrice();</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"折后票价为："</span> + currentPrice + <span class="string">"元"</span>);</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"---------------------------------"</span>);</span><br><span class="line">		obj = <span class="keyword">new</span> VIPDiscount();</span><br><span class="line">		mt.setDiscount(obj);</span><br><span class="line">		currentPrice = mt.getPrice();</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"折后票价为"</span> + currentPrice + <span class="string">"元"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="运行结果">运行结果</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/bbe5d5d6c72a35b4d6d559e17b420cc4.png" alt=""></p>
<h2 id="附加描述">附加描述</h2><p>在本实例中，可以通过配置文件来存储具体策略类的类名，再使用反射机制生产对象，如果需要更换具体策略或使用新增加的具体策略，无需修改任何源代码（包括客户端代码），只需修改配置文件即可，完全符合开闭原则。</p>
<hr>
<h1 id="后话">后话</h1><p>学习设计模式，是一场修行。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="策略模式定义">策略模式定义</h1><p><strong>策略模式（Strategy Pattern）</strong>中定义一系列算法，并将每一个算法封装起来，使它们可以相互替换，策略模式让算法独立于使用它的客户而变化。</p>
<p>有许多算法可以实现同一功能，比如存在多种搜索算法、排序算法等。如果将这些算法硬编码在程序中，则会导致系统变得庞大而难以维护，在增加新的算法或改变现有算法时也将变得十分困难。为了解决类似问题，可以定义一些独立的类来封装不同的算法，每一个封装算法的类成为<strong>策略</strong>。</p>]]>
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[滑稽的大雨]]></title>
    <link href="http://yoursite.com/2015/05/23/%E6%BB%91%E7%A8%BD%E7%9A%84%E5%A4%A7%E9%9B%A8/"/>
    <id>http://yoursite.com/2015/05/23/滑稽的大雨/</id>
    <published>2015-05-23T07:00:23.000Z</published>
    <updated>2015-05-23T08:18:21.000Z</updated>
    <content type="html"><![CDATA[<p><strong>（一）</strong></p>
<p>记得唐代诗人李约的《观祈雨》是这么写的：“桑条无叶土生烟，箫管迎龙水庙前。朱门几处看歌舞，犹恐春阴咽管弦。”这是一首悯农诗，写观看春日祈雨的感慨，前两句写农民春旱祈雨的场面，后两句写朱门看歌舞的情景。同样是面对久旱无雨，两种不同生活的描绘，足见当时的阶级对立和贫富悬殊。农民们由于天旱而忧虑一年生计，豪门权贵却日夜笙歌，犹恐天阴下雨使乐器受潮。</p>
<p>有时候很佩服古人，三言两语就能把眼前所见之景和想要表达的意思抒发出来，言简意赅，意犹未尽。我喜欢这样简短的表达，留有空白，引人思索。我厌烦喋喋不休、长篇大论的赘述，把简单变为复杂，让人听得云里雾里。</p>
<a id="more"></a>
<p>纵然时间跨越了千百年，可是人类竟是如此相似。唐代的人看雨引发了感想，如今的我在大雨天也一路看着满地的水花四溅而触景生情、浮想联翩。</p>
<p>以前我不喜欢和历史有关的东西，觉得那些都太古老了，没什么值得知道和学习的。现在想想，发现这是极为荒谬的想法，那时的我不懂得敬畏时间。我自己又何尝不是这浩渺历史长河里的一粒砂石呢？</p>
<p>现在的我若是有机会去到一些有着悠久历史的古迹，我会驻足凝视，感受身边的一草一木，感受那遥远的轻柔的风，就像千百年前到过此处的人那样，去感受这古朴的久远的气息。虽然时代不同，虽有人心差异，但是我想，心境却会有几分相似吧。</p>
<p><strong>（二）</strong></p>
<p>我撑着伞在路边的公交站等车，随意看着眼前人来人往、车水马龙的街道。</p>
<p>大雨里，卖一次性雨衣的人身披一次性雨衣，欢呼着招揽生意，雨带给他们快乐。</p>
<p>凛冽的风夹杂着大滴大滴的雨珠匆匆落下，滴滴砸在一个卖豆腐的老奶奶的小三轮车板上。她目光坚定，饱经沧桑的脸布满褶皱，那是上帝赐予勤劳的人最美的礼物。雨中的路人甚至无暇瞥一眼豆腐，她像一个隐形人一样在人群中叫卖。三轮车渐行渐远，她的白发丝丝扬起，又被大雨重重地打了下去。大雨哗哗哗，哗哗哗，阻挡了我的视线。</p>
<p>我的目光看向身旁一个小女孩的雨伞，她站的位置正好是公交站顶上雨水聚集流下的地方，我看着水柱连续不断地流下，打在她的伞上。突然觉得伞真是神奇的工具，那层布结结实实地挡住了水柱，并引导水流从伞边滑落，为它的主人撑起一小片无雨的天空。</p>
<p>一辆私家车飞驰而过，车轮卷起积在路边低地的水，水唰唰地飞溅起来，颗颗水珠欢乐地奔向等车人的裤腿。</p>
<p>“喂，怎么开的车啊！”</p>
<p>“TMD，这开车的真没素质！”</p>
<p>“素质啊……”</p>
<p>开车的人该是沉浸在车中的世界吧，他不会知道几秒钟前他的车经过的那些人在说着什么，他不会知道。</p>
<p>大雨哗哗哗，哗哗哗，淹没了等车人的抱怨。</p>
<p>公交还没有来，我注意到身旁一个撑伞抱小孩的母亲，她的鞋湿透了，衣服上不知是汗还是水，也已湿了一片。可她的伞却稳稳地举着，她怀中熟睡的孩童该是不知道这周围发生的一切吧。</p>
<p>孩子熟睡着，面带微笑。</p>
<p><strong>（三）</strong></p>
<p>“最美的不是下雨天，是曾和你躲过雨的屋檐。”</p>
<p>我行走在大雨里，耳中充满和雨有关的歌、音乐；眼前满是大雨中的各色人等；脑中不断浮现曾经下雨时的情景。</p>
<p>“竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生。”冷不丁想起苏轼的这句诗。</p>
<p>我好想丢下伞，不管不顾地淋着雨朝前走，一直一直走，直到走到天空止住哭泣。</p>
<p>“不行，你不该丢下伞！”脑中的理智跳出来对我说。</p>
<p>“你的衣服、裤子淋湿了，多不舒服啊！”</p>
<p>“你下雨天就这一双鞋子好穿，浸透了雨水，可怎么办呀！”</p>
<p>“淋雨会感冒的！”</p>
<p>“不行，你的书包里还有电脑呢！”</p>
<p>……</p>
<p>一切，一切我的理智能想到的滑稽的借口，统统跳出来，将我的伞牢牢捆在左手，稳稳地将大自然纯真的雨露拒之千里。</p>
<p><strong>（四）</strong></p>
<p>我打开实验室的窗户，外面的雨已经停了，鸟叫声从树林里传出来，无奈枝叶繁多，不见鸟儿踪影。</p>
<p>滑稽的大雨，滑稽的我，滑稽的遐想，滑稽的文。</p>
<p>大地还是湿漉漉的，我看了看来时的路，也无风雨也无晴。</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/95c64e70178baecf12c891436e274f27.JPG" alt=""></p>
<p><em>（拍摄于白城公交站后面的海滩。茫茫的天，茫茫的雨，茫茫的海。）</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>（一）</strong></p>
<p>记得唐代诗人李约的《观祈雨》是这么写的：“桑条无叶土生烟，箫管迎龙水庙前。朱门几处看歌舞，犹恐春阴咽管弦。”这是一首悯农诗，写观看春日祈雨的感慨，前两句写农民春旱祈雨的场面，后两句写朱门看歌舞的情景。同样是面对久旱无雨，两种不同生活的描绘，足见当时的阶级对立和贫富悬殊。农民们由于天旱而忧虑一年生计，豪门权贵却日夜笙歌，犹恐天阴下雨使乐器受潮。</p>
<p>有时候很佩服古人，三言两语就能把眼前所见之景和想要表达的意思抒发出来，言简意赅，意犹未尽。我喜欢这样简短的表达，留有空白，引人思索。我厌烦喋喋不休、长篇大论的赘述，把简单变为复杂，让人听得云里雾里。</p>]]>
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="看见" scheme="http://yoursite.com/tags/%E7%9C%8B%E8%A7%81/"/>
    
      <category term="个人随笔" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设计模式学习（一）——命令模式]]></title>
    <link href="http://yoursite.com/2015/05/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A01%E2%80%94%E2%80%94%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2015/05/22/设计模式学习1——命令模式/</id>
    <published>2015-05-22T15:34:52.000Z</published>
    <updated>2015-05-25T06:54:58.000Z</updated>
    <content type="html"><![CDATA[<h1 id="命令模式定义">命令模式定义</h1><p><strong>命令模式（Command Pattern）</strong>将一个 [ 请求 | 命令 | 调用方法 ] 封装为一个对象，从而可用不同的 [ 请求 | 命令 | 调用方法 ] 对客户进行参数化，对 [ 请求 | 命令 | 调用方法 ] 排队或记录其日志，以及支持可撤销的操作。</p>
<p>命令模式可以对发送者（Sender）和接收者（Receiver）<strong>完全解耦（Decoupling）</strong>。<strong>发送者</strong>是请求操作（发出命令）的对象，<strong>接收者</strong>是接收请求（接收命令）并执行某相应操作的对象。</p>
<a id="more"></a>
<hr>
<h1 id="命令模式结构图">命令模式结构图</h1><p><img src="http://qiniupicbed.qiniudn.com/upload/e44013085e2a02c9ae2f837208d4885d.png" alt=""></p>
<p>图中：</p>
<ul>
<li><p>Command表示抽象命令类，它用于声明执行操作的一个接口；</p>
</li>
<li><p>ConcreteCommand表示具体命令类，它将一个接收者对象绑定于一个动作，实现在Command中声明的execute()方法，调用接收者的相关操作（Action）；</p>
</li>
<li><p>Client表示客户应用程序，创建一个具体命令类的对象，并且设定它的接收者；</p>
</li>
<li><p>Invoker表示调用者，要求一个命令对象执行一个请求；</p>
</li>
<li><p>Receiver表示接收者，它实现如何执行关联请求的相关操作。</p>
</li>
</ul>
<hr>
<h1 id="命令模式实例——公告板系统">命令模式实例——公告板系统</h1><h2 id="实例说明">实例说明</h2><p>某软件公司欲开发一个基于Windows平台的公告板系统。系统提供一个主菜单（Menu），在主菜单中包含了一些菜单项（MenuItem），可以通过Menu类的addMenuItem()方法增加菜单项。菜单项的主要方法是click()，每一个菜单项包含一个抽象命令类，具体命令类包括OpenCommand（打开命令）、CreateCommand（新建命令）、EditCommand（编辑命令）等，命令类具有一个execute()方法，用于调用公告板系统界面类（BoardScreen）的open()、create()、edit()等方法。现使用命令模式设计该系统，使得MenuItem类与BoardScreen类的耦合度降低，绘制类图并编程实现。</p>
<h2 id="实例类图">实例类图</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/0eb36972dfdb73a904b958838d4adad1.png" alt=""></p>
<p>实例类图中与命令模式结构图对应的类主要有：</p>
<ul>
<li><p>Command为抽象命令类（即一个接口）；</p>
</li>
<li><p>OpenCommand、CreateCommand和EditCommand为具体命令类；</p>
</li>
<li><p>Client为客户端测试类（未在图中画出）；</p>
</li>
<li><p>MenuItem为调用者（也是请求发送者）；</p>
</li>
<li><p>BoardScreen为接收者。</p>
</li>
</ul>
<h2 id="实例代码">实例代码</h2><p>Command.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象命令</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title">Command</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>MenuItem.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//菜单项类：请求发送者（调用者）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">MenuItem</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> Command command;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MenuItem</span><span class="params">(String name)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Command <span class="title">getCommand</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.command;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(Command command)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.command = command;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		command.execute();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Menu.java:</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor"><span class="keyword">import</span> java.util.*;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//菜单类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Menu</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> ArrayList itemList = <span class="keyword">new</span> ArrayList();</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> addMenuItem(MenuItem item)</span><br><span class="line">	&#123;</span><br><span class="line">		itemList.add(item);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>OpenCommand.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打开命令：具体命令</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OpenCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> BoardScreen screen;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">OpenCommand</span><span class="params">(BoardScreen screen)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.screen = screen;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		screen.open();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>CreateCommand.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//新建命令：具体命令</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> BoardScreen screen;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CreateCommand</span><span class="params">(BoardScreen screen)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.screen = screen;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		screen.create();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>EditCommand.java:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编辑命令：具体命令</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EditCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> BoardScreen screen;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">EditCommand</span><span class="params">(BoardScreen screen)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.screen = screen;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		screen.edit();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>BoardScreen.java:</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="comment">//公告板系统界面：接收者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">BoardScreen</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> Menu menu;</span><br><span class="line">	<span class="keyword">private</span> MenuItem openItem,createItem,editItem;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">BoardScreen</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		menu = <span class="keyword">new</span> Menu();</span><br><span class="line">		openItem = <span class="keyword">new</span> MenuItem(<span class="string">"打开"</span>);</span><br><span class="line">		createItem = <span class="keyword">new</span> MenuItem(<span class="string">"新建"</span>);</span><br><span class="line">		editItem = <span class="keyword">new</span> MenuItem(<span class="string">"编辑"</span>);</span><br><span class="line">		menu.addMenuItem(openItem);</span><br><span class="line">		menu.addMenuItem(createItem);</span><br><span class="line">		menu.addMenuItem(editItem);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"主菜单选项："</span>);</span><br><span class="line">		<span class="keyword">for</span>(Object obj:menu.itemList)</span><br><span class="line">		&#123;</span><br><span class="line">			System.<span class="keyword">out</span>.println(((MenuItem)obj).getName());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"显示打开窗口"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"显示新建窗口"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">edit</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.<span class="keyword">out</span>.println(<span class="string">"显示编辑窗口"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Menu <span class="title">getMenu</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> menu;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Client.java:</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">//客户端测试类</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Client</span></span><br><span class="line">&#123;</span><br><span class="line">	public static void main<span class="container">(<span class="type">String</span> <span class="title">args</span>[])</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">BoardScreen</span> screen = new <span class="type">BoardScreen</span><span class="container">()</span>;</span><br><span class="line">		<span class="type">Menu</span> menu = screen.getMenu<span class="container">()</span>;</span><br><span class="line">		<span class="type">Command</span> openCommand,createCommand,editCommand;</span><br><span class="line">		openCommand = new <span class="type">OpenCommand</span><span class="container">(<span class="title">screen</span>)</span>;</span><br><span class="line">		createCommand = new <span class="type">CreateCommand</span><span class="container">(<span class="title">screen</span>)</span>;</span><br><span class="line">		editCommand = new <span class="type">EditCommand</span><span class="container">(<span class="title">screen</span>)</span>;</span><br><span class="line">		<span class="type">MenuItem</span> openItem,createItem,editItem;</span><br><span class="line">		openItem = <span class="container">(<span class="type">MenuItem</span>)</span>menu.itemList.get<span class="container">(0)</span>;</span><br><span class="line">		createItem = <span class="container">(<span class="type">MenuItem</span>)</span>menu.itemList.get<span class="container">(1)</span>;</span><br><span class="line">		editItem = <span class="container">(<span class="type">MenuItem</span>)</span>menu.itemList.get<span class="container">(2)</span>;</span><br><span class="line">		openItem.setCommand<span class="container">(<span class="title">openCommand</span>)</span>;</span><br><span class="line">		createItem.setCommand<span class="container">(<span class="title">createCommand</span>)</span>;</span><br><span class="line">		editItem.setCommand<span class="container">(<span class="title">editCommand</span>)</span>;</span><br><span class="line">		screen.display<span class="container">()</span>;</span><br><span class="line">		openItem.click<span class="container">()</span>;</span><br><span class="line">		createItem.click<span class="container">()</span>;</span><br><span class="line">		editItem.click<span class="container">()</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="运行结果">运行结果</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/b28cb46ccbc2214d2022a578f8807d5d.png" alt=""></p>
<h2 id="附加描述">附加描述</h2><p>在本实例中，只需要在调用者MenuItem中注入不同的具体命令类，可以使得相同的菜单项MenuItem对应接收者BoardScreen的不同方法。无需修改类库代码，只需修改客户端代码即可更换接收者。</p>
<p>在实际开发时，还可以将BoardScreen中的open()、create()和edit()等方法封装在不同的类中，如果需要更换某菜单项的功能，只需对应增加一个新的具体命令类和一个接收者类，再将新的具体命令对象注入对应的MenuItem对象，即可实现菜单项功能的改变，且符合开闭原则。</p>
<p><em>注：开闭原则（Open-Closed Principle, OCP）由Bertrand Meyer提出，其定义为“Software entities should be open for extension, but closed for modification.”也就是说软件实体应对扩展开放，而对修改关闭，即软件实体应尽量在不修改原有代码的情况下进行扩展。</em></p>
<hr>
<h1 id="后话">后话</h1><p>今天花了好长时间，才对命令模式有了基本的理解。感慨设计模式学路之漫漫，愚将日积跬步而求索。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="命令模式定义">命令模式定义</h1><p><strong>命令模式（Command Pattern）</strong>将一个 [ 请求 | 命令 | 调用方法 ] 封装为一个对象，从而可用不同的 [ 请求 | 命令 | 调用方法 ] 对客户进行参数化，对 [ 请求 | 命令 | 调用方法 ] 排队或记录其日志，以及支持可撤销的操作。</p>
<p>命令模式可以对发送者（Sender）和接收者（Receiver）<strong>完全解耦（Decoupling）</strong>。<strong>发送者</strong>是请求操作（发出命令）的对象，<strong>接收者</strong>是接收请求（接收命令）并执行某相应操作的对象。</p>]]>
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[16PF心理测试结果]]></title>
    <link href="http://yoursite.com/2015/05/22/16PF%E5%BF%83%E7%90%86%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C/"/>
    <id>http://yoursite.com/2015/05/22/16PF心理测试结果/</id>
    <published>2015-05-21T16:29:06.000Z</published>
    <updated>2015-05-21T17:42:32.000Z</updated>
    <content type="html"><![CDATA[<h2 id="16PF简介">16PF简介</h2><p>今天下午看Coursera上南京大学的公开课《心理学与生活》的第五讲“人格与动机”时，听到“16PF人格测试”，于是晚上坐下来测试了一遍。</p>
<p><strong>卡特尔16PF测验</strong>由美国伊利诺州立大学人格及能力研究所雷蒙德·卡特尔教授编制。卡氏采用系统观察法、科学实验法以及因素分析统计法，经过三十年的研究确定了十六种人格特质，并据此编制了测验量表。卡特尔认为“根源特质”是人类的潜在、稳定的人格特征，是人格测验应把握的实质。</p>
<a id="more"></a>
<p>卡特尔16PF又称卡特尔16PF测验，是世界上最完善的心理测量工具之一。16种个性因素在一个人身上的不同组合，就构成了一个人独特的人格，完整地反映了一个人个性的全貌。它用以测量人们16种基本的性格特质，这16种特质是影响人们学习生活的基本因素。</p>
<p>人格是稳定的、习惯化的思维方式和行为风格，它贯穿于人的整个心理，是人的独特性的整体写照。人格对于管理者来说是很重要的，它渗透到管理者的所有行为活动中，影响管理者的活动方式、风格和绩效。大量研究和实践表明：一些样式的人格类型和管理活动有着特定的关系，它们对团体的贡献不同，所适宜的管理环境也不同。利用成熟的人格测验方法对管理者或应聘人员的人格类型进行诊断，可为人事安置、调整和合理利用人力资源提供建议。这正是16PF测验的目的所在。16PF广泛用于人员的选拔和评定。</p>
<hr>
<h2 id="测试">测试</h2><p>我一口气测完了完整版的187道题，测试地址为：<a href="http://www.apesk.com/16pf/" target="_blank" rel="external">http://www.apesk.com/16pf/</a></p>
<p>比较奇葩的是，测试完想要看结果，需要9.9RMB，这可能因为这个网址测试的正规性吧（之前被一个网站测试坑了，顺便把网址贴出来，防止大家被坑：<a href="http://www.xyxinli.com/psytest/psytest6.htm" target="_blank" rel="external">http://www.xyxinli.com/psytest/psytest6.htm</a>。说它坑是因为它在测试中嵌入了一些题目，我猜想是另有测试目的吧，感觉不大厚道就是了）。</p>
<p>另外，这也是一种营销手段吧（大家花了时间填完187道题，内心迫切渴望看到结果，于是就可能很迅速地支付了这9.9元）。</p>
<p>不过也算好，测试结果看起来还是很规范的，而且赠送了一本￼￼名为《天资差异》的电子书，也算得上有业界良心了。</p>
<hr>
<h2 id="我的测试结果">我的测试结果</h2><p><img src="http://qiniupicbed.qiniudn.com/upload/2d34c614778800fcde83690c6a211a59.png" alt=""></p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/99e0973c7da38108fbb72f52a7fd2118.png" alt=""></p>
<hr>
<p>A因素（乐群性）原始分:14 转化成标准分为:8(总分10分) 您的A因素得分状态为：高分</p>
<p>低分：缄默，孤独，冷漠。<br>高分：外向，热情，乐群。</p>
<hr>
<p>B因素（聪慧性）原始分:12 转化成标准分为:10(总分10分) 您的B因素得分状态为：高分 </p>
<p>低分：知识面比较窄，抽象思考能力比较弱。<br>高分：富有才识，善于抽象思考，学习能力强，思考敏捷。</p>
<hr>
<p>C因素（稳定性）原始分:13 转化成标准分为:5(总分10分) 您的C因素得分状态为：中间状态 </p>
<p>低分：情绪激动，易生烦恼，心神动摇不定，易受环境支配。<br>高分：情绪稳定而成熟，能面对现实。</p>
<hr>
<p>E因素（恃强性）原始分:11 转化成标准分为:6(总分10分) 您的E因素得分状态为：中间状态 </p>
<p>低分：谦逊，顺从，通融，恭顺。<br>高分：好强固执，独立积极。</p>
<hr>
<p>F因素（兴奋性）原始分:11 转化成标准分为:6(总分10分) 您的F因素得分状态为：中间状态 </p>
<p>低分：严肃，审慎，冷静，寡言。<br>高分：轻松兴奋，随遇而安。 </p>
<hr>
<p>G因素（有恒性）原始分:11 转化成标准分为:5(总分10分) 您的G因素得分状态为：中间状态 </p>
<p>低分：苟且敷衍，缺乏奉公守法的精神。<br>高分：有恒负责，做事尽职。</p>
<hr>
<p>H因素（敢为性）原始分:13 转化成标准分为:7(总分10分) 您的H因素得分状态为：中间状态 </p>
<p>低分：畏怯退缩缺乏自信心。<br>高分：冒险敢为，少有顾忌。 </p>
<hr>
<p>I因素（敏感性）原始分:10 转化成标准分为:5(总分10分) 您的I因素得分状态为：中间状态 </p>
<p>低分：理智，着重现实，自恃其力。<br>高分：敏感，感情用事。 </p>
<hr>
<p>L因素（怀疑性）原始分:10 转化成标准分为:5(总分10分) 您的L因素得分状态为：中间状态 </p>
<p>低分：依赖随和，易与人相处。<br>高分：怀疑，刚愎，固执已见。 </p>
<hr>
<p>M因素（幻想性）原始分:13 转化成标准分为:5(总分10分) 您的M因素得分状态为：中间状态 </p>
<p>低分：现实，合乎成规，力求妥善合理。<br>高分：幻想的，狂放不羁。 </p>
<hr>
<p>N因素（世故性）原始分:7 转化成标准分为:5(总分10分) 您的N因素得分状态为：中间状态 </p>
<p>低分：坦白，直率，天真。<br>高分：精明能干，世故。 </p>
<hr>
<p>O因素（忧虑性）原始分:3 转化成标准分为:2(总分10分) 您的O因素得分状态为：低分 </p>
<p>低分：安详，沉着，有自信心。<br>高分：忧虑抑郁，烦恼自扰。 </p>
<hr>
<p>Q1因素（挑战性）原始分:11 转化成标准分为:6(总分10分) 您的Q1因素得分状态为：中间状态 </p>
<p>低分：保守的，尊重传统观念与行为标准。<br>高分：自由的，批评激进，不拘泥于现实。 </p>
<hr>
<p>Q2因素（独立性）原始分:15 转化成标准分为:7(总分10分) 您的Q2因素得分状态为：中间状态 </p>
<p>低分：依赖，随群附众。<br>高分：自立自强，当机立断。</p>
<hr>
<p>Q3因素（自律性）原始分:16 转化成标准分为:8(总分10分) 您的Q3因素得分状态为：高分 </p>
<p>低分：矛盾冲突，不顾大体。<br>高分：知已知彼，自律谨严。 </p>
<hr>
<p>Q4因素（紧张性）原始分:6 转化成标准分为:2(总分10分) 您的Q4因素得分状态为：低分</p>
<p>低分：心平气和，闲散宁静。<br>高分：紧张困扰，激动挣扎。</p>
<hr>
<p>次级因素分析：(次级人格因素是由以上有关的基本因素标准分，经过数量均衡，连同指定常数，相加而成的。另外，以下各因素分数的高低并不就等同于心理健康状态的好坏以及成就、创造力、成长能力的水平。它只是表明人格因素对这些方面的影响程度。事实上，除了人格因素，成就大小、创造力水平、心理健康状况等还受到其它诸多因素影响。)</p>
<hr>
<p>次级因素X1（适应与焦虑型）得分：1 您的X1因素得分状态为：低分 </p>
<p>低分：生活适应顺利，通常感到心满意足，能做到所期望的及自认为重要的事情。如分数极低，则可能对困难的工作缺乏毅力，有事事知难而退，不肯奋斗努力的倾向。 </p>
<hr>
<p>次级因素X2（内向与外向型）得分：13 您的X2因素得分状态为：高分 </p>
<p>低分：内倾，趋于胆小，自足，在与别人接触中采取克制态度，有利于从事精细工作。这种类型无所谓利弊，主要取决于在哪种情况下采取这种态度。<br>高分：外倾，开朗，善于交际，不受拘束，有利于从事贸易工作。</p>
<hr>
<p>次级因素X3（感情用事与安详机警型）得分：2 您的X3因素得分状态为：低分 </p>
<p>低分：情感丰富而感到困扰不安，它可能是缺乏信心、颓丧的类型，对生活中的细节较为含蓄敏感，性格温和，讲究生活艺术，采取行动前再三思考，顾虑太多。<br>高分：富有事业心，果断，刚毅，有进取精神，精力充沛，行动迅速，但常忽视生活上的细节，只对明显的事物注意，有时会考虑不周，不计后果，冒然行事。 </p>
<hr>
<p>次级因素X4（怯懦与果断型）得分：12 您的X3因素得分状态为：高分 </p>
<p>高分：果断，独立，露锋芒，有气魄，有攻击性的倾向，通常会主动地寻找可以施展这种行为的环境或机会，以充分表现自己的独创能力，并从中取得利益。 </p>
<hr>
<p>次级因素Y1（心理健康因素）得分：37<br>说明：心理健康状况几乎是一切职业及事业成功的基础。心理不健康者，其学习和工作效率都会因之减低。心理健康标准可介于4-40 之间，均值为22 分。低于12分者仅占人数分配的10%，情绪不稳定的程度颇为显著。</p>
<hr>
<p>次级因素Y2（专业有成就者的人格因素）得分：124<br>说明：本次级因素意指人格中的某些因素可能对将来的专业成就所具有的影响，它并不代表将来专业成就所达到的水平。其总分正常范围在10-120 之间（更高的得分也常见）。平均分为55，67 以上者其成功的机会更大。</p>
<hr>
<p>次级因素Y3（创造力强者的人格因素）得分(已转换为标准分)：10 您的Y3因素得分状态为：高分<br>标准分高于7 者属于创造力强者的范围，应有其成就。</p>
<hr>
<p>次级因素Y4（在新环境中有成长能力的人格因素）得分：39<br>说明：本次级因素总分可介于4-40 之间，平均值为22 分，不足17分者仅占人数的10%左右，从事专业或训练成功的可能性较小。25 分以上者，则有成功的希望。</p>
<hr>
<h2 id="人格理论">人格理论</h2><p>每一种人格理论都是一个用来解释人格的概念、假设、观点和原则的系统。人格问题是一个非常复杂的问题，如果没有一个理论性的指导框架，我们很容易在理解时迷失方向。我 们怎样才能把对人格的各种观察和认识组合在一起？人格是怎样发展的？产生人格障碍和情绪障碍的原因是什么？如何帮助那些有心理障碍的人？为了回答这些问题，心理学家提 出了许多有关人格的理论。这些理论大致可以分为五类：</p>
<p>1、特质理论。这类理论试图说明组成人格的特质、人格特质与实际行为之间的关系；</p>
<p>2、精神动力学理论。这类理论强调人格的内部作用过程，尤其是内部的冲突和矛盾斗争；</p>
<p>3、行为主义理论。这类理论强调外部环境、条件与学习的作用；</p>
<p>4、社会学习理论。该理论认为人格的差异源于社会化、期望以及认知加工过程。</p>
<p>5、人本主义理论。这类理论更在意个体的感受、主观的体验以及个人成长机制的作用。</p>
<hr>
<h2 id="核心特质">核心特质</h2><p>核心特质、次要特质和首要特质的区别是什么呢？核心特质是人格的基础。极少数的几个核心特质就能描述一个人的本质。例如，六个特质就能将Annette的人格特点展现在我们面 前：有控制欲的、爱交际的、快乐的、聪明的和乐观的。</p>
<p>相对而言，次要特质指的是人的一些表面特质和不一定很稳定的品质，如食物偏好、政治观点、态度和音乐品味等。</p>
<hr>
<h2 id="卡特尔根源特质理论">卡特尔根源特质理论</h2><p>你如何分辨某种人格特质是核心特质还是次要特质呢？Cattel试图通过很多人特质的研究来回答这个问题。Cattel把人格的可见部分称为表面特质，并由此进行研究。他注意到， 许多表面特质都是以“组”的形式出现的，因此一些经常同时出现的特质词似乎是同源的，反映着某种更基本的特质。Cattel把这类更为基本的人格特质成为根源特质。 Cattel使用因素分析的统计方法来探索特质之间的关联，例如，他发现有想象力的人往往有创造性、原创性、且好奇心强，创新性高，敢于改革，具有创造才能。因此，“想象力 丰富”是一个根源特质。如果你是一个想象力丰富的人，我们自然可以推断你还具有其他特质。</p>
<p>Cattel提出了16个根源特质。根据他的观点，这16个根源特质对于充分描述某种人格都是必需的。这16个根源特质分别是：</p>
<p>因素A乐群性：高分者外向、热情、乐群；低分者缄默、孤独、内向。 　　</p>
<p>因素B聪慧性：高分者聪明、富有才识；低分者迟钝、学识浅薄。 　　</p>
<p>因素C稳定性：高分者情绪稳定而成熟；低分者情绪激动不稳定。 　　</p>
<p>因素E恃强性：高分者好强固执、支配攻击；低分者谦虚顺从。 　　</p>
<p>因素F兴奋性：高分者轻松兴奋、逍遥放纵；低分者严肃审慎、沉默寡言。 　　</p>
<p>因素G有恒性：高分者有恒负责、重良心；低分者权宜敷衍、原则性差。 　　</p>
<p>因素H敢为性：高分者冒险敢为，少有顾忌，主动性强；低分者害羞、畏缩、退却。 　　</p>
<p>因素I敏感性：高分者细心、敏感、好感情用事；低分者粗心、理智、着重实际。 　　</p>
<p>因素L怀疑性：高分者怀疑、刚愎、固执己见；低分者真诚、合作、宽容、信赖随和。 　　</p>
<p>因素M幻想性：高分者富于想像、狂放不羁；低分者现实、脚踏实地、合乎成规。 　　</p>
<p>因素N世故性：高分者精明、圆滑、世故、人情练达、善于处世；低分者坦诚、直率、天真。 　　</p>
<p>因素O忧虑性：高分者忧虑抑郁、沮丧悲观、自责、缺乏自信；低分者安详沉着、有自信心。 　　</p>
<p>因素Ql实验性：高分者自由开放、批评激进；低分者保守、循规蹈矩、尊重传统。 　　</p>
<p>因素Q2独立性：高分者自主、当机立断；低分者依赖、随群附众。 　　</p>
<p>因素Q3自律性：高分者知己知彼、自律谨严；低分者不能自制、不守纪律、自我矛盾、松懈、随心所欲。 　　</p>
<p>因素Q4紧张性：高分者紧张、有挫折感、常缺乏耐心、心神不定，时常感到疲乏；低分者心平气和、镇静自若、知足常乐。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="16PF简介">16PF简介</h2><p>今天下午看Coursera上南京大学的公开课《心理学与生活》的第五讲“人格与动机”时，听到“16PF人格测试”，于是晚上坐下来测试了一遍。</p>
<p><strong>卡特尔16PF测验</strong>由美国伊利诺州立大学人格及能力研究所雷蒙德·卡特尔教授编制。卡氏采用系统观察法、科学实验法以及因素分析统计法，经过三十年的研究确定了十六种人格特质，并据此编制了测验量表。卡特尔认为“根源特质”是人类的潜在、稳定的人格特征，是人格测验应把握的实质。</p>]]>
    
    </summary>
    
      <category term="心理测试" scheme="http://yoursite.com/tags/%E5%BF%83%E7%90%86%E6%B5%8B%E8%AF%95/"/>
    
      <category term="心理学" scheme="http://yoursite.com/categories/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《中国哲学简史》笔记（一）]]></title>
    <link href="http://yoursite.com/2015/05/18/%E3%80%8A%E4%B8%AD%E5%9B%BD%E5%93%B2%E5%AD%A6%E7%AE%80%E5%8F%B2%E3%80%8B%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2015/05/18/《中国哲学简史》笔记（一）/</id>
    <published>2015-05-18T08:20:48.000Z</published>
    <updated>2015-05-18T09:19:25.000Z</updated>
    <content type="html"><![CDATA[<p>按照某些西方哲学家的看法，人要思想，首先要弄清楚人能够思考什么；这就是说，在对人生进行思考之前，我们先要对思想进行思考。</p>
<hr>
<p>我们如果把《老子》书中提到的概念列举出来，重述一遍，可能用上五万字或五十万字，它可能帮助读者了解《老子》一书的含义，但它本身将成为另一本书，而永不可能代替《老子》的原著。</p>
<a id="more"></a>
<hr>
<p>郭象是《庄子》一书的著名注释家。他的注释本身就是道家的一本重要古典文献。他把庄子使用的寓言和隐喻，用理性论辩的方式加以阐述，又把《庄子》书中的诗句用散文予以重述，他的论述比《庄子》一书清晰得多。但是，《庄子》原书富于提示，郭象的注释则明晰具体。人们会问：两者之中，哪个更好呢？后来一位禅宗僧人曾说：“曾见郭象注庄子，识者云：却是庄子注郭象。”（《大慧普觉禅师语录》卷22）</p>
<hr>
<p>任何人如果不能用原文阅读某种哲学著作，要想完全理解原著，的确会有困难，这是由于语言的障碍。中国哲学著作由于往往以提示引人联想，语言的困难就更大。中国哲学家的言论和著述中的种种提示，很难翻译。当它被翻译成外文时，原文中的提示变成一种明确的陈述。失去了提示的性质，就失去了原著的味道。</p>
<p>任何翻译的文字，说到底，只是一种解释。当我们把《老子》书中的一句话译成英文时，我们是在按照自己的理解来阐述它的含义。译文通常只能表述一种含义，而原文却可能还有其他层次的含义。原文是提示性质的，译文则不可能做到这一点。于是，原文中的丰富含义，在翻译过程中大部分都丢失了。</p>
<p>《老子》和《论语》都有许多种译本。每个译者都不免认为其他译本不够满意。但是，无论一个译本如何力求完美，它总不及原著。只有把《老子》和《论语》的所有译本，加上将来的各种新译本结合起来看，才可能显示《老子》和《论语》原书的风貌。</p>
<p>5世纪时的佛教高僧鸠摩罗什是把佛教经典译成中文的一位翻译大家。他曾说，翻译工作恰如嚼饭喂人。如果一个人自己不能吃饭，要吃别人的唾余，所吃到嘴里的当然没有原来那种饭的香味和鲜味。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>按照某些西方哲学家的看法，人要思想，首先要弄清楚人能够思考什么；这就是说，在对人生进行思考之前，我们先要对思想进行思考。</p>
<hr>
<p>我们如果把《老子》书中提到的概念列举出来，重述一遍，可能用上五万字或五十万字，它可能帮助读者了解《老子》一书的含义，但它本身将成为另一本书，而永不可能代替《老子》的原著。</p>]]>
    
    </summary>
    
      <category term="哲学" scheme="http://yoursite.com/tags/%E5%93%B2%E5%AD%A6/"/>
    
      <category term="阅读" scheme="http://yoursite.com/tags/%E9%98%85%E8%AF%BB/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[周末掠影]]></title>
    <link href="http://yoursite.com/2015/05/17/%E5%91%A8%E6%9C%AB%E6%8E%A0%E5%BD%B1/"/>
    <id>http://yoursite.com/2015/05/17/周末掠影/</id>
    <published>2015-05-17T15:08:03.000Z</published>
    <updated>2015-05-17T16:28:23.000Z</updated>
    <content type="html"><![CDATA[<p>今天，梦梦说要装扮成一名游客逛校园，出发前，她是这个样子的。</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/e175f594627470a132974a839f7428c6.jpg" alt=""></p>
<p>为了搭配协调，我本来也想着要戴副墨镜，虽然今天出门前看起来是阴天，没什么太阳。可惜后来翻箱倒柜却没有找到墨镜，哎，于是只好……把她的眼镜借来拍张照！</p>
<a id="more"></a>
<p><img src="http://qiniupicbed.qiniudn.com/upload/604e2d97a32736f131d8a2d2eee0cda1.png" alt=""></p>
<p>后来，天气渐渐好起来。五月的厦门，到处都是清新明朗的蓝绿色，四处望望，让人心情大好。</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/4a4fea768512ddf2464ed26ad2256b0c.png" alt=""></p>
<p>我们来到一家吃砂锅米线的小店，味道超棒！吃完后，我们小坐休息一会儿。</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/ffd1574b247d602d00969d8c54a0aadf.jpg" alt=""></p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/ac9f0dd27405c0c7728c47c0bf6e2270.jpg" alt=""></p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/d2b7171c5d9a27e0c4c7d1f915c2d896.jpg" alt=""></p>
<p>美餐一顿后，我们接着逛起来。梦梦装得很像游客，在进校门时，保安叔叔说：“有校园卡吗？”她说有，于是拿出来。保安叔叔又问：“这卡是你的吗？”哈哈！重重检查，不肯放过一名游客，保安叔叔真是尽职尽责！</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/5e219033c0cc74650c99ff5ca4f338da.jpg" alt=""></p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/9361dfff4a913d7f1be31d2ee839ae11.png" alt=""></p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/24bca7b5dd5973e527bf6d4bfc5ec347.jpg" alt=""></p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/3e9dd02d96a47f1f40ea0f0a731928a5.jpg" alt=""></p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/e2f47edfe6e68447d29c5689dab5e9a7.jpg" alt=""></p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/b71d18707ad5df4aa054f86119d9036d.jpg" alt=""></p>
<p>天色将晚，慢慢地，我们走到了高尔夫练习场。</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/0e742a2d0c637adc913f67972067cec4.jpg" alt=""></p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/14796730a2c2e51d62d799961eebd0f2.jpg" alt=""></p>
<p>咦！看过这么多美美的图片之后，你不禁要问：摄影师跑哪去了？咋就开始的时候录了个脸？</p>
<p>咳……摄影师隆重登场！</p>
<p>我把下面这张图取名为：“我们好像在哪见过，你记得吗？”</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/9654d4380b899a04ef004de9782f04ee.jpg" alt=""></p>
<p>最后……默默上个合影……^_^</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/47614e301fd7f9222eb67a887b6ebbce.jpg" alt=""></p>
<p>啊，这真是一个开心的周末！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天，梦梦说要装扮成一名游客逛校园，出发前，她是这个样子的。</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/e175f594627470a132974a839f7428c6.jpg" alt=""></p>
<p>为了搭配协调，我本来也想着要戴副墨镜，虽然今天出门前看起来是阴天，没什么太阳。可惜后来翻箱倒柜却没有找到墨镜，哎，于是只好……把她的眼镜借来拍张照！</p>]]>
    
    </summary>
    
      <category term="幸福" scheme="http://yoursite.com/tags/%E5%B9%B8%E7%A6%8F/"/>
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="高尔夫" scheme="http://yoursite.com/tags/%E9%AB%98%E5%B0%94%E5%A4%AB/"/>
    
      <category term="美图" scheme="http://yoursite.com/categories/%E7%BE%8E%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[swirl学习之十四——Dates and Times]]></title>
    <link href="http://yoursite.com/2015/05/16/swirl%E5%AD%A6%E4%B9%A014/"/>
    <id>http://yoursite.com/2015/05/16/swirl学习14/</id>
    <published>2015-05-16T03:44:35.000Z</published>
    <updated>2015-05-16T03:47:40.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">| Please choose a course, <span class="keyword">or</span> type <span class="number">0</span> <span class="keyword">to</span> <span class="keyword">exit</span> swirl.</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: R Programming</span><br><span class="line"><span class="number">2</span>: <span class="keyword">Take</span> <span class="keyword">me</span> <span class="keyword">to</span> the swirl course repository!</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">| Please choose a lesson, <span class="keyword">or</span> type <span class="number">0</span> <span class="keyword">to</span> <span class="keyword">return</span> <span class="keyword">to</span> course menu.</span><br><span class="line"></span><br><span class="line"> <span class="number">1</span>: Basic Building Blocks      <span class="number">2</span>: Workspace <span class="keyword">and</span> Files     </span><br><span class="line"> <span class="number">3</span>: Sequences <span class="keyword">of</span> Numbers       <span class="number">4</span>: Vectors                 </span><br><span class="line"> <span class="number">5</span>: Missing Values             <span class="number">6</span>: Subsetting Vectors      </span><br><span class="line"> <span class="number">7</span>: Matrices <span class="keyword">and</span> Data Frames   <span class="number">8</span>: Logic                   </span><br><span class="line"> <span class="number">9</span>: Functions                 <span class="number">10</span>: lapply <span class="keyword">and</span> sapply       </span><br><span class="line"><span class="number">11</span>: vapply <span class="keyword">and</span> tapply         <span class="number">12</span>: Looking at Data         </span><br><span class="line"><span class="number">13</span>: Simulation                <span class="number">14</span>: Dates <span class="keyword">and</span> Times         </span><br><span class="line"><span class="number">15</span>: Base Graphics             </span><br><span class="line"></span><br><span class="line">Selection: <span class="number">14</span></span><br><span class="line"></span><br><span class="line">  |                                                    |   <span class="number">0</span>%</span><br><span class="line"></span><br><span class="line">| R has a special way <span class="keyword">of</span> representing dates <span class="keyword">and</span> times, which</span><br><span class="line">| can be helpful <span class="keyword">if</span> you<span class="comment">'re working with data that show how</span></span><br><span class="line">| something changes over time (i.e. time-series data) <span class="keyword">or</span> <span class="keyword">if</span></span><br><span class="line">| your data contain some other temporal information, <span class="keyword">like</span></span><br><span class="line">| dates <span class="keyword">of</span> birth.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=                                                   |   <span class="number">3</span>%</span><br><span class="line"></span><br><span class="line">| Dates are represented <span class="keyword">by</span> the <span class="comment">'Date' class and times are</span></span><br><span class="line">| represented <span class="keyword">by</span> the <span class="comment">'POSIXct' and 'POSIXlt' classes.</span></span><br><span class="line">| Internally, dates are stored <span class="keyword">as</span> the number <span class="keyword">of</span> days since</span><br><span class="line">| <span class="number">1970</span>-<span class="number">01</span>-<span class="number">01</span> <span class="keyword">and</span> times are stored <span class="keyword">as</span> either the number <span class="keyword">of</span></span><br><span class="line">| seconds since <span class="number">1970</span>-<span class="number">01</span>-<span class="number">01</span> (<span class="keyword">for</span> <span class="comment">'POSIXct') or a list of</span></span><br><span class="line">| seconds, minutes, hours, etc. (<span class="keyword">for</span> <span class="comment">'POSIXlt').</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===                                                 |   <span class="number">6</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Let</span><span class="comment">'s start by using d1 <span class="xmlDocTag">&lt;- Sys.Date() to get the current</span><br><span class="line">| date and store it in the variable d1. (That's the letter</span><br><span class="line">| 'd' and the number 1.)</span><br><span class="line"></span><br><span class="line">&gt;</span> d1<span class="xmlDocTag">&lt;-Sys.Date()</span><br><span class="line"></span><br><span class="line">| That's a job well done!</span><br><span class="line"></span><br><span class="line">  |====                                                |   9%</span><br><span class="line"></span><br><span class="line">| Use the class() function to confirm d1 is a Date object.</span><br><span class="line"></span><br><span class="line">&gt;</span> class(d1)</span></span><br><span class="line">[<span class="number">1</span>] <span class="string">"Date"</span></span><br><span class="line"></span><br><span class="line">| You nailed it! Good job!</span><br><span class="line"></span><br><span class="line">  |======                                              |  <span class="number">11</span>%</span><br><span class="line"></span><br><span class="line">| We can use the unclass() <span class="keyword">function</span> <span class="keyword">to</span> see what d1 looks <span class="keyword">like</span></span><br><span class="line">| internally. <span class="keyword">Try</span> it out.</span><br><span class="line"></span><br><span class="line">&gt; unclass(d1)</span><br><span class="line">[<span class="number">1</span>] <span class="number">16571</span></span><br><span class="line"></span><br><span class="line">| You got it!</span><br><span class="line"></span><br><span class="line">  |=======                                             |  <span class="number">14</span>%</span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s the exact number of days since 1970-01-01!</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=========                                           |  <span class="number">17</span>%</span><br><span class="line"></span><br><span class="line">| However, <span class="keyword">if</span> you print d1 <span class="keyword">to</span> the console, you<span class="comment">'ll get today's</span></span><br><span class="line">| <span class="built_in">date</span> -- YEAR-MONTH-DAY. Give it a <span class="keyword">try</span>.</span><br><span class="line"></span><br><span class="line">&gt; d1</span><br><span class="line">[<span class="number">1</span>] <span class="string">"2015-05-16"</span></span><br><span class="line"></span><br><span class="line">| Keep working <span class="keyword">like</span> that <span class="keyword">and</span> you<span class="comment">'ll get there!</span></span><br><span class="line"></span><br><span class="line">  |==========                                          |  <span class="number">20</span>%</span><br><span class="line"></span><br><span class="line">| What <span class="keyword">if</span> we need <span class="keyword">to</span> reference a <span class="built_in">date</span> prior <span class="keyword">to</span> <span class="number">1970</span>-<span class="number">01</span>-<span class="number">01</span>?</span><br><span class="line">| Create a variable d2 containing <span class="keyword">as</span>.<span class="built_in">Date</span>(<span class="string">"1969-01-01"</span>).</span><br><span class="line"></span><br><span class="line">&gt; d2&lt;-<span class="keyword">as</span>.<span class="built_in">Date</span>(<span class="string">"1969-01-01"</span>)</span><br><span class="line"></span><br><span class="line">| You nailed it! Good job!</span><br><span class="line"></span><br><span class="line">  |============                                        |  <span class="number">23</span>%</span><br><span class="line"></span><br><span class="line">| Now use unclass() again <span class="keyword">to</span> see what d2 looks <span class="keyword">like</span></span><br><span class="line">| internally.</span><br><span class="line"></span><br><span class="line">&gt; unclass(d2)</span><br><span class="line">[<span class="number">1</span>] -<span class="number">365</span></span><br><span class="line"></span><br><span class="line">| You are amazing!</span><br><span class="line"></span><br><span class="line">  |=============                                       |  <span class="number">26</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">As</span> you may have anticipated, you <span class="keyword">get</span> a negative number. <span class="keyword">In</span></span><br><span class="line">| this <span class="keyword">case</span>, it<span class="comment">'s -365, since 1969-01-01 is exactly one</span></span><br><span class="line">| calendar year (i.e. <span class="number">365</span> days) BEFORE <span class="number">1970</span>-<span class="number">01</span>-<span class="number">01.</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===============                                     |  <span class="number">29</span>%</span><br><span class="line"></span><br><span class="line">| Now, <span class="keyword">let</span><span class="comment">'s take a look at how R stores times. You can</span></span><br><span class="line">| access the current <span class="built_in">date</span> <span class="keyword">and</span> time <span class="keyword">using</span> the Sys.time()</span><br><span class="line">| <span class="keyword">function</span> <span class="keyword">with</span> no arguments. <span class="keyword">Do</span> this <span class="keyword">and</span> store the result <span class="keyword">in</span></span><br><span class="line">| a variable called t1.</span><br><span class="line"></span><br><span class="line">&gt; t1&lt;-Sys.time()</span><br><span class="line"></span><br><span class="line">| All that hard work <span class="keyword">is</span> paying <span class="keyword">off</span>!</span><br><span class="line"></span><br><span class="line">  |================                                    |  <span class="number">31</span>%</span><br><span class="line"></span><br><span class="line">| View the contents <span class="keyword">of</span> t1.</span><br><span class="line"></span><br><span class="line">&gt; t1</span><br><span class="line">[<span class="number">1</span>] <span class="string">"2015-05-16 11:08:48 CST"</span></span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s correct!</span></span><br><span class="line"></span><br><span class="line">  |==================                                  |  <span class="number">34</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">And</span> check the <span class="keyword">class</span>() <span class="keyword">of</span> t1.</span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">class</span>(t1)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"POSIXct"</span> <span class="string">"POSIXt"</span> </span><br><span class="line"></span><br><span class="line">| You<span class="comment">'re the best!</span></span><br><span class="line"></span><br><span class="line">  |===================                                 |  <span class="number">37</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">As</span> mentioned earlier, POSIXct <span class="keyword">is</span> just one <span class="keyword">of</span> two ways that</span><br><span class="line">| R represents time information. (You can ignore the second</span><br><span class="line">| value above, POSIXt, which just functions <span class="keyword">as</span> a common</span><br><span class="line">| language between POSIXct <span class="keyword">and</span> POSIXlt.) Use unclass() <span class="keyword">to</span> see</span><br><span class="line">| what t1 looks <span class="keyword">like</span> internally -- the (large) number <span class="keyword">of</span></span><br><span class="line">| seconds since the beginning <span class="keyword">of</span> <span class="number">1970.</span></span><br><span class="line"></span><br><span class="line">&gt; unclass(t1)</span><br><span class="line">[<span class="number">1</span>] <span class="number">1431745729</span></span><br><span class="line"></span><br><span class="line">| Excellent work!</span><br><span class="line"></span><br><span class="line">  |=====================                               |  <span class="number">40</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">By</span> <span class="keyword">default</span>, Sys.time() returns an <span class="built_in">object</span> <span class="keyword">of</span> <span class="keyword">class</span> POSIXct,</span><br><span class="line">| but we can coerce the result <span class="keyword">to</span> POSIXlt <span class="keyword">with</span></span><br><span class="line">| <span class="keyword">as</span>.POSIXlt(Sys.time()). Give it a <span class="keyword">try</span> <span class="keyword">and</span> store the result</span><br><span class="line">| <span class="keyword">in</span> t2.</span><br><span class="line"></span><br><span class="line">&gt; t2&lt;-<span class="keyword">as</span>.POSIXlt(Sys.time())</span><br><span class="line"></span><br><span class="line">| Excellent job!</span><br><span class="line"></span><br><span class="line">  |======================                              |  <span class="number">43</span>%</span><br><span class="line"></span><br><span class="line">| Check the <span class="keyword">class</span> <span class="keyword">of</span> t2.</span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">class</span>(t2)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"POSIXlt"</span> <span class="string">"POSIXt"</span> </span><br><span class="line"></span><br><span class="line">| Keep working <span class="keyword">like</span> that <span class="keyword">and</span> you<span class="comment">'ll get there!</span></span><br><span class="line"></span><br><span class="line">  |========================                            |  <span class="number">46</span>%</span><br><span class="line"></span><br><span class="line">| Now view its contents.</span><br><span class="line"></span><br><span class="line">&gt; t2</span><br><span class="line">[<span class="number">1</span>] <span class="string">"2015-05-16 11:12:57 CST"</span></span><br><span class="line"></span><br><span class="line">| Nice work!</span><br><span class="line"></span><br><span class="line">  |=========================                           |  <span class="number">49</span>%</span><br><span class="line"></span><br><span class="line">| The printed format <span class="keyword">of</span> t2 <span class="keyword">is</span> identical <span class="keyword">to</span> that <span class="keyword">of</span> t1. Now</span><br><span class="line">| unclass() t2 <span class="keyword">to</span> see how it <span class="keyword">is</span> different internally.</span><br><span class="line"></span><br><span class="line">&gt; unclass(t2)</span><br><span class="line">$sec</span><br><span class="line">[<span class="number">1</span>] <span class="number">57.47574</span></span><br><span class="line"></span><br><span class="line">$min</span><br><span class="line">[<span class="number">1</span>] <span class="number">12</span></span><br><span class="line"></span><br><span class="line">$hour</span><br><span class="line">[<span class="number">1</span>] <span class="number">11</span></span><br><span class="line"></span><br><span class="line">$mday</span><br><span class="line">[<span class="number">1</span>] <span class="number">16</span></span><br><span class="line"></span><br><span class="line">$mon</span><br><span class="line">[<span class="number">1</span>] <span class="number">4</span></span><br><span class="line"></span><br><span class="line">$year</span><br><span class="line">[<span class="number">1</span>] <span class="number">115</span></span><br><span class="line"></span><br><span class="line">$wday</span><br><span class="line">[<span class="number">1</span>] <span class="number">6</span></span><br><span class="line"></span><br><span class="line">$yday</span><br><span class="line">[<span class="number">1</span>] <span class="number">135</span></span><br><span class="line"></span><br><span class="line">$isdst</span><br><span class="line">[<span class="number">1</span>] <span class="number">0</span></span><br><span class="line"></span><br><span class="line">$zone</span><br><span class="line">[<span class="number">1</span>] <span class="string">"CST"</span></span><br><span class="line"></span><br><span class="line">$gmtoff</span><br><span class="line">[<span class="number">1</span>] <span class="number">28800</span></span><br><span class="line"></span><br><span class="line">attr(,<span class="string">"tzone"</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="string">""</span>    <span class="string">"CST"</span> <span class="string">"CDT"</span></span><br><span class="line"></span><br><span class="line">| Nice work!</span><br><span class="line"></span><br><span class="line">  |===========================                         |  <span class="number">51</span>%</span><br><span class="line"></span><br><span class="line">| t2, <span class="keyword">like</span> all POSIXlt objects, <span class="keyword">is</span> just a list <span class="keyword">of</span> values that</span><br><span class="line">| make up the <span class="built_in">date</span> <span class="keyword">and</span> time. Use str(unclass(t2)) <span class="keyword">to</span> have a</span><br><span class="line">| more compact view.</span><br><span class="line"></span><br><span class="line">&gt; str(unclass(t2))</span><br><span class="line">List <span class="keyword">of</span> <span class="number">11</span></span><br><span class="line"> $ sec   : num <span class="number">57.5</span></span><br><span class="line"> $ min   : int <span class="number">12</span></span><br><span class="line"> $ hour  : int <span class="number">11</span></span><br><span class="line"> $ mday  : int <span class="number">16</span></span><br><span class="line"> $ mon   : int <span class="number">4</span></span><br><span class="line"> $ year  : int <span class="number">115</span></span><br><span class="line"> $ wday  : int <span class="number">6</span></span><br><span class="line"> $ yday  : int <span class="number">135</span></span><br><span class="line"> $ isdst : int <span class="number">0</span></span><br><span class="line"> $ zone  : chr <span class="string">"CST"</span></span><br><span class="line"> $ gmtoff: int <span class="number">28800</span></span><br><span class="line"> - attr(*, <span class="string">"tzone"</span>)= chr [<span class="number">1</span>:<span class="number">3</span>] <span class="string">""</span> <span class="string">"CST"</span> <span class="string">"CDT"</span></span><br><span class="line"></span><br><span class="line">| Great job!</span><br><span class="line"></span><br><span class="line">  |============================                        |  <span class="number">54</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">If</span>, <span class="keyword">for</span> example, we want just the minutes <span class="keyword">from</span> the time</span><br><span class="line">| stored <span class="keyword">in</span> t2, we can access them <span class="keyword">with</span> t2$min. Give it a</span><br><span class="line">| <span class="keyword">try</span>.</span><br><span class="line"></span><br><span class="line">&gt; t2$min</span><br><span class="line">[<span class="number">1</span>] <span class="number">12</span></span><br><span class="line"></span><br><span class="line">| Keep up the great work!</span><br><span class="line"></span><br><span class="line">  |==============================                      |  <span class="number">57</span>%</span><br><span class="line"></span><br><span class="line">| Now that we have explored all three types <span class="keyword">of</span> <span class="built_in">date</span> <span class="keyword">and</span> time</span><br><span class="line">| objects, <span class="keyword">let</span><span class="comment">'s look at a few functions that extract useful</span></span><br><span class="line">| information <span class="keyword">from</span> any <span class="keyword">of</span> these objects -- weekdays(),</span><br><span class="line">| months(), <span class="keyword">and</span> quarters().</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===============================                     |  <span class="number">60</span>%</span><br><span class="line"></span><br><span class="line">| The weekdays() <span class="keyword">function</span> will <span class="keyword">return</span> the day <span class="keyword">of</span> week <span class="keyword">from</span></span><br><span class="line">| any <span class="built_in">date</span> <span class="keyword">or</span> time <span class="built_in">object</span>. <span class="keyword">Try</span> it out <span class="keyword">on</span> d1, which <span class="keyword">is</span> the</span><br><span class="line">| <span class="built_in">Date</span> <span class="built_in">object</span> that contains today<span class="comment">'s date.</span></span><br><span class="line"></span><br><span class="line">&gt; weekdays(d1)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"Saturday"</span></span><br><span class="line"></span><br><span class="line">| You got it right!</span><br><span class="line"></span><br><span class="line">  |=================================                   |  <span class="number">63</span>%</span><br><span class="line"></span><br><span class="line">| The months() <span class="keyword">function</span> also works <span class="keyword">on</span> any <span class="built_in">date</span> <span class="keyword">or</span> time</span><br><span class="line">| <span class="built_in">object</span>. <span class="keyword">Try</span> it <span class="keyword">on</span> t1, which <span class="keyword">is</span> the POSIXct <span class="built_in">object</span> that</span><br><span class="line">| contains the current time (well, it was the current time</span><br><span class="line">| <span class="keyword">when</span> you created it).</span><br><span class="line"></span><br><span class="line">&gt; months(t1)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"May"</span></span><br><span class="line"></span><br><span class="line">| Excellent work!</span><br><span class="line"></span><br><span class="line">  |==================================                  |  <span class="number">66</span>%</span><br><span class="line"></span><br><span class="line">| The quarters() <span class="keyword">function</span> returns the quarter <span class="keyword">of</span> the year</span><br><span class="line">| (Q1-Q4) <span class="keyword">from</span> any <span class="built_in">date</span> <span class="keyword">or</span> time <span class="built_in">object</span>. <span class="keyword">Try</span> it <span class="keyword">on</span> t2, which</span><br><span class="line">| <span class="keyword">is</span> the POSIXlt <span class="built_in">object</span> that contains the time at which you</span><br><span class="line">| created it.</span><br><span class="line"></span><br><span class="line">&gt; quarters(t2)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"Q2"</span></span><br><span class="line"></span><br><span class="line">| Keep up the great work!</span><br><span class="line"></span><br><span class="line">  |====================================                |  <span class="number">69</span>%</span><br><span class="line"></span><br><span class="line">| Often, the dates <span class="keyword">and</span> times <span class="keyword">in</span> a dataset will be <span class="keyword">in</span> a format</span><br><span class="line">| that R does <span class="keyword">not</span> recognize. The strptime() <span class="keyword">function</span> can be</span><br><span class="line">| helpful <span class="keyword">in</span> this situation.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=====================================               |  <span class="number">71</span>%</span><br><span class="line"></span><br><span class="line">| strptime() converts character vectors <span class="keyword">to</span> POSIXlt. <span class="keyword">In</span> that</span><br><span class="line">| sense, it <span class="keyword">is</span> similar <span class="keyword">to</span> <span class="keyword">as</span>.POSIXlt(), except that the input</span><br><span class="line">| doesn<span class="comment">'t have to be in a particular format (YYYY-MM-DD).</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=======================================             |  <span class="number">74</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">To</span> see how it works, store the following character <span class="built_in">string</span></span><br><span class="line">| <span class="keyword">in</span> a variable called t3: <span class="string">"October 17, 1986 08:24"</span> (<span class="keyword">with</span> the</span><br><span class="line">| quotes).</span><br><span class="line"></span><br><span class="line">&gt; t3&lt;-<span class="string">"October 17, 1986 08:24"</span></span><br><span class="line"></span><br><span class="line">| You nailed it! Good job!</span><br><span class="line"></span><br><span class="line">  |========================================            |  <span class="number">77</span>%</span><br><span class="line"></span><br><span class="line">| Now, use strptime(t3, <span class="string">"%B %d, %Y %H:%M"</span>) <span class="keyword">to</span> help R convert</span><br><span class="line">| our <span class="built_in">date</span>/time <span class="built_in">object</span> <span class="keyword">to</span> a format that it understands.</span><br><span class="line">| Assign the result <span class="keyword">to</span> a <span class="keyword">new</span> variable called t4. (You should</span><br><span class="line">| pull up the documentation <span class="keyword">for</span> strptime() <span class="keyword">if</span> you<span class="comment">'d like to</span></span><br><span class="line">| know more about how it works.)</span><br><span class="line"></span><br><span class="line">&gt; ?strptime</span><br><span class="line">&gt; t4&lt;-strptime(t3,<span class="string">"%B %d, %Y %H:%M"</span>)</span><br><span class="line"></span><br><span class="line">| You are quite good my <span class="keyword">friend</span>!</span><br><span class="line"></span><br><span class="line">  |==========================================          |  <span class="number">80</span>%</span><br><span class="line"></span><br><span class="line">| Print the contents <span class="keyword">of</span> t4.</span><br><span class="line"></span><br><span class="line">&gt; t4</span><br><span class="line">[<span class="number">1</span>] <span class="string">"1986-10-17 08:24:00 CST"</span></span><br><span class="line"></span><br><span class="line">| Perseverance, that<span class="comment">'s the answer.</span></span><br><span class="line"></span><br><span class="line">  |===========================================         |  <span class="number">83</span>%</span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s the format we've come to expect. Now, let's check</span></span><br><span class="line">| its <span class="keyword">class</span>().</span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">class</span>(t4)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"POSIXlt"</span> <span class="string">"POSIXt"</span> </span><br><span class="line"></span><br><span class="line">| You<span class="comment">'re the best!</span></span><br><span class="line"></span><br><span class="line">  |=============================================       |  <span class="number">86</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Finally</span>, there are a number <span class="keyword">of</span> operations that you can</span><br><span class="line">| perform <span class="keyword">on</span> dates <span class="keyword">and</span> times, including arithmetic operations</span><br><span class="line">| (+ <span class="keyword">and</span> -) <span class="keyword">and</span> comparisons (&lt;, ==, etc.)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==============================================      |  <span class="number">89</span>%</span><br><span class="line"></span><br><span class="line">| The variable t1 contains the time at which you created it</span><br><span class="line">| (recall you used Sys.time()). Confirm that some time has</span><br><span class="line">| passed since you created t1 <span class="keyword">by</span> <span class="keyword">using</span> the <span class="comment">'greater than'</span></span><br><span class="line">| <span class="keyword">operator</span> <span class="keyword">to</span> <span class="keyword">compare</span> it <span class="keyword">to</span> the current time: Sys.time() &gt; t1</span><br><span class="line"></span><br><span class="line">&gt; Sys.time() &gt; t1</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s a job well done!</span></span><br><span class="line"></span><br><span class="line">  |================================================    |  <span class="number">91</span>%</span><br><span class="line"></span><br><span class="line">| So we know that some time has passed, but how much? <span class="keyword">Try</span></span><br><span class="line">| subtracting t1 <span class="keyword">from</span> the current time <span class="keyword">using</span> Sys.time() - t1.</span><br><span class="line">| Don<span class="comment">'t forget the parentheses at the end of Sys.time(),</span></span><br><span class="line">| since it <span class="keyword">is</span> a <span class="keyword">function</span>.</span><br><span class="line"></span><br><span class="line">&gt; Sys.time() - t1</span><br><span class="line">Time difference <span class="keyword">of</span> <span class="number">28.06015</span> mins</span><br><span class="line"></span><br><span class="line">| You are amazing!</span><br><span class="line"></span><br><span class="line">  |=================================================   |  <span class="number">94</span>%</span><br><span class="line"></span><br><span class="line">| The same line <span class="keyword">of</span> thinking applies <span class="keyword">to</span> addition <span class="keyword">and</span> the other</span><br><span class="line">| comparison operators. <span class="keyword">If</span> you want more control over the</span><br><span class="line">| units <span class="keyword">when</span> finding the above difference <span class="keyword">in</span> times, you can</span><br><span class="line">| use difftime(), which allows you <span class="keyword">to</span> specify a <span class="comment">'units'</span></span><br><span class="line">| parameter.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=================================================== |  <span class="number">97</span>%</span><br><span class="line"></span><br><span class="line">| Use difftime(Sys.time(), t1, units = <span class="comment">'days') to find the</span></span><br><span class="line">| amount <span class="keyword">of</span> time <span class="keyword">in</span> DAYS that has passed since you created</span><br><span class="line">| t1.</span><br><span class="line"></span><br><span class="line">&gt; difftime(Sys.time(),t1,units=<span class="comment">'days')</span></span><br><span class="line">Time difference <span class="keyword">of</span> <span class="number">0.02175513</span> days</span><br><span class="line"></span><br><span class="line">| You<span class="comment">'re the best!</span></span><br><span class="line"></span><br><span class="line">  |====================================================| <span class="number">100</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">In</span> this lesson, you learned how <span class="keyword">to</span> work <span class="keyword">with</span> dates <span class="keyword">and</span></span><br><span class="line">| times <span class="keyword">in</span> R. <span class="keyword">While</span> it <span class="keyword">is</span> important <span class="keyword">to</span> understand the basics,</span><br><span class="line">| <span class="keyword">if</span> you find yourself working <span class="keyword">with</span> dates <span class="keyword">and</span> times often,</span><br><span class="line">| you may want <span class="keyword">to</span> check out the lubridate package <span class="keyword">by</span> Hadley</span><br><span class="line">| Wickham.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">| Are you currently enrolled <span class="keyword">in</span> the Coursera course</span><br><span class="line">| associated <span class="keyword">with</span> this lesson?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: Yes</span><br><span class="line"><span class="number">2</span>: No</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">| You<span class="comment">'ve reached the end of this lesson! Returning to the</span></span><br><span class="line">| main menu...</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">| Please choose a course, <span class="keyword">or</span]]>
    </summary>
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[早晨7点12分]]></title>
    <link href="http://yoursite.com/2015/05/16/%E6%97%A9%E6%99%A87%E7%82%B912%E5%88%86/"/>
    <id>http://yoursite.com/2015/05/16/早晨7点12分/</id>
    <published>2015-05-16T02:39:52.000Z</published>
    <updated>2015-05-16T03:48:19.000Z</updated>
    <content type="html"><![CDATA[<p>时间已经默默走过零点，今天是我24岁生日。</p>
<p>假如我的生命有80年，那么24岁意味着什么？不妨进行一个简单的计算：24÷80=0.3，我的生命走过了十分之三，按照一天的时间来看，24时×0.3=7.2时，即早晨的7点12分。</p>
<p>7点12分，正是起床收拾好，准备出门，开始新的一天的时候。睡了一晚上，补充好了能量，迎接新的一天，拥抱最初的阳光，嗅到希望的味道。</p>
<a id="more"></a>
<p>7点12分，虽然心中满怀热忱地想要出门，可是未必能知道前进的方向。</p>
<p>出门，该去哪呢？</p>
<p>刚刚过去的这周三，实验室三个研三的学长顺利通过毕业答辩，我为他们感到高兴。同时，我的头顶上似乎挂了一个为期一年的倒计时时钟。这意味着，我离毕业答辩只有一年时间了，容我深入思考未来的自己能做什么的时间只有一年了，距我进入社会为人类的发展做出贡献的准备时间只有一年了。</p>
<p>想来我也是幸运的，虽然在学术方面没有取得很大进步是有许多遗憾的，但是我很高兴在进入研究生阶段学习的过程中接触到了心理学，学习了项目管理的知识，在音乐的观念影响下开始学习钢琴，曾经让我深感枯燥的历史成为了我近期最感兴趣的阅读方向，我也喜爱哲学和禅宗的一些思想，高尔夫练习场是我周末喜爱去放松锻炼的地方，每晚睡前看看明天有什么有趣的讲座、音乐会、话剧成了一种习惯。</p>
<p>中国哲学里对于“学”和“道”是有所区别的。“学”就是增长知识，进一步认识和理解客观事物。“道”则是心灵和内在修养的提高。我想，研究生阶段的我在“道”上的进步和成长要远多于在“学”上的进步，这和我本科期间的状态正好相反。而对于我所理解的本科和研究生阶段，我觉得本科应侧重于“道”，而研究生应侧重于“学”。现如今不知是我特立独行，还是教育上有些本末倒置，当然我希望我是个例外。</p>
<p>值得高兴的是，我拥有了最美丽的爱情。我的女朋友梦梦，是个善良、可爱、美丽、细心、聪明的女孩儿。能在美丽的厦门大学里遇见她，是我最大的收获。对我来说，没有什么东西能超过情感，亲情、爱情、友情最为可贵，这些情感对我最为重要。</p>
<p>已经凌晨一点多了，我不想过度熬夜，睡个好觉，定个明早7点12分的闹钟，醒来去继续寻找出门的方向。</p>
<p>末了，祝我自己生日快乐。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>时间已经默默走过零点，今天是我24岁生日。</p>
<p>假如我的生命有80年，那么24岁意味着什么？不妨进行一个简单的计算：24÷80=0.3，我的生命走过了十分之三，按照一天的时间来看，24时×0.3=7.2时，即早晨的7点12分。</p>
<p>7点12分，正是起床收拾好，准备出门，开始新的一天的时候。睡了一晚上，补充好了能量，迎接新的一天，拥抱最初的阳光，嗅到希望的味道。</p>]]>
    
    </summary>
    
      <category term="岁月" scheme="http://yoursite.com/tags/%E5%B2%81%E6%9C%88/"/>
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="个人随笔" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[swirl学习之九——Functions]]></title>
    <link href="http://yoursite.com/2015/05/13/swirl%E5%AD%A6%E4%B9%A09/"/>
    <id>http://yoursite.com/2015/05/13/swirl学习9/</id>
    <published>2015-05-12T16:48:25.000Z</published>
    <updated>2015-05-13T06:42:52.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">| Please choose a course, <span class="keyword">or</span> type <span class="number">0</span> <span class="keyword">to</span> <span class="keyword">exit</span> swirl.</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: R Programming</span><br><span class="line"><span class="number">2</span>: <span class="keyword">Take</span> <span class="keyword">me</span> <span class="keyword">to</span> the swirl course repository!</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">| Please choose a lesson, <span class="keyword">or</span> type <span class="number">0</span> <span class="keyword">to</span> <span class="keyword">return</span> <span class="keyword">to</span> course</span><br><span class="line">| menu.</span><br><span class="line"></span><br><span class="line"> <span class="number">1</span>: Basic Building Blocks      <span class="number">2</span>: Workspace <span class="keyword">and</span> Files     </span><br><span class="line"> <span class="number">3</span>: Sequences <span class="keyword">of</span> Numbers       <span class="number">4</span>: Vectors                 </span><br><span class="line"> <span class="number">5</span>: Missing Values             <span class="number">6</span>: Subsetting Vectors      </span><br><span class="line"> <span class="number">7</span>: Matrices <span class="keyword">and</span> Data Frames   <span class="number">8</span>: Logic                   </span><br><span class="line"> <span class="number">9</span>: Functions                 <span class="number">10</span>: lapply <span class="keyword">and</span> sapply       </span><br><span class="line"><span class="number">11</span>: vapply <span class="keyword">and</span> tapply         <span class="number">12</span>: Looking at Data         </span><br><span class="line"><span class="number">13</span>: Simulation                <span class="number">14</span>: Dates <span class="keyword">and</span> Times         </span><br><span class="line"><span class="number">15</span>: Base Graphics             </span><br><span class="line"></span><br><span class="line">Selection: <span class="number">9</span></span><br><span class="line"></span><br><span class="line">  |                                                  |   <span class="number">0</span>%</span><br><span class="line"></span><br><span class="line">| Functions are one <span class="keyword">of</span> the fundamental building blocks <span class="keyword">of</span></span><br><span class="line">| the R language. They are small pieces <span class="keyword">of</span> reusable code</span><br><span class="line">| that can be treated <span class="keyword">like</span> any other R <span class="built_in">object</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=                                                 |   <span class="number">2</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">If</span> you<span class="comment">'ve worked through any other part of this course,</span></span><br><span class="line">| you<span class="comment">'ve probably used some functions already. Functions</span></span><br><span class="line">| are usually characterized <span class="keyword">by</span> the name <span class="keyword">of</span> the <span class="keyword">function</span></span><br><span class="line">| followed <span class="keyword">by</span> parentheses.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==                                                |   <span class="number">4</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Let</span><span class="comment">'s try using a few basic functions just for fun. The</span></span><br><span class="line">| Sys.<span class="built_in">Date</span>() <span class="keyword">function</span> returns a <span class="built_in">string</span> representing today<span class="comment">'s</span></span><br><span class="line">| <span class="built_in">date</span>. Type Sys.<span class="built_in">Date</span>() below <span class="keyword">and</span> see what happens.</span><br><span class="line"></span><br><span class="line">&gt; Sys.<span class="built_in">Date</span>()</span><br><span class="line">[<span class="number">1</span>] <span class="string">"2015-05-13"</span></span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s a job well done!</span></span><br><span class="line"></span><br><span class="line">  |===                                               |   <span class="number">6</span>%</span><br><span class="line"></span><br><span class="line">| Most functions <span class="keyword">in</span> R <span class="keyword">return</span> a value. Functions <span class="keyword">like</span></span><br><span class="line">| Sys.<span class="built_in">Date</span>() <span class="keyword">return</span> a value based <span class="keyword">on</span> your computer<span class="comment">'s</span></span><br><span class="line">| environment, <span class="keyword">while</span> other functions manipulate input data</span><br><span class="line">| <span class="keyword">in</span> <span class="keyword">order</span> <span class="keyword">to</span> compute a <span class="keyword">return</span> value.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |====                                              |   <span class="number">8</span>%</span><br><span class="line"></span><br><span class="line">| The mean() <span class="keyword">function</span> takes a vector <span class="keyword">of</span> numbers <span class="keyword">as</span> input,</span><br><span class="line">| <span class="keyword">and</span> returns the average <span class="keyword">of</span> all <span class="keyword">of</span> the numbers <span class="keyword">in</span> the</span><br><span class="line">| input vector. Inputs <span class="keyword">to</span> functions are often called</span><br><span class="line">| arguments. Providing arguments <span class="keyword">to</span> a <span class="keyword">function</span> <span class="keyword">is</span> also</span><br><span class="line">| sometimes called passing arguments <span class="keyword">to</span> that <span class="keyword">function</span>.</span><br><span class="line">| Arguments you want <span class="keyword">to</span> pass <span class="keyword">to</span> a <span class="keyword">function</span> go inside the</span><br><span class="line">| <span class="keyword">function</span><span class="comment">'s parentheses. Try passing the argument c(2, 4,</span></span><br><span class="line">| <span class="number">5</span>) <span class="keyword">to</span> the mean() <span class="keyword">function</span>.</span><br><span class="line"></span><br><span class="line">&gt; mean(c(<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line">[<span class="number">1</span>] <span class="number">3.666667</span></span><br><span class="line"></span><br><span class="line">| Excellent work!</span><br><span class="line"></span><br><span class="line">  |=====                                             |  <span class="number">10</span>%</span><br><span class="line"></span><br><span class="line">| Functions usually <span class="keyword">take</span> arguments which are variables that</span><br><span class="line">| the <span class="keyword">function</span> operates <span class="keyword">on</span>. <span class="keyword">For</span> example, the mean()</span><br><span class="line">| <span class="keyword">function</span> takes a vector <span class="keyword">as</span> <span class="keyword">as</span> argument, <span class="keyword">like</span> <span class="keyword">in</span> the <span class="keyword">case</span></span><br><span class="line">| <span class="keyword">of</span> mean(c(<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>)). The mean() <span class="keyword">function</span> <span class="keyword">then</span> adds up all</span><br><span class="line">| <span class="keyword">of</span> the numbers <span class="keyword">in</span> the vector <span class="keyword">and</span> divides that sum <span class="keyword">by</span> the</span><br><span class="line">| length <span class="keyword">of</span> the vector.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |======                                            |  <span class="number">12</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">In</span> the following question you will be asked <span class="keyword">to</span> modify a</span><br><span class="line">| script that will appear <span class="keyword">as</span> soon <span class="keyword">as</span> you move <span class="keyword">on</span> <span class="keyword">from</span> this</span><br><span class="line">| question. <span class="keyword">When</span> you have finished modifying the script,</span><br><span class="line">| save your changes <span class="keyword">to</span> the script <span class="keyword">and</span> type submit() <span class="keyword">and</span> the</span><br><span class="line">| script will be evaluated. There will be some comments <span class="keyword">in</span></span><br><span class="line">| the script that opens up, so be sure <span class="keyword">to</span> read them!</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=======                                           |  <span class="number">15</span>%</span><br><span class="line"></span><br><span class="line">| The last R expression <span class="keyword">to</span> be evaluated <span class="keyword">in</span> a <span class="keyword">function</span> will</span><br><span class="line">| become the <span class="keyword">return</span> value <span class="keyword">of</span> that <span class="keyword">function</span>. We want this</span><br><span class="line">| <span class="keyword">function</span> <span class="keyword">to</span> <span class="keyword">take</span> one argument, x, <span class="keyword">and</span> <span class="keyword">return</span> x without</span><br><span class="line">| modifying it. Delete the pound sign so that x <span class="keyword">is</span> returned</span><br><span class="line">| without any modification. Make sure <span class="keyword">to</span> save your script</span><br><span class="line">| before you type submit().</span><br></pre></td></tr></table></figure>
<p>—&gt;boring_function.R:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># You're about to write your first function! Just like you would assign a value </span></span><br><span class="line"><span class="comment"># to a variable with the assignment operator, you assign functions in the following</span></span><br><span class="line"><span class="comment"># way:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># function_name &lt;- function(arg1, arg2)&#123;</span></span><br><span class="line"><span class="comment">#	# Maipulate arguments in some way</span></span><br><span class="line"><span class="comment">#	# Return a value</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The "variable name" you assign will become the name of your function. arg1 and</span></span><br><span class="line"><span class="comment"># arg2 represent the arguments of your function. You can maipulate the arguments</span></span><br><span class="line"><span class="comment"># you specify within the function. After sourcing the function, you can use the </span></span><br><span class="line"><span class="comment"># function by typing:</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># function_name(value1, value2)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Below we will create a function called boring_function. This function takes</span></span><br><span class="line"><span class="comment"># the argument `x` as input, and returns the value of x without modifying it.</span></span><br><span class="line"><span class="comment"># Delete the pound sign in front of the x to make the function work! Be sure to </span></span><br><span class="line"><span class="comment"># save this script and type submit() in the console after you make your changes.</span></span><br><span class="line"></span><br><span class="line">boring_function &lt;- <span class="function"><span class="keyword">function</span><span class="params">(x)</span> </span>&#123;</span><br><span class="line">  x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&gt; submit()</span><br><span class="line"></span><br><span class="line">| Sourcing your <span class="keyword">script</span>...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">| That's <span class="keyword">the</span> answer I was looking <span class="keyword">for</span>.</span><br><span class="line"></span><br><span class="line">  |========                                          |  <span class="number">17</span>%</span><br><span class="line"></span><br><span class="line">| Now <span class="keyword">that</span> you've created your <span class="keyword">first</span> function let's test</span><br><span class="line">| <span class="keyword">it</span>! Type: boring_function('My <span class="keyword">first</span> function!'). If your</span><br><span class="line">| function works, <span class="keyword">it</span> should just <span class="constant">return</span> <span class="keyword">the</span> <span class="type">string</span>: 'My</span><br><span class="line">| <span class="keyword">first</span> function!'</span><br><span class="line"></span><br><span class="line">&gt; boring_function('My <span class="keyword">first</span> function!')</span><br><span class="line">[<span class="number">1</span>] <span class="string">"My first function!"</span></span><br><span class="line"></span><br><span class="line">| That's correct!</span><br><span class="line"></span><br><span class="line">  |=========                                         |  <span class="number">19</span>%</span><br><span class="line"></span><br><span class="line">| Congratulations <span class="function_start"><span class="keyword">on</span></span> writing your <span class="keyword">first</span> function. By</span><br><span class="line">| writing functions, you can gain serious insight <span class="keyword">into</span> how</span><br><span class="line">| R works. As John Chambers, <span class="keyword">the</span> creator <span class="keyword">of</span> R once said:</span><br><span class="line">| </span><br><span class="line">| To understand computations <span class="keyword">in</span> R, two slogans are helpful:</span><br><span class="line">| <span class="number">1.</span> Everything <span class="keyword">that</span> exists <span class="keyword">is</span> an object. <span class="number">2.</span> Everything</span><br><span class="line">| <span class="keyword">that</span> happens <span class="keyword">is</span> a function call.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==========                                        |  <span class="number">21</span>%</span><br><span class="line"></span><br><span class="line">| If you want <span class="keyword">to</span> see <span class="keyword">the</span> source code <span class="keyword">for</span> any function, just</span><br><span class="line">| type <span class="keyword">the</span> function <span class="property">name</span> <span class="keyword">without</span> any arguments <span class="keyword">or</span></span><br><span class="line">| parentheses. Let's <span class="keyword">try</span> this out <span class="keyword">with</span> <span class="keyword">the</span> function you</span><br><span class="line">| just created. Type: boring_function <span class="keyword">to</span> view <span class="keyword">its</span> source</span><br><span class="line">| code.</span><br><span class="line"></span><br><span class="line">&gt; boring_function</span><br><span class="line">function(x) &#123;</span><br><span class="line">  x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">| Perseverance, <span class="keyword">that</span>'s <span class="keyword">the</span> answer.</span><br><span class="line"></span><br><span class="line">  |===========                                       |  <span class="number">23</span>%</span><br><span class="line"></span><br><span class="line">| Time <span class="keyword">to</span> make a more useful function! We're going <span class="keyword">to</span></span><br><span class="line">| replicate <span class="keyword">the</span> functionality <span class="keyword">of</span> <span class="keyword">the</span> mean() function <span class="keyword">by</span></span><br><span class="line">| creating a function called: my_mean(). Remember <span class="keyword">that</span> <span class="keyword">to</span></span><br><span class="line">| calculate <span class="keyword">the</span> average <span class="keyword">of</span> all <span class="keyword">of</span> <span class="keyword">the</span> numbers <span class="keyword">in</span> a vector</span><br><span class="line">| you find <span class="keyword">the</span> sum <span class="keyword">of</span> all <span class="keyword">the</span> numbers <span class="keyword">in</span> <span class="keyword">the</span> vector, <span class="keyword">and</span></span><br><span class="line">| <span class="keyword">then</span> divide <span class="keyword">that</span> sum <span class="keyword">by</span> <span class="keyword">the</span> <span class="type">number</span> <span class="keyword">of</span> numbers <span class="keyword">in</span> <span class="keyword">the</span></span><br><span class="line">| vector.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |============                                      |  <span class="number">25</span>%</span><br><span class="line"></span><br><span class="line">| Make sure <span class="keyword">to</span> save your <span class="keyword">script</span> <span class="keyword">before</span> you type submit().</span><br></pre></td></tr></table></figure>
<p>—&gt;my_mean.R:</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment"># You're free to implement the function my_mean however you want, as long as it</span></span><br><span class="line"><span class="comment"># returns the average of all of the numbers in `my_vector`.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Hint #1: sum() returns the sum of a vector.</span></span><br><span class="line"><span class="comment"># 	Ex: sum(c(1, 2, 3)) evaluates to 6</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Hint #2: length() returns the size of a vector.</span></span><br><span class="line"><span class="comment"># 	Ex: length(c(1, 2, 3)) evaluates to 3</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Hint #3: The mean of all the numbers in a vector is equal to the sum of all of</span></span><br><span class="line"><span class="comment">#		   the numbers in the vector divided by the size of the vector.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note for those of you feeling super clever: Please do not use the mean()</span></span><br><span class="line"><span class="comment"># function while writing this function. We're trying to teach you something </span></span><br><span class="line"><span class="comment"># here!</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Be sure to save this script and type submit() in the console after you make </span></span><br><span class="line"><span class="comment"># your changes.</span></span><br><span class="line"></span><br><span class="line">my_mean &lt;- <span class="function"><span class="keyword">function</span>(<span class="title">my_vector</span>) &#123;</span></span><br><span class="line">  <span class="comment"># Write your code here!</span></span><br><span class="line">  <span class="comment"># Remember: the last expression evaluated will be returned! </span></span><br><span class="line">  <span class="built_in">sum</span>(my_vector)/<span class="built_in">length</span>(my_vector)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">&gt; submit()</span><br><span class="line"></span><br><span class="line">| Sourcing your script...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">| Nice work!</span><br><span class="line"></span><br><span class="line">  |==============                                    |  <span class="number">27</span>%</span><br><span class="line"></span><br><span class="line">| Now test <span class="keyword">out</span> your my_mean() <span class="keyword">function</span> by finding the mean</span><br><span class="line">| <span class="keyword">of</span> the vector c(<span class="number">4</span>, <span class="number">5</span>, <span class="number">10</span>).</span><br><span class="line"></span><br><span class="line">&gt; my_mean(c(<span class="number">4</span>,<span class="number">5</span>,<span class="number">10</span>))</span><br><span class="line">[<span class="number">1</span>] <span class="number">6.333333</span></span><br><span class="line"></span><br><span class="line">| Your dedication <span class="keyword">is</span> inspiring!</span><br><span class="line"></span><br><span class="line">  |===============                                   |  <span class="number">29</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Next</span>, let<span class="attribute">'s</span> try writing a <span class="keyword">function</span> <span class="keyword">with</span> <span class="keyword">default</span></span><br><span class="line">| arguments. You can set <span class="keyword">default</span> values <span class="keyword">for</span> a <span class="keyword">function</span><span class="attribute">'s</span></span><br><span class="line">| argumets, <span class="keyword">and</span> this can be useful <span class="keyword">if</span> you think someone who</span><br><span class="line">| uses your <span class="keyword">function</span> will set a certain argument <span class="keyword">to</span> the</span><br><span class="line">| same value most <span class="keyword">of</span> the <span class="typename">time</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |================                                  |  <span class="number">31</span>%</span><br><span class="line"></span><br><span class="line">| Make sure <span class="keyword">to</span> save your script before you <span class="keyword">type</span> submit().</span><br></pre></td></tr></table></figure>
<p>—&gt;remainder.R:</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Let me show you an example of a function I'm going to make up called</span></span><br><span class="line"><span class="comment"># increment(). Most of the time I want to use this function to increase the</span></span><br><span class="line"><span class="comment"># value of a number by one. This function will take two arguments: "number" and</span></span><br><span class="line"><span class="comment"># "by" where "number" is the digit I want to increment and "by" is the amount I</span></span><br><span class="line"><span class="comment"># want to increment "number" by. I've written the function below. </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># increment &lt;- function(number, by = 1)&#123;</span></span><br><span class="line"><span class="comment">#     number + by</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you take a look in between the parentheses you can see that I've set</span></span><br><span class="line"><span class="comment"># "by" equal to 1. This means that the "by" argument will have the default</span></span><br><span class="line"><span class="comment"># value of 1.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># I can now use the increment function without providing a value for "by": </span></span><br><span class="line"><span class="comment"># increment(5) will evaluate to 6. </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However if I want to provide a value for the "by" argument I still can! The</span></span><br><span class="line"><span class="comment"># expression: increment(5, 2) will evaluate to 7. </span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># You're going to write a function called "remainder." remainder() will take</span></span><br><span class="line"><span class="comment"># two arguments: "num" and "divisor" where "num" is divided by "divisor" and</span></span><br><span class="line"><span class="comment"># the remainder is returned. Imagine that you usually want to know the remainder</span></span><br><span class="line"><span class="comment"># when you divide by 2, so set the default value of "divisor" to 2. Please be</span></span><br><span class="line"><span class="comment"># sure that "num" is the first argument and "divisor" is the second argument.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Hint #1: You can use the modulus operator %% to find the remainder.</span></span><br><span class="line"><span class="comment">#   Ex: 7 %% 4 evaluates to 3. </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Remember to set appropriate default values! Be sure to save this </span></span><br><span class="line"><span class="comment"># script and type submit() in the console after you write the function.</span></span><br><span class="line"></span><br><span class="line">remainder &lt;- <span class="function"><span class="keyword">function</span>(<span class="title">num</span>, <span class="title">divisor</span>=<span class="title">2</span>) &#123;</span></span><br><span class="line">  <span class="comment"># Write your code here!</span></span><br><span class="line">  <span class="comment"># Remember: the last expression evaluated will be returned! </span></span><br><span class="line">  <span class="built_in">num</span> %% divisor</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">&gt; submit()</span><br><span class="line"></span><br><span class="line">| Sourcing your script...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">| You<span class="comment">'re the best!</span></span><br><span class="line"></span><br><span class="line">  |=================                                 |  <span class="number">33</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Let</span><span class="comment">'s do some testing of the remainder function. Run</span></span><br><span class="line">| remainder(<span class="number">5</span>) <span class="keyword">and</span> see what happens.</span><br><span class="line"></span><br><span class="line">&gt; remainder(<span class="number">5</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span></span><br><span class="line"></span><br><span class="line">| Excellent job!</span><br><span class="line"></span><br><span class="line">  |==================                                |  <span class="number">35</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Let</span><span class="comment">'s take a moment to examine what just happened. You</span></span><br><span class="line">| provided one argument <span class="keyword">to</span> the <span class="keyword">function</span>, <span class="keyword">and</span> R matched that</span><br><span class="line">| argument <span class="keyword">to</span> <span class="comment">'num' since 'num' is the first argument. The</span></span><br><span class="line">| <span class="keyword">default</span> value <span class="keyword">for</span> <span class="comment">'divisor' is 2, so the function used</span></span><br><span class="line">| the <span class="keyword">default</span> value you provided.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===================                               |  <span class="number">38</span>%</span><br><span class="line"></span><br><span class="line">| Now <span class="keyword">let</span><span class="comment">'s test the remainder function by providing two</span></span><br><span class="line">| arguments. Type: remainder(<span class="number">11</span>, <span class="number">5</span>) <span class="keyword">and</span> <span class="keyword">let</span><span class="comment">'s see what</span></span><br><span class="line">| happens.</span><br><span class="line"></span><br><span class="line">&gt; remainder(<span class="number">11</span>,<span class="number">5</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span></span><br><span class="line"></span><br><span class="line">| Excellent work!</span><br><span class="line"></span><br><span class="line">  |====================                              |  <span class="number">40</span>%</span><br><span class="line"></span><br><span class="line">| Once again, the arguments have been matched</span><br><span class="line">| appropriately.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=====================                             |  <span class="number">42</span>%</span><br><span class="line"></span><br><span class="line">| You can also explicitly specify arguments <span class="keyword">in</span> a <span class="keyword">function</span>.</span><br><span class="line">| <span class="keyword">When</span> you explicitly designate argument values <span class="keyword">by</span> name,</span><br><span class="line">| the ordering <span class="keyword">of</span> the arguments becomes unimportant. You</span><br><span class="line">| can <span class="keyword">try</span> this out <span class="keyword">by</span> typing: remainder(divisor = <span class="number">11</span>, num =</span><br><span class="line">| <span class="number">5</span>).</span><br><span class="line"></span><br><span class="line">&gt; remainder(divisor=<span class="number">11</span>,num=<span class="number">5</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="number">5</span></span><br><span class="line"></span><br><span class="line">| You are really <span class="keyword">on</span> a roll!</span><br><span class="line"></span><br><span class="line">  |======================                            |  <span class="number">44</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">As</span> you can see, there <span class="keyword">is</span> a significant difference between</span><br><span class="line">| remainder(<span class="number">11</span>, <span class="number">5</span>) <span class="keyword">and</span> remainder(divisor = <span class="number">11</span>, num = <span class="number">5</span>)!</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=======================                           |  <span class="number">46</span>%</span><br><span class="line"></span><br><span class="line">| R can also partially match arguments. <span class="keyword">Try</span> typing</span><br><span class="line">| remainder(<span class="number">4</span>, div = <span class="number">2</span>) <span class="keyword">to</span> see this feature <span class="keyword">in</span> action.</span><br><span class="line"></span><br><span class="line">&gt; remainder(<span class="number">4</span>,div=<span class="number">2</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="number">0</span></span><br><span class="line"></span><br><span class="line">| Perseverance, that<span class="comment">'s the answer.</span></span><br><span class="line"></span><br><span class="line">  |========================                          |  <span class="number">48</span>%</span><br><span class="line"></span><br><span class="line">| A word <span class="keyword">of</span> warning: <span class="keyword">in</span> general you want <span class="keyword">to</span> make your code</span><br><span class="line">| <span class="keyword">as</span> easy <span class="keyword">to</span> understand <span class="keyword">as</span> possible. Switching around the</span><br><span class="line">| orders <span class="keyword">of</span> arguments <span class="keyword">by</span> specifying their names <span class="keyword">or</span> only</span><br><span class="line">| <span class="keyword">using</span> <span class="keyword">partial</span> argument names can be confusing, so use</span><br><span class="line">| these features <span class="keyword">with</span> caution!</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=========================                         |  <span class="number">50</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">With</span> all <span class="keyword">of</span> this talk about arguments, you may be</span><br><span class="line">| wondering <span class="keyword">if</span> there <span class="keyword">is</span> a way you can see a <span class="keyword">function</span><span class="comment">'s</span></span><br><span class="line">| arguments (besides looking at the documentation).</span><br><span class="line">| Thankfully, you can use the args() <span class="keyword">function</span>! Type:</span><br><span class="line">| args(remainder) <span class="keyword">to</span> examine the arguments <span class="keyword">for</span> the</span><br><span class="line">| remainder <span class="keyword">function</span>.</span><br><span class="line"></span><br><span class="line">&gt; args(remainder)</span><br><span class="line"><span class="keyword">function</span> (num, divisor = <span class="number">2</span>) </span><br><span class="line">NULL</span><br><span class="line"></span><br><span class="line">| All that practice <span class="keyword">is</span> paying <span class="keyword">off</span>!</span><br><span class="line"></span><br><span class="line">  |==========================                        |  <span class="number">52</span>%</span><br><span class="line"></span><br><span class="line">| You may <span class="keyword">not</span> realize it but I just tricked you <span class="keyword">into</span> doing</span><br><span class="line">| something pretty interesting! args() <span class="keyword">is</span> a <span class="keyword">function</span>,</span><br><span class="line">| remainder() <span class="keyword">is</span> a <span class="keyword">function</span>, yet remainder was an argument</span><br><span class="line">| <span class="keyword">for</span> args(). Yes it<span class="comment">'s true: you can pass functions as</span></span><br><span class="line">| arguments! This <span class="keyword">is</span> a very powerful concept. <span class="keyword">Let</span><span class="comment">'s write a</span></span><br><span class="line">| script <span class="keyword">to</span> see how it works.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===========================                       |  <span class="number">54</span>%</span><br><span class="line"></span><br><span class="line">| Make sure <span class="keyword">to</span> save your script before you type submit().</span><br></pre></td></tr></table></figure>
<p>—&gt;evaluate.R:</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor"># You can pass functions as arguments to other functions just like you can pass</span></span><br><span class="line"><span class="preprocessor"># data to functions. Let's say you define the following functions:</span></span><br><span class="line"><span class="preprocessor">#</span></span><br><span class="line"><span class="preprocessor"># add_two_numbers &lt;- function(num1, num2)&#123;</span></span><br><span class="line"><span class="preprocessor">#    num1 + num2</span></span><br><span class="line"><span class="preprocessor"># &#125;</span></span><br><span class="line"><span class="preprocessor">#</span></span><br><span class="line"><span class="preprocessor"># multiply_two_numbers &lt;- function(num1, num2)&#123;</span></span><br><span class="line"><span class="preprocessor">#	num1 * num2</span></span><br><span class="line"><span class="preprocessor"># &#125;</span></span><br><span class="line"><span class="preprocessor">#</span></span><br><span class="line"><span class="preprocessor"># some_function &lt;- function(func)&#123;</span></span><br><span class="line"><span class="preprocessor">#    func(2, 4)</span></span><br><span class="line"><span class="preprocessor"># &#125;</span></span><br><span class="line"><span class="preprocessor">#</span></span><br><span class="line"><span class="preprocessor"># As you can see we use the argument name "func" like a function inside of </span></span><br><span class="line"><span class="preprocessor"># "some_function()." By passing functions as arguments </span></span><br><span class="line"><span class="preprocessor"># some_function(add_two_numbers) will evaluate to 6, while</span></span><br><span class="line"><span class="preprocessor"># some_function(multiply_two_numbers) will evaluate to 8.</span></span><br><span class="line"><span class="preprocessor"># </span></span><br><span class="line"><span class="preprocessor"># Finish the function definition below so that if a function is passed into the</span></span><br><span class="line"><span class="preprocessor"># "func" argument and some data (like a vector) is passed into the dat argument</span></span><br><span class="line"><span class="preprocessor"># the evaluate() function will return the result of dat being passed as an</span></span><br><span class="line"><span class="preprocessor"># argument to func.</span></span><br><span class="line"><span class="preprocessor">#</span></span><br><span class="line"><span class="preprocessor"># Hints: This exercise is a little tricky so I'll provide a few example of how</span></span><br><span class="line"><span class="preprocessor"># evaluate() should act:</span></span><br><span class="line"><span class="preprocessor">#    1. evaluate(sum, c(2, 4, 6)) should evaluate to 12</span></span><br><span class="line"><span class="preprocessor">#    2. evaluate(median, c(7, 40, 9)) should evaluate to 9</span></span><br><span class="line"><span class="preprocessor">#    3. evaluate(floor, 11.1) should evaluate to 11</span></span><br><span class="line"></span><br><span class="line">evaluate &lt;- function(func, dat)&#123;</span><br><span class="line">  # Write your code here!</span><br><span class="line">  # Remember: the last expression evaluated will be returned! </span><br><span class="line">  func(dat)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">&gt; submit()</span><br><span class="line"></span><br><span class="line">| Sourcing your <span class="keyword">script</span>...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">| Keep working like <span class="keyword">that</span> <span class="keyword">and</span> you'll <span class="keyword">get</span> there!</span><br><span class="line"></span><br><span class="line">  |============================                      |  <span class="number">56</span>%</span><br><span class="line"></span><br><span class="line">| Let's take your new evaluate() function <span class="keyword">for</span> a spin! Use</span><br><span class="line">| evaluate <span class="keyword">to</span> find <span class="keyword">the</span> standard deviation <span class="keyword">of</span> <span class="keyword">the</span> vector</span><br><span class="line">| c(<span class="number">1.4</span>, <span class="number">3.6</span>, <span class="number">7.9</span>, <span class="number">8.8</span>).</span><br><span class="line"></span><br><span class="line">&gt; evaluate(sd,c(<span class="number">1.4</span>,<span class="number">3.6</span>,<span class="number">7.9</span>,<span class="number">8.8</span>))</span><br><span class="line">[<span class="number">1</span>] <span class="number">3.514138</span></span><br><span class="line"></span><br><span class="line">| You're <span class="keyword">the</span> best!</span><br><span class="line"></span><br><span class="line">  |=============================                     |  <span class="number">58</span>%</span><br><span class="line"></span><br><span class="line">| The idea <span class="keyword">of</span> passing functions <span class="keyword">as</span> arguments <span class="keyword">to</span> other</span><br><span class="line">| functions <span class="keyword">is</span> an important <span class="keyword">and</span> fundamental concept <span class="keyword">in</span></span><br><span class="line">| programming.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==============================                    |  <span class="number">60</span>%</span><br><span class="line"></span><br><span class="line">| You may be surprised <span class="keyword">to</span> learn <span class="keyword">that</span> you can pass a</span><br><span class="line">| function <span class="keyword">as</span> an argument <span class="keyword">without</span> <span class="keyword">first</span> defining <span class="keyword">the</span> passed</span><br><span class="line">| function. Functions <span class="keyword">that</span> are <span class="keyword">not</span> named are appropriately</span><br><span class="line">| known <span class="keyword">as</span> anonymous functions.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===============================                   |  <span class="number">62</span>%</span><br><span class="line"></span><br><span class="line">| Let's use <span class="keyword">the</span> evaluate function <span class="keyword">to</span> explore how anonymous</span><br><span class="line">| functions work. For <span class="keyword">the</span> <span class="keyword">first</span> argument <span class="keyword">of</span> <span class="keyword">the</span> evaluate</span><br><span class="line">| function we're going <span class="keyword">to</span> <span class="command">write</span> a tiny function <span class="keyword">that</span> fits</span><br><span class="line">| <span class="function_start"><span class="keyword">on</span></span> one line. In <span class="keyword">the</span> <span class="keyword">second</span> argument we'll pass <span class="keyword">some</span> data</span><br><span class="line">| <span class="keyword">to</span> <span class="keyword">the</span> tiny anonymous function <span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">first</span> argument.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |================================                  |  <span class="number">65</span>%</span><br><span class="line"></span><br><span class="line">| Type <span class="keyword">the</span> following command <span class="keyword">and</span> <span class="keyword">then</span> we'll discuss how <span class="keyword">it</span></span><br><span class="line">| works: evaluate(function(x)&#123;x+<span class="number">1</span>&#125;, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">&gt; evaluate(function(x)&#123;x+<span class="number">1</span>&#125;,<span class="number">6</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="number">7</span></span><br><span class="line"></span><br><span class="line">| That's <span class="keyword">the</span> answer I was looking <span class="keyword">for</span>.</span><br><span class="line"></span><br><span class="line">  |=================================                 |  <span class="number">67</span>%</span><br><span class="line"></span><br><span class="line">| The <span class="keyword">first</span> argument <span class="keyword">is</span> a tiny anonymous function <span class="keyword">that</span></span><br><span class="line">| takes one argument `x` <span class="keyword">and</span> returns `x+<span class="number">1</span>`. We passed <span class="keyword">the</span></span><br><span class="line">| <span class="type">number</span> <span class="number">6</span> <span class="keyword">into</span> this function so <span class="keyword">the</span> entire expression</span><br><span class="line">| evaluates <span class="keyword">to</span> <span class="number">7.</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==================================                |  <span class="number">69</span>%</span><br><span class="line"></span><br><span class="line">| Try using evaluate() along <span class="keyword">with</span> an anonymous function <span class="keyword">to</span></span><br><span class="line">| <span class="constant">return</span> <span class="keyword">the</span> <span class="keyword">first</span> element <span class="keyword">of</span> <span class="keyword">the</span> vector c(<span class="number">8</span>, <span class="number">4</span>, <span class="number">0</span>). Your</span><br><span class="line">| anonymous function should only take one argument which</span><br><span class="line">| should be a variable `x`.</span><br><span class="line"></span><br><span class="line">&gt; evaluate(function(x)&#123;x[<span class="number">1</span>]&#125;,c(<span class="number">8</span>,<span class="number">4</span>,<span class="number">0</span>))</span><br><span class="line">[<span class="number">1</span>] <span class="number">8</span></span><br><span class="line"></span><br><span class="line">| Nice work!</span><br><span class="line"></span><br><span class="line">  |===================================               |  <span class="number">71</span>%</span><br><span class="line"></span><br><span class="line">| Now <span class="keyword">try</span> using evaluate() along <span class="keyword">with</span> an anonymous function</span><br><span class="line">| <span class="keyword">to</span> <span class="constant">return</span> <span class="keyword">the</span> <span class="keyword">last</span> element <span class="keyword">of</span> <span class="keyword">the</span> vector c(<span class="number">8</span>, <span class="number">4</span>, <span class="number">0</span>). Your</span><br><span class="line">| anonymous function should only take one argument which</span><br><span class="line">| should be a variable `x`.</span><br><span class="line"></span><br><span class="line">&gt; evaluate(function(x)&#123;x[<span class="property">length</span>(x)]&#125;,c(<span class="number">8</span>,<span class="number">4</span>,<span class="number">0</span>))</span><br><span class="line">[<span class="number">1</span>] <span class="number">0</span></span><br><span class="line"></span><br><span class="line">| Excellent job!</span><br><span class="line"></span><br><span class="line">  |====================================              |  <span class="number">73</span>%</span><br><span class="line"></span><br><span class="line">| For <span class="keyword">the</span> <span class="property">rest</span> <span class="keyword">of</span> <span class="keyword">the</span> course we're going <span class="keyword">to</span> use <span class="keyword">the</span> paste()</span><br><span class="line">| function frequently. Type ?paste so we can take a look <span class="keyword">at</span></span><br><span class="line">| <span class="keyword">the</span> documentation <span class="keyword">for</span> <span class="keyword">the</span> paste function.</span><br><span class="line"></span><br><span class="line">&gt; ?paste</span><br><span class="line"></span><br><span class="line">| You got <span class="keyword">it</span> right!</span><br><span class="line"></span><br><span class="line">  |======================================            |  <span class="number">75</span>%</span><br><span class="line"></span><br><span class="line">| As you can see <span class="keyword">the</span> <span class="keyword">first</span> argument <span class="keyword">of</span> paste() <span class="keyword">is</span> `...`</span><br><span class="line">| which <span class="keyword">is</span> referred <span class="keyword">to</span> <span class="keyword">as</span> an ellipsis <span class="keyword">or</span> simply</span><br><span class="line">| dot-dot-dot. The ellipsis allows an indefinite <span class="type">number</span> <span class="keyword">of</span></span><br><span class="line">| arguments <span class="keyword">to</span> be passed <span class="keyword">into</span> a function. In <span class="keyword">the</span> case <span class="keyword">of</span></span><br><span class="line">| paste() any <span class="type">number</span> <span class="keyword">of</span> strings can be passed <span class="keyword">as</span> arguments</span><br><span class="line">| <span class="keyword">and</span> paste() will <span class="constant">return</span> all <span class="keyword">of</span> <span class="keyword">the</span> strings combined <span class="keyword">into</span></span><br><span class="line">| one <span class="type">string</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=======================================           |  <span class="number">77</span>%</span><br><span class="line"></span><br><span class="line">| Just <span class="keyword">to</span> see how paste() works, type paste(<span class="string">"Programming"</span>,</span><br><span class="line">| <span class="string">"is"</span>, <span class="string">"fun!"</span>)</span><br><span class="line"></span><br><span class="line">&gt; paste(<span class="string">"Programming"</span>,<span class="string">"is"</span>,<span class="string">"fun!"</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"Programming is fun!"</span></span><br><span class="line"></span><br><span class="line">| Excellent job!</span><br><span class="line"></span><br><span class="line">  |========================================          |  <span class="number">79</span>%</span><br><span class="line"></span><br><span class="line">| Time <span class="keyword">to</span> <span class="command">write</span> our own modified <span class="property">version</span> <span class="keyword">of</span> paste().</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=========================================         |  <span class="number">81</span>%</span><br><span class="line"></span><br><span class="line">| Make sure <span class="keyword">to</span> save your <span class="keyword">script</span> <span class="keyword">before</span> you type submit().</span><br></pre></td></tr></table></figure>
<p>—&gt;telegram.R:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># The ellipses can be used to pass on arguments to other functions that are</span></span><br><span class="line"><span class="comment"># used within the function you're writing. Usually a function that has the</span></span><br><span class="line"><span class="comment"># ellipses as an argument has the ellipses as the last argument. The usage of</span></span><br><span class="line"><span class="comment"># such a function would look like:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ellipses_func(arg1, arg2 = TRUE, ...)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In the above example arg1 has no default value, so a value must be provided</span></span><br><span class="line"><span class="comment"># for arg1. arg2 has a default value, and other arguments can come after arg2</span></span><br><span class="line"><span class="comment"># depending on how they're defined in the ellipses_func() documentation.</span></span><br><span class="line"><span class="comment"># Interestingly the usage for the paste function is as follows:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># paste (..., sep = " ", collapse = NULL)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Notice that the ellipses is the first argument, and all other arguments after</span></span><br><span class="line"><span class="comment"># the ellipses have default values. This is a strict rule in R programming: all</span></span><br><span class="line"><span class="comment"># arguments after an ellipses must have default values. Take a look at the</span></span><br><span class="line"><span class="comment"># simon_says function below:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># simon_says &lt;- function(...)&#123;</span></span><br><span class="line"><span class="comment">#   paste("Simon says:", ...)</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The simon_says function works just like the paste function, except the</span></span><br><span class="line"><span class="comment"># begining of every string is prepended by the string "Simon says:"</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Telegrams used to be peppered with the words START and STOP in order to</span></span><br><span class="line"><span class="comment"># demarcate the beginning and end of sentences. Write a function below called </span></span><br><span class="line"><span class="comment"># telegram that formats sentences for telegrams.</span></span><br><span class="line"><span class="comment"># For example the expression `telegram("Good", "morning")` should evaluate to:</span></span><br><span class="line"><span class="comment"># "START Good morning STOP"</span></span><br><span class="line"></span><br><span class="line">telegram &lt;- <span class="function"><span class="keyword">function</span><span class="params">(...)</span></span>&#123;</span><br><span class="line">  paste(<span class="string">"START"</span>,...,<span class="string">"STOP"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight ocaml"><table><tr><td class="code"><pre><span class="line">&gt; submit<span class="literal">()</span></span><br><span class="line"></span><br><span class="line">| <span class="type">Sourcing</span> your script...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">| <span class="type">You</span> got it!</span><br><span class="line"></span><br><span class="line">  |==========================================        |  <span class="number">83</span>%</span><br><span class="line"></span><br><span class="line">| <span class="type">Now</span> let's test out your telegram <span class="keyword">function</span>. <span class="type">Use</span> your <span class="keyword">new</span></span><br><span class="line">| telegram <span class="keyword">function</span> passing <span class="keyword">in</span> whatever arguments you wish!</span><br><span class="line"></span><br><span class="line">&gt; telegram(<span class="string">"Vladimir"</span>,<span class="string">"Horowitz"</span>,<span class="string">"is"</span>,<span class="string">"a"</span>,<span class="string">"great"</span>,<span class="string">"pianist!"</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"START Vladimir Horowitz is a great pianist! STOP"</span></span><br><span class="line"></span><br><span class="line">| <span class="type">Nice</span> work!</span><br><span class="line"></span><br><span class="line">  |===========================================       |  <span class="number">85</span>%</span><br><span class="line"></span><br><span class="line">| <span class="type">Make</span> sure <span class="keyword">to</span> save your script before you <span class="keyword">type</span> submit<span class="literal">()</span>.</span><br></pre></td></tr></table></figure>
<p>—&gt;mad_libs.R:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Let's explore how to "unpack" arguments from an ellipses when you use the</span></span><br><span class="line"><span class="comment"># ellipses as an argument in a function. Below I have an example function that</span></span><br><span class="line"><span class="comment"># is supposed to add two explicitly named arguments called alpha and beta.</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># add_alpha_and_beta &lt;- function(...)&#123;</span></span><br><span class="line"><span class="comment">#   # First we must capture the ellipsis inside of a list</span></span><br><span class="line"><span class="comment">#   # and then assign the list to a variable. Let's name this</span></span><br><span class="line"><span class="comment">#   # variable `args`.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   args &lt;- list(...)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   # We're now going to assume that there are two named arguments within args</span></span><br><span class="line"><span class="comment">#   # with the names `alpha` and `beta.` We can extract named arguments from</span></span><br><span class="line"><span class="comment">#   # the args list by used the name of the argument and double brackets. The</span></span><br><span class="line"><span class="comment">#   # `args` variable is just a regular list after all!</span></span><br><span class="line"><span class="comment">#   </span></span><br><span class="line"><span class="comment">#   alpha &lt;- args[["alpha"]]</span></span><br><span class="line"><span class="comment">#   beta  &lt;- args[["beta"]]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   # Then we return the sum of alpha and beta.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   alpha + beta </span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Have you ever played Mad Libs before? The function below will construct a</span></span><br><span class="line"><span class="comment"># sentence from parts of speech that you provide as arguments. We'll write most</span></span><br><span class="line"><span class="comment"># of the function, but you'll need to unpack the appropriate arguments from the</span></span><br><span class="line"><span class="comment"># ellipses.</span></span><br><span class="line"></span><br><span class="line">mad_libs &lt;- <span class="function"><span class="keyword">function</span><span class="params">(...)</span></span>&#123;</span><br><span class="line">  <span class="comment"># Do your argument unpacking here!</span></span><br><span class="line">  args&lt;-<span class="keyword">list</span>(...)</span><br><span class="line">  </span><br><span class="line">  place&lt;-args[[<span class="string">"place"</span>]]</span><br><span class="line">  adjective&lt;-args[[<span class="string">"adjective"</span>]]</span><br><span class="line">  noun&lt;-args[[<span class="string">"noun"</span>]]</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># Don't modify any code below this comment.</span></span><br><span class="line">  <span class="comment"># Notice the variables you'll need to create in order for the code below to</span></span><br><span class="line">  <span class="comment"># be functional!</span></span><br><span class="line">  paste(<span class="string">"News from"</span>, place, <span class="string">"today where"</span>, adjective, <span class="string">"students took to the streets in protest of the new"</span>, noun, <span class="string">"being installed on campus."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">&gt; submit()</span><br><span class="line"></span><br><span class="line">| Sourcing your script...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">| Perseverance, that<span class="comment">'s the answer.</span></span><br><span class="line"></span><br><span class="line">  |============================================      |  <span class="number">88</span>%</span><br><span class="line"></span><br><span class="line">| Time <span class="keyword">to</span> use your mad_libs <span class="keyword">function</span>. Make sure <span class="keyword">to</span> name the</span><br><span class="line">| place, adjective, <span class="keyword">and</span> noun arguments <span class="keyword">in</span> <span class="keyword">order</span> <span class="keyword">for</span> your</span><br><span class="line">| <span class="keyword">function</span> <span class="keyword">to</span> work.</span><br><span class="line"></span><br><span class="line">&gt; mad_libs(place=<span class="string">"Xiamen, China,"</span>, adjective=<span class="string">"tens of thousands of"</span>, noun=<span class="string">"policy"</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="string">"News from Xiamen, China, today where tens of thousands of students took to the streets in protest of the new policy being installed on campus."</span></span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s the answer I was looking for.</span></span><br><span class="line"></span><br><span class="line">  |=============================================     |  <span class="number">90</span>%</span><br><span class="line"></span><br><span class="line">| We<span class="comment">'re coming to the end of this lesson, but there's still</span></span><br><span class="line">| one more idea you should be made aware <span class="keyword">of</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==============================================    |  <span class="number">92</span>%</span><br><span class="line"></span><br><span class="line">| You<span class="comment">'re familiar with adding, subtracting, multiplying,</span></span><br><span class="line">| <span class="keyword">and</span> dividing numbers <span class="keyword">in</span> R. <span class="keyword">To</span> <span class="keyword">do</span> this you use the +, -,</span><br><span class="line">| *, <span class="keyword">and</span> / symbols. These symbols are called <span class="keyword">binary</span></span><br><span class="line">| operators because they <span class="keyword">take</span> two inputs, an input <span class="keyword">from</span> the</span><br><span class="line">| left <span class="keyword">and</span> an input <span class="keyword">from</span> the right.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===============================================   |  <span class="number">94</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">In</span> R you can define your own <span class="keyword">binary</span> operators. <span class="keyword">In</span> the</span><br><span class="line">| <span class="keyword">next</span> script I<span class="comment">'ll show you how.</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |================================================  |  <span class="number">96</span>%</span><br><span class="line"></span><br><span class="line">| Make sure <span class="keyword">to</span> save your script before you type submit().</span><br></pre></td></tr></table></figure>
<p>—&gt;bin_op.R</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor"># The syntax for creating new binary operators in R is unlike anything else in</span></span><br><span class="line"><span class="preprocessor"># R, but it allows you to define a new syntax for your function. I would only</span></span><br><span class="line"><span class="preprocessor"># recommend making your own binary operator if you plan on using it often!</span></span><br><span class="line"><span class="preprocessor">#</span></span><br><span class="line"><span class="preprocessor"># User-defined binary operators have the following syntax:</span></span><br><span class="line"><span class="preprocessor">#      %[whatever]% </span></span><br><span class="line"><span class="preprocessor"># where [whatever] represents any valid variable name.</span></span><br><span class="line"><span class="preprocessor"># </span></span><br><span class="line"><span class="preprocessor"># Let's say I wanted to define a binary operator that multiplied two numbers and</span></span><br><span class="line"><span class="preprocessor"># then added one to the product. An implementation of that operator is below:</span></span><br><span class="line"><span class="preprocessor">#</span></span><br><span class="line"><span class="preprocessor"># "%mult_add_one%" &lt;- function(left, right)&#123; # Notice the quotation marks!</span></span><br><span class="line"><span class="preprocessor">#   left * right + 1</span></span><br><span class="line"><span class="preprocessor"># &#125;</span></span><br><span class="line"><span class="preprocessor">#</span></span><br><span class="line"><span class="preprocessor"># I could then use this binary operator like `4 %mult_add_one% 5` which would</span></span><br><span class="line"><span class="preprocessor"># evaluate to 21.</span></span><br><span class="line"><span class="preprocessor">#</span></span><br><span class="line"><span class="preprocessor"># Write your own binary operator below from absolute scratch! Your binary</span></span><br><span class="line"><span class="preprocessor"># operator must be called %p% so that the expression:</span></span><br><span class="line"><span class="preprocessor">#</span></span><br><span class="line"><span class="preprocessor">#       "Good" %p% "job!"</span></span><br><span class="line"><span class="preprocessor">#</span></span><br><span class="line"><span class="preprocessor"># will evaluate to: "Good job!"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"%p%"</span> &lt;- function(left,right)&#123; # Remember to add arguments!</span><br><span class="line">  paste(left,right)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">&gt; submit()</span><br><span class="line"></span><br><span class="line">| Sourcing your script...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">| Keep up the great work!</span><br><span class="line"></span><br><span class="line">  |================================================= |  <span class="number">98</span>%</span><br><span class="line"></span><br><span class="line">| You made your own binary operator! Let<span class="attribute">'s</span> test it <span class="keyword">out</span>.</span><br><span class="line">| Paste together the strings: <span class="attribute">'I</span>', <span class="attribute">'love</span>', <span class="attribute">'R</span>!' using your</span><br><span class="line">| <span class="keyword">new</span> binary operator.</span><br><span class="line"></span><br><span class="line">&gt; <span class="string">"I"</span> %p% <span class="string">"love"</span> %p% <span class="string">"R!"</span></span><br><span class="line">[<span class="number">1</span>] <span class="string">"I love R!"</span></span><br><span class="line"></span><br><span class="line">| Great job!</span><br><span class="line"></span><br><span class="line">  |==================================================| <span class="number">100</span>%</span><br><span class="line"></span><br><span class="line">| We<span class="attribute">'ve</span> come <span class="keyword">to</span> the <span class="keyword">end</span> <span class="keyword">of</span> our lesson! Go <span class="keyword">out</span> there <span class="keyword">and</span></span><br><span class="line">| write some great functions!</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">| Are you currently enrolled <span class="keyword">in</span> the Coursera course</span><br><span class="line">| associated <span class="keyword">with</span> this lesson?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: Yes</span><br><span class="line"><span class="number">2</span>: No</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">| You<span class="attribute">'ve</span> reached the <span class="keyword">end</span> <span class="keyword">of</span> this lesson! Returning <span class="keyword">to</span> the</span><br><span class="line">| main menu...</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">| Please choose a course, <span class="keyword">or</span]]>
    </summary>
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我眼中最美的风景]]></title>
    <link href="http://yoursite.com/2015/05/12/%E6%88%91%E7%9C%BC%E4%B8%AD%E6%9C%80%E7%BE%8E%E7%9A%84%E9%A3%8E%E6%99%AF/"/>
    <id>http://yoursite.com/2015/05/12/我眼中最美的风景/</id>
    <published>2015-05-11T17:06:22.000Z</published>
    <updated>2015-05-11T17:16:39.000Z</updated>
    <content type="html"><![CDATA[<p>借用《何以笙箫默》里的一句台词：You are my sunshine.</p>
<p>美美的背影~<br><img src="http://qiniupicbed.qiniudn.com/upload/a7b1ca5f8906bee6b4579cf450189227.png" alt=""></p>
<a id="more"></a>
<hr>
<p>“想想晚上吃什么呢？”<br><img src="http://qiniupicbed.qiniudn.com/upload/60fedd20cca725da044d70cec1f4d185.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>借用《何以笙箫默》里的一句台词：You are my sunshine.</p>
<p>美美的背影~<br><img src="http://qiniupicbed.qiniudn.com/upload/a7b1ca5f8906bee6b4579cf450189227.png" alt=""></p>]]>
    
    </summary>
    
      <category term="美图" scheme="http://yoursite.com/categories/%E7%BE%8E%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Golf——自由挥杆的乐趣]]></title>
    <link href="http://yoursite.com/2015/05/10/Golf%E2%80%94%E2%80%94%E8%87%AA%E7%94%B1%E6%8C%A5%E6%9D%86%E7%9A%84%E4%B9%90%E8%B6%A3/"/>
    <id>http://yoursite.com/2015/05/10/Golf——自由挥杆的乐趣/</id>
    <published>2015-05-10T15:14:17.000Z</published>
    <updated>2015-05-11T17:18:08.000Z</updated>
    <content type="html"><![CDATA[<p>下午五点多出发去打高尔夫球，学校的练习场七点钟关门，只有一个多小时的时间。</p>
<p>不过是本着锻炼锻炼的心态，也就无所谓打球时间的长短了。骑骑车，爬爬山，然后挥挥杆，就很好。</p>
<p>我骑自行车穿过芙蓉隧道，把车停在石井宿舍区的铁栅栏外，然后徒步上山。练习场不是很远，我顺着山路走到情人谷，然后从厦大水库边上的林荫小道往上走，再登一小段台阶，过一个小桥，就到练习场了。</p>
<a id="more"></a>
<p>练习场有一二两层楼可供大家练习挥杆并将球朝外面的草坪和土坡打去。我平时来打球，虽然说多半时候都是在楼下一层打，可是因为球技不佳，我更喜欢在楼上打，因为人比较少，不会被那么多的目光注视着，可以安心自在地练习。</p>
<p>可今天来得比较迟，管理员说最好就在楼下打，于是我也就点头答应了。一楼普遍高手居多，而且经常有戴着帽子的教练背着装满各种型号球杆的包走进来练习。我也就硬着头皮混迹于高手之间，找了一个空球道练习起来。</p>
<p>没想，今天手感超级棒，我自己粗略估算了一下，大约百分之七十五的球都打得自在洒脱，小球以又高又远的优美抛物线飞出去，落在100码那个牌子边的草地上。平均四五个球中，约有一个会有些微失误，打得不尽人意，不过大多数球还是打得非常不错的。</p>
<p>每次挥杆“呼”的一声后，听到小球被击打的一声清脆的“咔”声，看着它向天际下的更高更远处飞去，心情就无比舒畅愉悦。</p>
<p>查看了一下去年三月份我写的一条微博，内容是这样的：“高尔夫球的精髓在于教会一个人专注。越是心急，急于求成，越不能把球打好。看一眼目标，闭上眼，将它牢记于心中，深呼吸，永不抬头，注视着球，而不论身体转向何方，进而顺势如钟摆般，死不发力，挥杆将球击出。唯有牢记目标，却专注于眼下的事物本身，摆正自己的心态，走好每一步，才有可能走得更远。”</p>
<p>是的，打高尔夫球贵在专注于眼前的这颗小球，唯有真正专注与静下心来，和自己保持连结，才可能打出好球。</p>
<p>深呼吸，放松身体，注视着球。眼下要做的，就是打好这颗球，让它带着我的梦想远走高飞。</p>
<p>而我，只需享受阳光，在大自然中畅享挥杆的无上乐趣。</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/0a54363169f50ecf8ba4fba629041271.png" alt=""></p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/f47dc05afe650aa5b7329811b0613ebd.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>下午五点多出发去打高尔夫球，学校的练习场七点钟关门，只有一个多小时的时间。</p>
<p>不过是本着锻炼锻炼的心态，也就无所谓打球时间的长短了。骑骑车，爬爬山，然后挥挥杆，就很好。</p>
<p>我骑自行车穿过芙蓉隧道，把车停在石井宿舍区的铁栅栏外，然后徒步上山。练习场不是很远，我顺着山路走到情人谷，然后从厦大水库边上的林荫小道往上走，再登一小段台阶，过一个小桥，就到练习场了。</p>]]>
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="高尔夫" scheme="http://yoursite.com/tags/%E9%AB%98%E5%B0%94%E5%A4%AB/"/>
    
      <category term="个人随笔" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[问鼎大师]]></title>
    <link href="http://yoursite.com/2015/05/10/%E9%97%AE%E9%BC%8E%E5%A4%A7%E5%B8%88/"/>
    <id>http://yoursite.com/2015/05/10/问鼎大师/</id>
    <published>2015-05-09T16:13:06.000Z</published>
    <updated>2015-05-10T06:18:15.000Z</updated>
    <content type="html"><![CDATA[<p>就在刚刚，一局PK比赛结束，弹出比分、战胜对手的同时，手机屏幕上显示我段位晋升为大师，赢得了手游《节奏大师》的最高荣耀。</p>
<p>我说不出此刻是怎样的心情，也许，是平静吧，是经过千山万水、大起大落而重获的那份内心的平静吧。</p>
<p>记得节奏大师是2012年12月份出来的，我刚开始玩的时候是2013年春节后，也就是大四下学期伊始之时。毫不夸张，我算得上是老一辈的现象级玩家了，陪伴着它经历了一次次的版本升级和新玩法的出现。从最早的只玩4KEY自由模式，到后来的闯关，记得当时玩得疯狂，两天就耗尽了初始的150体力，玩到了150关，玩到手拇指抽筋了，玩到眼睛也花了，玩到耳朵都听倦了那嗨翻心海的音乐声，玩到深夜手机没电倒头就睡。</p>
<p>当时的我觉得，这款游戏简直就是为我量身定制的，音乐节奏能完美地从指间流淌出来，旋律带动全身的音乐细胞一起震颤。</p>
<a id="more"></a>
<p>初中时的有段时间，我酷爱《劲乐团》，和同班同学约好了周末PK，当时我也是名噪一时的班级音游达人。后来劲乐团要收费了，就玩的少了。</p>
<p>之后的好多年，我再没有接触过音乐游戏，直到姐姐推荐说《节奏大师》很好玩，我才开始与它相遇，并结下不解之缘。</p>
<p>后来它走向盈利的一面，有几首好歌需要购买倒是其次，关键在于其中设置了好多游戏角色可供玩家购买，这些角色可以大幅度降低操作者失误率，说白了，就相当于半开着外挂在玩。</p>
<p>PK场的出现，简直就是我福音。最早我玩得好，可是展示的机会少之又少，寝室同学知道，还有就是同学聚会时表演过一次，哈哈。它可以与其他玩家PK，这就极大增添了这款游戏的可玩性和竞技性。</p>
<p>PK的竞技段位有7个级别，从低到高依次为小白、入门(300+)、进阶(600+)、普通(900+)、高手(1200+)、专业(1500+)和大师(1800+)。起初没花多少时间，我就迅速晋升到高手行列。自己处于哪个段位，系统就会安排实力相当的对手进行比赛。慢慢地，我发现高手这个级别的对手实力上与我还是有些微差距的，于是没过多久，我就晋升到专业组。现在想来，专业组已是半职业水准了，因为当时有许多知名战队（印象最深的为mz战队）队员都是专业级别的，我在PK中遇到几次，基本都无一幸免的是我稍逊风骚，甘拜下风。当时的mz战队成员确实个个生猛无比，我看了这个战队的宣传视频，当时的入门要求是要有50首困难歌曲达到3S。往昔的3S绝对是含金量极高的，当时的游戏设定是必须按满全部的键，且必须全部是Perfect，才判为3S。我记得我当时简直要被强迫症逼死，有时一首歌连续重复打四五十遍才能打出3S，打出来还是好的，痛苦的是在打出来之前，我必须一遍遍忍受自己手指的失控、眼花等一系列失误，接纳自己的不足，努力改进和练习，不断超越自我，增强手指的灵敏度和精准度，最终成功打出3S。当时的我深刻体会到“最痛苦的不是你失败了，而是你离成功就只差一点点”这句话的要义和精髓。</p>
<p>2014年初，当达到50个3S时，我曾在QQ空间发表了一篇文章(<a href="http://user.qzone.qq.com/307898463/2" target="_blank" rel="external">http://user.qzone.qq.com/307898463/2</a>)，打算金盆洗手，退出江湖。不料，它仍然是我不变的挚爱。断断续续地，我还是一直有玩。</p>
<p>在我到厦大读研后，我和同学在2013年末组织举办了一次节奏大师比赛，我是作为工作人员，负责在现场为同学们计分。之后自己也参加过一次学院组织的节奏大师比赛，并获得了第一名，说来惭愧，这是我在厦大得到的唯一一张获奖奖状。</p>
<p>之后节奏大师还推出了许多小玩法，比如周末闯关、极限挑战、星动模式、好友闯关等等，不过我最偏爱的还是自由模式和无道具无角色PK场。</p>
<p>节奏大师每年的夏季和冬季都有TGA大赛，先是海选，到复赛，到决赛。我每一次都参加了海选，最好的成绩是61名，可惜取的是前32名进入复赛。我每次比赛都参与，其实也就是纯为了娱乐，挑战一下自己，看看自己在大赛中拥有怎样的实力，并没有想要入围复赛或是决赛。节奏大师的高手很多，我最敬佩的只有一人——ID为“小梨大枣”，他是我见过拇指玩家里最强的，拇指AC卡农的人。我有段时间，每晚睡前都看他的游戏视频，常常看得欣喜异常、振奋不已，从床上坐起来，自己又玩几局。</p>
<p>近来，节奏大师的海选赛和PK场几乎已被外挂吞噬，前几百名已经看不到真人玩家，我在PK场里甚至有一天打了10局比赛，其中8局的对手是外挂，着实让我心寒。</p>
<p>从专业组晋升大师的过程历时将近一年，这个过程是不易的，因为这中间隔着300分的距离，我战胜高手组的对手有时不加分，战胜专业组或大师组对手加1分，输给高手组、专业组时要扣1分，输给大师组对手有时不扣分。升升降降，兜兜转转，金戈铁马，折戟沉沙，无数次的功亏一篑，无数次的卷土重来。三十功名尘与土，八千里路云和月。</p>
<p>宝剑锋从磨砺出，梅花香自苦寒来。在光鲜背后，我也曾玩得快要砸碎手机，也曾痛苦自己的手指无法如机器那样精确，也曾大骂外挂的横行。可我一次次隐忍，在细小之处追求完美，不断超越自身的局限，砥砺磨难与困苦，终究问鼎大师。</p>
<p>这也让我相信，在一个领域坚持下去，总有出头之日。我也总算在生活的一处，成为了大师。其实，不管是哪一个领域，大师都是值得敬重的，大师的分量绝不是马虎浮躁能忽悠出来的，大师，是为大师也。</p>
<p>这一刻，纵有千言万语，却只化作两幅手机游戏截图。图片背后看不见的是几乎每天不间断的练习和鲜为人知的故事。</p>
<p>大师，已然超越了技术本身，而成为了一种精神和信仰。</p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/766b44defe0135a1a10dfe0cdb210b50.png" alt=""></p>
<p><img src="http://qiniupicbed.qiniudn.com/upload/0988955ab2a5e8eb04d51069a064d8cf.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>就在刚刚，一局PK比赛结束，弹出比分、战胜对手的同时，手机屏幕上显示我段位晋升为大师，赢得了手游《节奏大师》的最高荣耀。</p>
<p>我说不出此刻是怎样的心情，也许，是平静吧，是经过千山万水、大起大落而重获的那份内心的平静吧。</p>
<p>记得节奏大师是2012年12月份出来的，我刚开始玩的时候是2013年春节后，也就是大四下学期伊始之时。毫不夸张，我算得上是老一辈的现象级玩家了，陪伴着它经历了一次次的版本升级和新玩法的出现。从最早的只玩4KEY自由模式，到后来的闯关，记得当时玩得疯狂，两天就耗尽了初始的150体力，玩到了150关，玩到手拇指抽筋了，玩到眼睛也花了，玩到耳朵都听倦了那嗨翻心海的音乐声，玩到深夜手机没电倒头就睡。</p>
<p>当时的我觉得，这款游戏简直就是为我量身定制的，音乐节奏能完美地从指间流淌出来，旋律带动全身的音乐细胞一起震颤。</p>]]>
    
    </summary>
    
      <category term="大师" scheme="http://yoursite.com/tags/%E5%A4%A7%E5%B8%88/"/>
    
      <category term="个人随笔" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[swirl学习之八——Logic]]></title>
    <link href="http://yoursite.com/2015/05/08/swirl%E5%AD%A6%E4%B9%A08/"/>
    <id>http://yoursite.com/2015/05/08/swirl学习8/</id>
    <published>2015-05-08T09:58:00.000Z</published>
    <updated>2015-05-08T09:59:26.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">| Please choose a course, <span class="keyword">or</span> type <span class="number">0</span> <span class="keyword">to</span> <span class="keyword">exit</span> swirl.</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: R Programming</span><br><span class="line"><span class="number">2</span>: <span class="keyword">Take</span> <span class="keyword">me</span> <span class="keyword">to</span> the swirl course repository!</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">| Please choose a lesson, <span class="keyword">or</span> type <span class="number">0</span> <span class="keyword">to</span> <span class="keyword">return</span> <span class="keyword">to</span> course menu.</span><br><span class="line"></span><br><span class="line"> <span class="number">1</span>: Basic Building Blocks      <span class="number">2</span>: Workspace <span class="keyword">and</span> Files     </span><br><span class="line"> <span class="number">3</span>: Sequences <span class="keyword">of</span> Numbers       <span class="number">4</span>: Vectors                 </span><br><span class="line"> <span class="number">5</span>: Missing Values             <span class="number">6</span>: Subsetting Vectors      </span><br><span class="line"> <span class="number">7</span>: Matrices <span class="keyword">and</span> Data Frames   <span class="number">8</span>: Logic                   </span><br><span class="line"> <span class="number">9</span>: Functions                 <span class="number">10</span>: lapply <span class="keyword">and</span> sapply       </span><br><span class="line"><span class="number">11</span>: vapply <span class="keyword">and</span> tapply         <span class="number">12</span>: Looking at Data         </span><br><span class="line"><span class="number">13</span>: Simulation                <span class="number">14</span>: Dates <span class="keyword">and</span> Times         </span><br><span class="line"><span class="number">15</span>: Base Graphics             </span><br><span class="line"></span><br><span class="line">Selection: <span class="number">8</span></span><br><span class="line"></span><br><span class="line">  |                                                            |   <span class="number">0</span>%</span><br><span class="line"></span><br><span class="line">| This lesson <span class="keyword">is</span> meant <span class="keyword">to</span> be a <span class="built_in">short</span> introduction <span class="keyword">to</span> logical</span><br><span class="line">| operations <span class="keyword">in</span> R.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=                                                           |   <span class="number">2</span>%</span><br><span class="line"></span><br><span class="line">| There are two logical values <span class="keyword">in</span> R, also called <span class="built_in">boolean</span> values. They</span><br><span class="line">| are <span class="literal">TRUE</span> <span class="keyword">and</span> <span class="literal">FALSE</span>. <span class="keyword">In</span> R you can construct logical expressions</span><br><span class="line">| which will evaluate <span class="keyword">to</span> either <span class="literal">TRUE</span> <span class="keyword">or</span> <span class="literal">FALSE</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==                                                          |   <span class="number">4</span>%</span><br><span class="line"></span><br><span class="line">| Many <span class="keyword">of</span> the questions <span class="keyword">in</span> this lesson will involve evaluating</span><br><span class="line">| logical expressions. It may be useful <span class="keyword">to</span> open up a second R</span><br><span class="line">| terminal <span class="keyword">where</span> you can experiment <span class="keyword">with</span> some <span class="keyword">of</span> these expressions.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |====                                                        |   <span class="number">6</span>%</span><br><span class="line"></span><br><span class="line">| Creating logical expressions requires logical operators. You<span class="comment">'re</span></span><br><span class="line">| probably familiar <span class="keyword">with</span> arithmetic operators <span class="keyword">like</span> `+`, `-`, `*`, <span class="keyword">and</span></span><br><span class="line">| `/`. The first logical <span class="keyword">operator</span> we are going <span class="keyword">to</span> discuss <span class="keyword">is</span> the</span><br><span class="line">| equality <span class="keyword">operator</span>, represented <span class="keyword">by</span> two <span class="keyword">equals</span> signs `==`. Use the</span><br><span class="line">| equality <span class="keyword">operator</span> below <span class="keyword">to</span> find out <span class="keyword">if</span> <span class="literal">TRUE</span> <span class="keyword">is</span> equal <span class="keyword">to</span> <span class="literal">TRUE</span>.</span><br><span class="line"></span><br><span class="line">&gt; <span class="literal">TRUE</span> == <span class="literal">TRUE</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| Excellent job!</span><br><span class="line"></span><br><span class="line">  |=====                                                       |   <span class="number">8</span>%</span><br><span class="line"></span><br><span class="line">| Just <span class="keyword">like</span> arithmetic, logical expressions can be grouped <span class="keyword">by</span></span><br><span class="line">| parenthesis so that the entire expression (<span class="literal">TRUE</span> == <span class="literal">TRUE</span>) == <span class="literal">TRUE</span></span><br><span class="line">| evaluates <span class="keyword">to</span> <span class="literal">TRUE</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |======                                                      |  <span class="number">10</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">To</span> test out this <span class="keyword">property</span>, <span class="keyword">try</span> evaluating (<span class="literal">FALSE</span> == <span class="literal">TRUE</span>) == <span class="literal">FALSE</span></span><br><span class="line">| .</span><br><span class="line"></span><br><span class="line">&gt; (<span class="literal">FALSE</span>==<span class="literal">TRUE</span>)==<span class="literal">FALSE</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| You got it!</span><br><span class="line"></span><br><span class="line">  |=======                                                     |  <span class="number">12</span>%</span><br><span class="line"></span><br><span class="line">| The equality <span class="keyword">operator</span> can also be used <span class="keyword">to</span> <span class="keyword">compare</span> numbers. Use `==`</span><br><span class="line">| <span class="keyword">to</span> see <span class="keyword">if</span> <span class="number">6</span> <span class="keyword">is</span> equal <span class="keyword">to</span> <span class="number">7.</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="number">6</span>==<span class="number">7</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">FALSE</span></span><br><span class="line"></span><br><span class="line">| You got it!</span><br><span class="line"></span><br><span class="line">  |========                                                    |  <span class="number">14</span>%</span><br><span class="line"></span><br><span class="line">| The previous expression evaluates <span class="keyword">to</span> <span class="literal">FALSE</span> because <span class="number">6</span> <span class="keyword">is</span> less than</span><br><span class="line">| <span class="number">7.</span> Thankfully, there are inequality operators that allow us <span class="keyword">to</span> test</span><br><span class="line">| <span class="keyword">if</span> a value <span class="keyword">is</span> less than <span class="keyword">or</span> greater than another value.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=========                                                   |  <span class="number">16</span>%</span><br><span class="line"></span><br><span class="line">| The less than <span class="keyword">operator</span> `&lt;` tests whether the number <span class="keyword">on</span> the left</span><br><span class="line">| side <span class="keyword">of</span> the <span class="keyword">operator</span> (called the left operand) <span class="keyword">is</span> less than the</span><br><span class="line">| number <span class="keyword">on</span> the right side <span class="keyword">of</span> the <span class="keyword">operator</span> (called the right</span><br><span class="line">| operand). Write an expression <span class="keyword">to</span> test whether <span class="number">6</span> <span class="keyword">is</span> less than <span class="number">7.</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="number">6</span>&lt;<span class="number">7</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| You nailed it! Good job!</span><br><span class="line"></span><br><span class="line">  |===========                                                 |  <span class="number">18</span>%</span><br><span class="line"></span><br><span class="line">| There <span class="keyword">is</span> also a less-than-<span class="keyword">or</span>-equal-<span class="keyword">to</span> <span class="keyword">operator</span> `&lt;=` which tests</span><br><span class="line">| whether the left operand <span class="keyword">is</span> less than <span class="keyword">or</span> equal <span class="keyword">to</span> the right</span><br><span class="line">| operand. Write an expression <span class="keyword">to</span> test whether <span class="number">10</span> <span class="keyword">is</span> less than <span class="keyword">or</span></span><br><span class="line">| equal <span class="keyword">to</span> <span class="number">10.</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="number">10</span>&lt;=<span class="number">10</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s the answer I was looking for.</span></span><br><span class="line"></span><br><span class="line">  |============                                                |  <span class="number">20</span>%</span><br><span class="line"></span><br><span class="line">| Keep <span class="keyword">in</span> mind that there are the corresponding greater than `&gt;` <span class="keyword">and</span></span><br><span class="line">| greater-than-<span class="keyword">or</span>-equal-<span class="keyword">to</span> `&gt;=` operators.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=============                                               |  <span class="number">22</span>%</span><br><span class="line"></span><br><span class="line">| Which <span class="keyword">of</span> the following evaluates <span class="keyword">to</span> <span class="literal">FALSE</span>?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: <span class="number">6</span> &lt; <span class="number">8</span></span><br><span class="line"><span class="number">2</span>: <span class="number">7</span> == <span class="number">7</span></span><br><span class="line"><span class="number">3</span>: <span class="number">0</span> &gt; -<span class="number">36</span></span><br><span class="line"><span class="number">4</span>: <span class="number">9</span> &gt;= <span class="number">10</span></span><br><span class="line"></span><br><span class="line">Selection: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s correct!</span></span><br><span class="line"></span><br><span class="line">  |==============                                              |  <span class="number">24</span>%</span><br><span class="line"></span><br><span class="line">| Which <span class="keyword">of</span> the following evaluates <span class="keyword">to</span> <span class="literal">TRUE</span>?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: <span class="number">57</span> &lt; <span class="number">8</span></span><br><span class="line"><span class="number">2</span>: -<span class="number">6</span> &gt; -<span class="number">7</span></span><br><span class="line"><span class="number">3</span>: <span class="number">7</span> == <span class="number">9</span></span><br><span class="line"><span class="number">4</span>: <span class="number">9</span> &gt;= <span class="number">10</span></span><br><span class="line"></span><br><span class="line">Selection: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">| Keep up the great work!</span><br><span class="line"></span><br><span class="line">  |===============                                             |  <span class="number">25</span>%</span><br><span class="line"></span><br><span class="line">| The <span class="keyword">next</span> <span class="keyword">operator</span> we will discuss <span class="keyword">is</span> the <span class="comment">'not equals' operator</span></span><br><span class="line">| represented <span class="keyword">by</span> `!=`. <span class="keyword">Not</span> <span class="keyword">equals</span> tests whether two values are</span><br><span class="line">| unequal, so <span class="literal">TRUE</span> != <span class="literal">FALSE</span> evaluates <span class="keyword">to</span> <span class="literal">TRUE</span>. <span class="keyword">Like</span> the equality</span><br><span class="line">| <span class="keyword">operator</span>, `!=` can also be used <span class="keyword">with</span> numbers. <span class="keyword">Try</span> writing an</span><br><span class="line">| expression <span class="keyword">to</span> see <span class="keyword">if</span> <span class="number">5</span> <span class="keyword">is</span> <span class="keyword">not</span> equal <span class="keyword">to</span> <span class="number">7.</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="number">5</span>!=<span class="number">7</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| You are quite good my <span class="keyword">friend</span>!</span><br><span class="line"></span><br><span class="line">  |================                                            |  <span class="number">27</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">In</span> <span class="keyword">order</span> <span class="keyword">to</span> negate <span class="built_in">boolean</span> expressions you can use the <span class="keyword">NOT</span></span><br><span class="line">| <span class="keyword">operator</span>. An exclamation point `!` will cause !<span class="literal">TRUE</span> (say: <span class="keyword">not</span> <span class="literal">true</span>)</span><br><span class="line">| <span class="keyword">to</span> evaluate <span class="keyword">to</span> <span class="literal">FALSE</span> <span class="keyword">and</span> !<span class="literal">FALSE</span> (say: <span class="keyword">not</span> <span class="literal">false</span>) <span class="keyword">to</span> evaluate <span class="keyword">to</span></span><br><span class="line">| <span class="literal">TRUE</span>. <span class="keyword">Try</span> <span class="keyword">using</span> the <span class="keyword">NOT</span> <span class="keyword">operator</span> <span class="keyword">and</span> the <span class="keyword">equals</span> <span class="keyword">operator</span> <span class="keyword">to</span> find</span><br><span class="line">| the opposite <span class="keyword">of</span> whether <span class="number">5</span> <span class="keyword">is</span> equal <span class="keyword">to</span> <span class="number">7.</span></span><br><span class="line"></span><br><span class="line">&gt; !(<span class="number">5</span>==<span class="number">7</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| You<span class="comment">'re the best!</span></span><br><span class="line"></span><br><span class="line">  |==================                                          |  <span class="number">29</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Let</span><span class="comment">'s take a moment to review. The equals operator `==` tests</span></span><br><span class="line">| whether two <span class="built_in">boolean</span> values <span class="keyword">or</span> numbers are equal, the <span class="keyword">not</span> <span class="keyword">equals</span></span><br><span class="line">| <span class="keyword">operator</span> `!=` tests whether two <span class="built_in">boolean</span> values <span class="keyword">or</span> numbers are</span><br><span class="line">| unequal, <span class="keyword">and</span> the <span class="keyword">NOT</span> <span class="keyword">operator</span> `!` negates logical expressions so</span><br><span class="line">| that <span class="literal">TRUE</span> expressions become <span class="literal">FALSE</span> <span class="keyword">and</span> <span class="literal">FALSE</span> expressions become</span><br><span class="line">| <span class="literal">TRUE</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===================                                         |  <span class="number">31</span>%</span><br><span class="line"></span><br><span class="line">| Which <span class="keyword">of</span> the following evaluates <span class="keyword">to</span> <span class="literal">FALSE</span>?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: <span class="number">7</span> != <span class="number">8</span></span><br><span class="line"><span class="number">2</span>: !<span class="literal">FALSE</span></span><br><span class="line"><span class="number">3</span>: <span class="number">9</span> &lt; <span class="number">10</span></span><br><span class="line"><span class="number">4</span>: !(<span class="number">0</span> &gt;= -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s the answer I was looking for.</span></span><br><span class="line"></span><br><span class="line">  |====================                                        |  <span class="number">33</span>%</span><br><span class="line"></span><br><span class="line">| What <span class="keyword">do</span> you think the following expression will evaluate <span class="keyword">to</span>?: (<span class="literal">TRUE</span></span><br><span class="line">| != <span class="literal">FALSE</span>) == !(<span class="number">6</span> == <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: Can there be objective truth <span class="keyword">when</span> programming?</span><br><span class="line"><span class="number">2</span>: %&gt;%</span><br><span class="line"><span class="number">3</span>: <span class="literal">FALSE</span></span><br><span class="line"><span class="number">4</span>: <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">Selection: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">| All that practice <span class="keyword">is</span> paying <span class="keyword">off</span>!</span><br><span class="line"></span><br><span class="line">  |=====================                                       |  <span class="number">35</span>%</span><br><span class="line"></span><br><span class="line">| At some point you may need <span class="keyword">to</span> examine relationships between</span><br><span class="line">| multiple logical expressions. This <span class="keyword">is</span> <span class="keyword">where</span> the <span class="keyword">AND</span> <span class="keyword">operator</span> <span class="keyword">and</span></span><br><span class="line">| the <span class="keyword">OR</span> <span class="keyword">operator</span> come <span class="keyword">in</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |======================                                      |  <span class="number">37</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Let</span><span class="comment">'s look at how the AND operator works. There are two AND</span></span><br><span class="line">| operators <span class="keyword">in</span> R, `&amp;` <span class="keyword">and</span> `&amp;&amp;`. Both operators work similarly, <span class="keyword">if</span> the</span><br><span class="line">| right <span class="keyword">and</span> left operands <span class="keyword">of</span> <span class="keyword">AND</span> are both <span class="literal">TRUE</span> the entire expression</span><br><span class="line">| <span class="keyword">is</span> <span class="literal">TRUE</span>, otherwise it <span class="keyword">is</span> <span class="literal">FALSE</span>. <span class="keyword">For</span> example, <span class="literal">TRUE</span> &amp; <span class="literal">TRUE</span> evaluates</span><br><span class="line">| <span class="keyword">to</span> <span class="literal">TRUE</span>. <span class="keyword">Try</span> typing <span class="literal">FALSE</span> &amp; <span class="literal">FALSE</span> <span class="keyword">to</span> how it <span class="keyword">is</span> evaluated.</span><br><span class="line"></span><br><span class="line">&gt; <span class="literal">FALSE</span>&amp;<span class="literal">FALSE</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">FALSE</span></span><br><span class="line"></span><br><span class="line">| Excellent work!</span><br><span class="line"></span><br><span class="line">  |========================                                    |  <span class="number">39</span>%</span><br><span class="line"></span><br><span class="line">| You can use the `&amp;` <span class="keyword">operator</span> <span class="keyword">to</span> evaluate <span class="keyword">AND</span> across a vector. The</span><br><span class="line">| `&amp;&amp;` version <span class="keyword">of</span> <span class="keyword">AND</span> only evaluates the first member <span class="keyword">of</span> a vector.</span><br><span class="line">| <span class="keyword">Let</span><span class="comment">'s test both for practice. Type the expression TRUE &amp; c(TRUE,</span></span><br><span class="line">| <span class="literal">FALSE</span>, <span class="literal">FALSE</span>).</span><br><span class="line"></span><br><span class="line">&gt; <span class="literal">TRUE</span>&amp;c(<span class="literal">TRUE</span>,<span class="literal">FALSE</span>,<span class="literal">FALSE</span>)</span><br><span class="line">[<span class="number">1</span>]  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span></span><br><span class="line"></span><br><span class="line">| Great job!</span><br><span class="line"></span><br><span class="line">  |=========================                                   |  <span class="number">41</span>%</span><br><span class="line"></span><br><span class="line">| What happens <span class="keyword">in</span> this <span class="keyword">case</span> <span class="keyword">is</span> that the left operand `<span class="literal">TRUE</span>` <span class="keyword">is</span></span><br><span class="line">| recycled across every element <span class="keyword">in</span> the vector <span class="keyword">of</span> the right operand.</span><br><span class="line">| This <span class="keyword">is</span> the equivalent statement <span class="keyword">as</span> c(<span class="literal">TRUE</span>, <span class="literal">TRUE</span>, <span class="literal">TRUE</span>) &amp; c(<span class="literal">TRUE</span>,</span><br><span class="line">| <span class="literal">FALSE</span>, <span class="literal">FALSE</span>).</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==========================                                  |  <span class="number">43</span>%</span><br><span class="line"></span><br><span class="line">| Now we<span class="comment">'ll type the same expression except we'll use the `&amp;&amp;`</span></span><br><span class="line">| <span class="keyword">operator</span>. Type the expression <span class="literal">TRUE</span> &amp;&amp; c(<span class="literal">TRUE</span>, <span class="literal">FALSE</span>, <span class="literal">FALSE</span>).</span><br><span class="line"></span><br><span class="line">&gt; <span class="literal">TRUE</span>&amp;&amp;c(<span class="literal">TRUE</span>,<span class="literal">FALSE</span>,<span class="literal">FALSE</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| All that hard work <span class="keyword">is</span> paying <span class="keyword">off</span>!</span><br><span class="line"></span><br><span class="line">  |===========================                                 |  <span class="number">45</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">In</span> this <span class="keyword">case</span>, the left operand <span class="keyword">is</span> only evaluated <span class="keyword">with</span> the first</span><br><span class="line">| member <span class="keyword">of</span> the right operand (the vector). The rest <span class="keyword">of</span> the elements</span><br><span class="line">| <span class="keyword">in</span> the vector aren<span class="comment">'t evaluated at all in this expression.</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |============================                                |  <span class="number">47</span>%</span><br><span class="line"></span><br><span class="line">| The <span class="keyword">OR</span> <span class="keyword">operator</span> follows a similar <span class="keyword">set</span> <span class="keyword">of</span> rules. The `|` version <span class="keyword">of</span></span><br><span class="line">| <span class="keyword">OR</span> evaluates <span class="keyword">OR</span> across an entire vector, <span class="keyword">while</span> the `||` version <span class="keyword">of</span></span><br><span class="line">| <span class="keyword">OR</span> only evaluates the first member <span class="keyword">of</span> a vector.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=============================                               |  <span class="number">49</span>%</span><br><span class="line"></span><br><span class="line">| An expression <span class="keyword">using</span> the <span class="keyword">OR</span> <span class="keyword">operator</span> will evaluate <span class="keyword">to</span> <span class="literal">TRUE</span> <span class="keyword">if</span> the</span><br><span class="line">| left operand <span class="keyword">or</span> the right operand <span class="keyword">is</span> <span class="literal">TRUE</span>. <span class="keyword">If</span> both are <span class="literal">TRUE</span>, the</span><br><span class="line">| expression will evaluate <span class="keyword">to</span> <span class="literal">TRUE</span>, however <span class="keyword">if</span> neither are <span class="literal">TRUE</span>, <span class="keyword">then</span></span><br><span class="line">| the expression will be <span class="literal">FALSE</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===============================                             |  <span class="number">51</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Let</span><span class="comment">'s test out the vectorized version of the OR operator. Type the</span></span><br><span class="line">| expression <span class="literal">TRUE</span> | c(<span class="literal">TRUE</span>, <span class="literal">FALSE</span>, <span class="literal">FALSE</span>).</span><br><span class="line"></span><br><span class="line">&gt; <span class="literal">TRUE</span>|c(<span class="literal">TRUE</span>,<span class="literal">FALSE</span>,<span class="literal">FALSE</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span> <span class="literal">TRUE</span> <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| Great job!</span><br><span class="line"></span><br><span class="line">  |================================                            |  <span class="number">53</span>%</span><br><span class="line"></span><br><span class="line">| Now <span class="keyword">let</span><span class="comment">'s try out the non-vectorized version of the OR operator.</span></span><br><span class="line">| Type the expression <span class="literal">TRUE</span> || c(<span class="literal">TRUE</span>, <span class="literal">FALSE</span>, <span class="literal">FALSE</span>).</span><br><span class="line"></span><br><span class="line">&gt; <span class="literal">TRUE</span>||c(<span class="literal">TRUE</span>,<span class="literal">FALSE</span>,<span class="literal">FALSE</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| Perseverance, that<span class="comment">'s the answer.</span></span><br><span class="line"></span><br><span class="line">  |=================================                           |  <span class="number">55</span>%</span><br><span class="line"></span><br><span class="line">| Logical operators can be chained together just <span class="keyword">like</span> arithmetic</span><br><span class="line">| operators. The expressions: `<span class="number">6</span> != <span class="number">10</span> &amp;&amp; <span class="literal">FALSE</span> &amp;&amp; <span class="number">1</span> &gt;= <span class="number">2</span>` <span class="keyword">or</span> `<span class="literal">TRUE</span></span><br><span class="line">| || <span class="number">5</span> &lt; <span class="number">9.3</span> || <span class="literal">FALSE</span>` are perfectly normal <span class="keyword">to</span> see.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |==================================                          |  <span class="number">57</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">As</span> you may recall, arithmetic has an <span class="keyword">order</span> <span class="keyword">of</span> operations <span class="keyword">and</span> so <span class="keyword">do</span></span><br><span class="line">| logical expressions. All <span class="keyword">AND</span> operators are evaluated before <span class="keyword">OR</span></span><br><span class="line">| operators. <span class="keyword">Let</span><span class="comment">'s look at an example of an ambiguous case. Type: 5 &gt;</span></span><br><span class="line">| <span class="number">8</span> || <span class="number">6</span> != <span class="number">8</span> &amp;&amp; <span class="number">4</span> &gt; <span class="number">3.9</span></span><br><span class="line"></span><br><span class="line">&gt; <span class="number">5</span> &gt; <span class="number">8</span> || <span class="number">6</span> != <span class="number">8</span> &amp;&amp; <span class="number">4</span> &gt; <span class="number">3.9</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| You are quite good my <span class="keyword">friend</span>!</span><br><span class="line"></span><br><span class="line">  |===================================                         |  <span class="number">59</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Let</span><span class="comment">'s walk through the order of operations in the above case. First</span></span><br><span class="line">| the left <span class="keyword">and</span> right operands <span class="keyword">of</span> the <span class="keyword">AND</span> <span class="keyword">operator</span> are evaluated. <span class="number">6</span> <span class="keyword">is</span></span><br><span class="line">| <span class="keyword">not</span> equal <span class="number">8</span>, <span class="number">4</span> <span class="keyword">is</span> greater than <span class="number">3.9</span>, therefore both operands are</span><br><span class="line">| <span class="literal">TRUE</span> so the resulting expression `<span class="literal">TRUE</span> &amp;&amp; <span class="literal">TRUE</span>` evaluates <span class="keyword">to</span> <span class="literal">TRUE</span>.</span><br><span class="line">| <span class="keyword">Then</span> the left operand <span class="keyword">of</span> the <span class="keyword">OR</span> <span class="keyword">operator</span> <span class="keyword">is</span> evaluated: <span class="number">5</span> <span class="keyword">is</span> <span class="keyword">not</span></span><br><span class="line">| greater than <span class="number">8</span> so the entire expression <span class="keyword">is</span> reduced <span class="keyword">to</span> <span class="literal">FALSE</span> ||</span><br><span class="line">| <span class="literal">TRUE</span>. Since the right operand <span class="keyword">of</span> this expression <span class="keyword">is</span> <span class="literal">TRUE</span> the entire</span><br><span class="line">| expression evaluates <span class="keyword">to</span> <span class="literal">TRUE</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |====================================                        |  <span class="number">61</span>%</span><br><span class="line"></span><br><span class="line">| Which one <span class="keyword">of</span> the following expressions evaluates <span class="keyword">to</span> <span class="literal">TRUE</span>?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: <span class="number">99.99</span> &gt; <span class="number">100</span> || <span class="number">45</span> &lt; <span class="number">7.3</span> || <span class="number">4</span> != <span class="number">4.0</span></span><br><span class="line"><span class="number">2</span>: <span class="literal">TRUE</span> &amp;&amp; <span class="literal">FALSE</span> || <span class="number">9</span> &gt;= <span class="number">4</span> &amp;&amp; <span class="number">3</span> &lt; <span class="number">6</span></span><br><span class="line"><span class="number">3</span>: <span class="literal">FALSE</span> || <span class="literal">TRUE</span> &amp;&amp; <span class="literal">FALSE</span></span><br><span class="line"><span class="number">4</span>: <span class="literal">TRUE</span> &amp;&amp; <span class="number">62</span> &lt; <span class="number">62</span> &amp;&amp; <span class="number">44</span> &gt;= <span class="number">44</span></span><br><span class="line"></span><br><span class="line">Selection: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">| All that hard work <span class="keyword">is</span> paying <span class="keyword">off</span>!</span><br><span class="line"></span><br><span class="line">  |======================================                      |  <span class="number">63</span>%</span><br><span class="line"></span><br><span class="line">| Which one <span class="keyword">of</span> the following expressions evaluates <span class="keyword">to</span> <span class="literal">FALSE</span>?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: !(<span class="number">8</span> &gt; <span class="number">4</span>) ||  <span class="number">5</span> == <span class="number">5.0</span> &amp;&amp; <span class="number">7.8</span> &gt;= <span class="number">7.79</span></span><br><span class="line"><span class="number">2</span>: <span class="literal">FALSE</span> || <span class="literal">TRUE</span> &amp;&amp; <span class="number">6</span> != <span class="number">4</span> || <span class="number">9</span> &gt; <span class="number">4</span></span><br><span class="line"><span class="number">3</span>: <span class="number">6</span> &gt;= -<span class="number">9</span> &amp;&amp; !(<span class="number">6</span> &gt; <span class="number">7</span>) &amp;&amp; !(!<span class="literal">TRUE</span>)</span><br><span class="line"><span class="number">4</span>: <span class="literal">FALSE</span> &amp;&amp; <span class="number">6</span> &gt;= <span class="number">6</span> || <span class="number">7</span> &gt;= <span class="number">8</span> || <span class="number">50</span> &lt;= <span class="number">49.5</span></span><br><span class="line"></span><br><span class="line">Selection: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">| Excellent work!</span><br><span class="line"></span><br><span class="line">  |=======================================                     |  <span class="number">65</span>%</span><br><span class="line"></span><br><span class="line">| Now that you<span class="comment">'re familiar with R's logical operators you can take</span></span><br><span class="line">| advantage <span class="keyword">of</span> a few functions that R provides <span class="keyword">for</span> dealing <span class="keyword">with</span></span><br><span class="line">| logical expressions.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |========================================                    |  <span class="number">67</span>%</span><br><span class="line"></span><br><span class="line">| The <span class="keyword">function</span> <span class="keyword">isTRUE</span>() takes one argument. <span class="keyword">If</span> that argument</span><br><span class="line">| evaluates <span class="keyword">to</span> <span class="literal">TRUE</span>, the <span class="keyword">function</span> will <span class="keyword">return</span> <span class="literal">TRUE</span>. Otherwise, the</span><br><span class="line">| <span class="keyword">function</span> will <span class="keyword">return</span> <span class="literal">FALSE</span>. <span class="keyword">Try</span> <span class="keyword">using</span> this <span class="keyword">function</span> <span class="keyword">by</span> typing:</span><br><span class="line">| <span class="keyword">isTRUE</span>(<span class="number">6</span> &gt; <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">isTRUE</span>(<span class="number">6</span>&gt;<span class="number">4</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| You are really <span class="keyword">on</span> a roll!</span><br><span class="line"></span><br><span class="line">  |=========================================                   |  <span class="number">69</span>%</span><br><span class="line"></span><br><span class="line">| Which <span class="keyword">of</span> the following evaluates <span class="keyword">to</span> <span class="literal">TRUE</span>?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: <span class="keyword">isTRUE</span>(<span class="number">3</span>)</span><br><span class="line"><span class="number">2</span>: <span class="keyword">isTRUE</span>(NA)</span><br><span class="line"><span class="number">3</span>: <span class="keyword">isTRUE</span>(!<span class="literal">TRUE</span>)</span><br><span class="line"><span class="number">4</span>: !<span class="keyword">isTRUE</span>(<span class="number">4</span> &lt; <span class="number">3</span>)</span><br><span class="line"><span class="number">5</span>: !<span class="keyword">isTRUE</span>(<span class="number">8</span> != <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">| Excellent work!</span><br><span class="line"></span><br><span class="line">  |==========================================                  |  <span class="number">71</span>%</span><br><span class="line"></span><br><span class="line">| The <span class="keyword">function</span> identical() will <span class="keyword">return</span> <span class="literal">TRUE</span> <span class="keyword">if</span> the two R objects</span><br><span class="line">| passed <span class="keyword">to</span> it <span class="keyword">as</span> arguments are identical. <span class="keyword">Try</span> out the identical()</span><br><span class="line">| <span class="keyword">function</span> <span class="keyword">by</span> typing: identical(<span class="comment">'twins', 'twins')</span></span><br><span class="line"></span><br><span class="line">&gt; identical(<span class="comment">'twins','twins')</span></span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| Great job!</span><br><span class="line"></span><br><span class="line">  |============================================                |  <span class="number">73</span>%</span><br><span class="line"></span><br><span class="line">| Which <span class="keyword">of</span> the following evaluates <span class="keyword">to</span> <span class="literal">TRUE</span>?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: identical(<span class="number">4</span>, <span class="number">3.1</span>)</span><br><span class="line"><span class="number">2</span>: identical(<span class="comment">'hello', 'Hello')</span></span><br><span class="line"><span class="number">3</span>: identical(<span class="number">5</span> &gt; <span class="number">4</span>, <span class="number">3</span> &lt; <span class="number">3.1</span>)</span><br><span class="line"><span class="number">4</span>: !identical(<span class="number">7</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">| Keep working <span class="keyword">like</span> that <span class="keyword">and</span> you<span class="comment">'ll get there!</span></span><br><span class="line"></span><br><span class="line">  |=============================================               |  <span class="number">75</span>%</span><br><span class="line"></span><br><span class="line">| You should also be aware <span class="keyword">of</span> the <span class="keyword">xor</span>() <span class="keyword">function</span>, which takes two</span><br><span class="line">| arguments. The <span class="keyword">xor</span>() <span class="keyword">function</span> stands <span class="keyword">for</span> exclusive <span class="keyword">OR</span>. <span class="keyword">If</span> one</span><br><span class="line">| argument evaluates <span class="keyword">to</span> <span class="literal">TRUE</span> <span class="keyword">and</span> one argument evaluates <span class="keyword">to</span> <span class="literal">FALSE</span>,</span><br><span class="line">| <span class="keyword">then</span> this <span class="keyword">function</span> will <span class="keyword">return</span> <span class="literal">TRUE</span>, otherwise it will <span class="keyword">return</span></span><br><span class="line">| <span class="literal">FALSE</span>. <span class="keyword">Try</span> out the <span class="keyword">xor</span>() <span class="keyword">function</span> <span class="keyword">by</span> typing: <span class="keyword">xor</span>(<span class="number">5</span> == <span class="number">6</span>, !<span class="literal">FALSE</span>)</span><br><span class="line"></span><br><span class="line">&gt; <span class="keyword">xor</span>(<span class="number">5</span>==<span class="number">6</span>,!<span class="literal">FALSE</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| Perseverance, that<span class="comment">'s the answer.</span></span><br><span class="line"></span><br><span class="line">  |==============================================              |  <span class="number">76</span>%</span><br><span class="line"></span><br><span class="line">| <span class="number">5</span> == <span class="number">6</span> evaluates <span class="keyword">to</span> <span class="literal">FALSE</span>, !<span class="literal">FALSE</span> evaluates <span class="keyword">to</span> <span class="literal">TRUE</span>, so <span class="keyword">xor</span>(<span class="literal">FALSE</span>,</span><br><span class="line">| <span class="literal">TRUE</span>) evaluates <span class="keyword">to</span> <span class="literal">TRUE</span>. <span class="keyword">On</span> the other hand <span class="keyword">if</span> the first argument</span><br><span class="line">| was changed <span class="keyword">to</span> <span class="number">5</span> == <span class="number">5</span> <span class="keyword">and</span> the second argument was unchanged <span class="keyword">then</span></span><br><span class="line">| both arguments would have been <span class="literal">TRUE</span>, so <span class="keyword">xor</span>(<span class="literal">TRUE</span>, <span class="literal">TRUE</span>) would have</span><br><span class="line">| evaluated <span class="keyword">to</span> <span class="literal">FALSE</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |===============================================             |  <span class="number">78</span>%</span><br><span class="line"></span><br><span class="line">| Which <span class="keyword">of</span> the following evaluates <span class="keyword">to</span> <span class="literal">FALSE</span>?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: <span class="keyword">xor</span>(!<span class="keyword">isTRUE</span>(<span class="literal">TRUE</span>), <span class="number">6</span> &gt; -<span class="number">1</span>)</span><br><span class="line"><span class="number">2</span>: <span class="keyword">xor</span>(!!<span class="literal">TRUE</span>, !!<span class="literal">FALSE</span>)</span><br><span class="line"><span class="number">3</span>: <span class="keyword">xor</span>(<span class="number">4</span> &gt;= <span class="number">9</span>, <span class="number">8</span> != <span class="number">8.0</span>)</span><br><span class="line"><span class="number">4</span>: <span class="keyword">xor</span>(identical(<span class="keyword">xor</span>, <span class="comment">'xor'), 7 == 7.0)</span></span><br><span class="line"></span><br><span class="line">Selection: <span class="number">3</span></span><br><span class="line"></span><br><span class="line">| You are doing so well!</span><br><span class="line"></span><br><span class="line">  |================================================            |  <span class="number">80</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">For</span> the <span class="keyword">next</span> few questions, we<span class="comment">'re going to need to create a vector</span></span><br><span class="line">| <span class="keyword">of</span> integers called ints. Create this vector <span class="keyword">by</span> typing: ints &lt;-</span><br><span class="line">| sample(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">&gt; ints&lt;-sample(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s the answer I was looking for.</span></span><br><span class="line"></span><br><span class="line">  |=================================================           |  <span class="number">82</span>%</span><br><span class="line"></span><br><span class="line">| Now simply display the contents <span class="keyword">of</span> ints.</span><br><span class="line"></span><br><span class="line">&gt; ints</span><br><span class="line"> [<span class="number">1</span>]  <span class="number">9</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">1</span>  <span class="number">6</span>  <span class="number">5</span>  <span class="number">4</span>  <span class="number">8</span> <span class="number">10</span>  <span class="number">7</span></span><br><span class="line"></span><br><span class="line">| You are doing so well!</span><br><span class="line"></span><br><span class="line">  |===================================================         |  <span class="number">84</span>%</span><br><span class="line"></span><br><span class="line">| The vector `ints` <span class="keyword">is</span> a random sampling <span class="keyword">of</span> integers <span class="keyword">from</span> <span class="number">1</span> <span class="keyword">to</span> <span class="number">10</span></span><br><span class="line">| without replacement. <span class="keyword">Let</span><span class="comment">'s say we wanted to ask some logical</span></span><br><span class="line">| questions about contents <span class="keyword">of</span> ints. <span class="keyword">If</span> we type ints &gt; <span class="number">5</span>, we will <span class="keyword">get</span></span><br><span class="line">| a logical vector corresponding <span class="keyword">to</span> whether <span class="keyword">each</span> element <span class="keyword">of</span> ints <span class="keyword">is</span></span><br><span class="line">| greater than <span class="number">5.</span> <span class="keyword">Try</span> typing: ints &gt; <span class="number">5</span></span><br><span class="line"></span><br><span class="line">&gt; ints&gt;<span class="number">5</span></span><br><span class="line"> [<span class="number">1</span>]  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span> <span class="literal">FALSE</span> <span class="literal">FALSE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span>  <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| Keep working <span class="keyword">like</span> that <span class="keyword">and</span> you<span class="comment">'ll get there!</span></span><br><span class="line"></span><br><span class="line">  |====================================================        |  <span class="number">86</span>%</span><br><span class="line"></span><br><span class="line">| We can use the resulting logical vector <span class="keyword">to</span> ask other questions</span><br><span class="line">| about ints. The which() <span class="keyword">function</span> takes a logical vector <span class="keyword">as</span> an</span><br><span class="line">| argument <span class="keyword">and</span> returns the indices <span class="keyword">of</span> the vector that are <span class="literal">TRUE</span>. <span class="keyword">For</span></span><br><span class="line">| example which(c(<span class="literal">TRUE</span>, <span class="literal">FALSE</span>, <span class="literal">TRUE</span>)) would <span class="keyword">return</span> the vector c(<span class="number">1</span>,</span><br><span class="line">| <span class="number">3</span>).</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |=====================================================       |  <span class="number">88</span>%</span><br><span class="line"></span><br><span class="line">| Use the which() <span class="keyword">function</span> <span class="keyword">to</span> find the indices <span class="keyword">of</span> ints that are</span><br><span class="line">| greater than <span class="number">7.</span></span><br><span class="line"></span><br><span class="line">&gt; which(ints&gt;<span class="number">7</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="number">1</span> <span class="number">8</span> <span class="number">9</span></span><br><span class="line"></span><br><span class="line">| Nice work!</span><br><span class="line"></span><br><span class="line">  |======================================================      |  <span class="number">90</span>%</span><br><span class="line"></span><br><span class="line">| Which <span class="keyword">of</span> the following commands would produce the indices <span class="keyword">of</span> the</span><br><span class="line">| elements <span class="keyword">in</span> ints that are less than <span class="keyword">or</span> equal <span class="keyword">to</span> <span class="number">2</span>?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: which(ints &lt;= <span class="number">2</span>)</span><br><span class="line"><span class="number">2</span>: ints &lt;= <span class="number">2</span></span><br><span class="line"><span class="number">3</span>: which(ints &lt; <span class="number">2</span>)</span><br><span class="line"><span class="number">4</span>: ints &lt; <span class="number">2</span></span><br><span class="line"></span><br><span class="line">Selection: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s the answer I was looking for.</span></span><br><span class="line"></span><br><span class="line">  |=======================================================     |  <span class="number">92</span>%</span><br><span class="line"></span><br><span class="line">| <span class="keyword">Like</span> the which() <span class="keyword">function</span>, the functions any() <span class="keyword">and</span> all() <span class="keyword">take</span></span><br><span class="line">| logical vectors <span class="keyword">as</span> their argument. The any() <span class="keyword">function</span> will <span class="keyword">return</span></span><br><span class="line">| <span class="literal">TRUE</span> <span class="keyword">if</span> one <span class="keyword">or</span> more <span class="keyword">of</span> the elements <span class="keyword">in</span> the logical vector <span class="keyword">is</span> <span class="literal">TRUE</span>.</span><br><span class="line">| The all() <span class="keyword">function</span> will <span class="keyword">return</span> <span class="literal">TRUE</span> <span class="keyword">if</span> every element <span class="keyword">in</span> the logical</span><br><span class="line">| vector <span class="keyword">is</span> <span class="literal">TRUE</span>.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  |========================================================    |  <span class="number">94</span>%</span><br><span class="line"></span><br><span class="line">| Use the any() <span class="keyword">function</span> <span class="keyword">to</span> see <span class="keyword">if</span> any <span class="keyword">of</span> the elements <span class="keyword">of</span> ints are</span><br><span class="line">| less than zero.</span><br><span class="line"></span><br><span class="line">&gt; any(ints&lt;<span class="number">0</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">FALSE</span></span><br><span class="line"></span><br><span class="line">| Great job!</span><br><span class="line"></span><br><span class="line">  |==========================================================  |  <span class="number">96</span>%</span><br><span class="line"></span><br><span class="line">| Use the all() <span class="keyword">function</span> <span class="keyword">to</span> see <span class="keyword">if</span> all <span class="keyword">of</span> the elements <span class="keyword">of</span> ints are</span><br><span class="line">| greater than zero.</span><br><span class="line"></span><br><span class="line">&gt; all(ints&gt;<span class="number">0</span>)</span><br><span class="line">[<span class="number">1</span>] <span class="literal">TRUE</span></span><br><span class="line"></span><br><span class="line">| Nice work!</span><br><span class="line"></span><br><span class="line">  |=========================================================== |  <span class="number">98</span>%</span><br><span class="line"></span><br><span class="line">| Which <span class="keyword">of</span> the following evaluates <span class="keyword">to</span> <span class="literal">TRUE</span>?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: all(c(<span class="literal">TRUE</span>, <span class="literal">FALSE</span>, <span class="literal">TRUE</span>))</span><br><span class="line"><span class="number">2</span>: any(ints == <span class="number">10</span>)</span><br><span class="line"><span class="number">3</span>: all(ints == <span class="number">10</span>)</span><br><span class="line"><span class="number">4</span>: any(ints == <span class="number">2.5</span>)</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s a job well done!</span></span><br><span class="line"></span><br><span class="line">  |============================================================| <span class="number">100</span>%</span><br><span class="line"></span><br><span class="line">| That<span class="comment">'s all for this introduction to logic in R. If you really want</span></span><br><span class="line">| <span class="keyword">to</span> see what you can <span class="keyword">do</span> <span class="keyword">with</span> logic, check out the control flow</span><br><span class="line">| lesson!</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">| Are you currently enrolled <span class="keyword">in</span> the Coursera course associated <span class="keyword">with</span></span><br><span class="line">| this lesson?</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>: Yes</span><br><span class="line"><span class="number">2</span>: No</span><br><span class="line"></span><br><span class="line">Selection: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">| You<span class="comment">'ve reached the end of this lesson! Returning to the main</span></span><br><span class="line">| menu...</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">| Please choose a course, ]]>
    </summary>
    
      <category term="R" scheme="http://yoursite.com/tags/R/"/>
    
      <category term="技术分享" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
</feed>